//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\nvasin\Documents\projects\antlr4\trino\SqlBase.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SqlBaseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		ABSENT=18, ADD=19, ADMIN=20, AFTER=21, ALL=22, ALTER=23, ANALYZE=24, AND=25, 
		ANY=26, ARRAY=27, AS=28, ASC=29, AT=30, AUTHORIZATION=31, BERNOULLI=32, 
		BETWEEN=33, BOTH=34, BY=35, CALL=36, CASCADE=37, CASE=38, CAST=39, CATALOG=40, 
		CATALOGS=41, COLUMN=42, COLUMNS=43, COMMENT=44, COMMIT=45, COMMITTED=46, 
		CONDITIONAL=47, CONSTRAINT=48, COUNT=49, COPARTITION=50, CREATE=51, CROSS=52, 
		CUBE=53, CURRENT=54, CURRENT_CATALOG=55, CURRENT_DATE=56, CURRENT_PATH=57, 
		CURRENT_ROLE=58, CURRENT_SCHEMA=59, CURRENT_TIME=60, CURRENT_TIMESTAMP=61, 
		CURRENT_USER=62, DATA=63, DATE=64, DAY=65, DEALLOCATE=66, DEFAULT=67, 
		DEFINE=68, DEFINER=69, DELETE=70, DENY=71, DESC=72, DESCRIBE=73, DESCRIPTOR=74, 
		DISTINCT=75, DISTRIBUTED=76, DOUBLE=77, DROP=78, ELSE=79, EMPTY=80, ENCODING=81, 
		END=82, ERROR=83, ESCAPE=84, EXCEPT=85, EXCLUDING=86, EXECUTE=87, EXISTS=88, 
		EXPLAIN=89, EXTRACT=90, FALSE=91, FETCH=92, FILTER=93, FINAL=94, FIRST=95, 
		FOLLOWING=96, FOR=97, FORMAT=98, FROM=99, FULL=100, FUNCTIONS=101, GRACE=102, 
		GRANT=103, GRANTED=104, GRANTS=105, GRAPHVIZ=106, GROUP=107, GROUPING=108, 
		GROUPS=109, HAVING=110, HOUR=111, IF=112, IGNORE=113, IN=114, INCLUDING=115, 
		INITIAL=116, INNER=117, INPUT=118, INSERT=119, INTERSECT=120, INTERVAL=121, 
		INTO=122, INVOKER=123, IO=124, IS=125, ISOLATION=126, JOIN=127, JSON=128, 
		JSON_ARRAY=129, JSON_EXISTS=130, JSON_OBJECT=131, JSON_QUERY=132, JSON_VALUE=133, 
		KEEP=134, KEY=135, KEYS=136, LAST=137, LATERAL=138, LEADING=139, LEFT=140, 
		LEVEL=141, LIKE=142, LIMIT=143, LISTAGG=144, LOCAL=145, LOCALTIME=146, 
		LOCALTIMESTAMP=147, LOGICAL=148, MAP=149, MATCH=150, MATCHED=151, MATCHES=152, 
		MATCH_RECOGNIZE=153, MATERIALIZED=154, MEASURES=155, MERGE=156, MINUTE=157, 
		MONTH=158, NATURAL=159, NEXT=160, NFC=161, NFD=162, NFKC=163, NFKD=164, 
		NO=165, NONE=166, NORMALIZE=167, NOT=168, NULL=169, NULLIF=170, NULLS=171, 
		OBJECT=172, OF=173, OFFSET=174, OMIT=175, ON=176, ONE=177, ONLY=178, OPTION=179, 
		OR=180, ORDER=181, ORDINALITY=182, OUTER=183, OUTPUT=184, OVER=185, OVERFLOW=186, 
		PARTITION=187, PARTITIONS=188, PASSING=189, PAST=190, PATH=191, PATTERN=192, 
		PER=193, PERIOD=194, PERMUTE=195, POSITION=196, PRECEDING=197, PRECISION=198, 
		PREPARE=199, PRIVILEGES=200, PROPERTIES=201, PRUNE=202, QUOTES=203, RANGE=204, 
		READ=205, RECURSIVE=206, REFRESH=207, RENAME=208, REPEATABLE=209, REPLACE=210, 
		RESET=211, RESPECT=212, RESTRICT=213, RETURNING=214, REVOKE=215, RIGHT=216, 
		ROLE=217, ROLES=218, ROLLBACK=219, ROLLUP=220, ROW=221, ROWS=222, RUNNING=223, 
		SCALAR=224, SCHEMA=225, SCHEMAS=226, SECOND=227, SECURITY=228, SEEK=229, 
		SELECT=230, SERIALIZABLE=231, SESSION=232, SET=233, SETS=234, SHOW=235, 
		SOME=236, START=237, STATS=238, SUBSET=239, SUBSTRING=240, SYSTEM=241, 
		TABLE=242, TABLES=243, TABLESAMPLE=244, TEXT=245, TEXT_STRING=246, THEN=247, 
		TIES=248, TIME=249, TIMESTAMP=250, TO=251, TRAILING=252, TRANSACTION=253, 
		TRIM=254, TRUE=255, TRUNCATE=256, TRY_CAST=257, TYPE=258, UESCAPE=259, 
		UNBOUNDED=260, UNCOMMITTED=261, UNCONDITIONAL=262, UNION=263, UNIQUE=264, 
		UNKNOWN=265, UNMATCHED=266, UNNEST=267, UPDATE=268, USE=269, USER=270, 
		USING=271, UTF16=272, UTF32=273, UTF8=274, VALIDATE=275, VALUE=276, VALUES=277, 
		VERBOSE=278, VERSION=279, VIEW=280, WHEN=281, WHERE=282, WINDOW=283, WITH=284, 
		WITHIN=285, WITHOUT=286, WORK=287, WRAPPER=288, WRITE=289, YEAR=290, ZONE=291, 
		EQ=292, NEQ=293, LT=294, LTE=295, GT=296, GTE=297, PLUS=298, MINUS=299, 
		ASTERISK=300, SLASH=301, PERCENT=302, CONCAT=303, QUESTION_MARK=304, STRING=305, 
		UNICODE_STRING=306, BINARY_LITERAL=307, INTEGER_VALUE=308, DECIMAL_VALUE=309, 
		DOUBLE_VALUE=310, IDENTIFIER=311, DIGIT_IDENTIFIER=312, QUOTED_IDENTIFIER=313, 
		BACKQUOTED_IDENTIFIER=314, SIMPLE_COMMENT=315, BRACKETED_COMMENT=316, 
		WS=317, UNRECOGNIZED=318, DELIMITER=319;
	public const int
		RULE_singleStatement = 0, RULE_standaloneExpression = 1, RULE_standalonePathSpecification = 2, 
		RULE_standaloneType = 3, RULE_standaloneRowPattern = 4, RULE_statement = 5, 
		RULE_query = 6, RULE_with = 7, RULE_tableElement = 8, RULE_columnDefinition = 9, 
		RULE_likeClause = 10, RULE_properties = 11, RULE_propertyAssignments = 12, 
		RULE_property = 13, RULE_propertyValue = 14, RULE_queryNoWith = 15, RULE_limitRowCount = 16, 
		RULE_rowCount = 17, RULE_queryTerm = 18, RULE_queryPrimary = 19, RULE_sortItem = 20, 
		RULE_querySpecification = 21, RULE_groupBy = 22, RULE_groupingElement = 23, 
		RULE_groupingSet = 24, RULE_windowDefinition = 25, RULE_windowSpecification = 26, 
		RULE_namedQuery = 27, RULE_setQuantifier = 28, RULE_selectItem = 29, RULE_relation = 30, 
		RULE_joinType = 31, RULE_joinCriteria = 32, RULE_sampledRelation = 33, 
		RULE_sampleType = 34, RULE_trimsSpecification = 35, RULE_listAggOverflowBehavior = 36, 
		RULE_listaggCountIndication = 37, RULE_patternRecognition = 38, RULE_measureDefinition = 39, 
		RULE_rowsPerMatch = 40, RULE_emptyMatchHandling = 41, RULE_skipTo = 42, 
		RULE_subsetDefinition = 43, RULE_variableDefinition = 44, RULE_aliasedRelation = 45, 
		RULE_columnAliases = 46, RULE_relationPrimary = 47, RULE_tableFunctionCall = 48, 
		RULE_tableFunctionArgument = 49, RULE_tableArgument = 50, RULE_tableArgumentRelation = 51, 
		RULE_descriptorArgument = 52, RULE_descriptorField = 53, RULE_copartitionTables = 54, 
		RULE_expression = 55, RULE_booleanExpression = 56, RULE_predicate = 57, 
		RULE_valueExpression = 58, RULE_primaryExpression = 59, RULE_jsonPathInvocation = 60, 
		RULE_jsonValueExpression = 61, RULE_jsonRepresentation = 62, RULE_jsonArgument = 63, 
		RULE_jsonExistsErrorBehavior = 64, RULE_jsonValueBehavior = 65, RULE_jsonQueryWrapperBehavior = 66, 
		RULE_jsonQueryBehavior = 67, RULE_jsonObjectMember = 68, RULE_processingMode = 69, 
		RULE_nullTreatment = 70, RULE_string = 71, RULE_timeZoneSpecifier = 72, 
		RULE_comparisonOperator = 73, RULE_comparisonQuantifier = 74, RULE_booleanValue = 75, 
		RULE_interval = 76, RULE_intervalField = 77, RULE_normalForm = 78, RULE_type = 79, 
		RULE_rowField = 80, RULE_typeParameter = 81, RULE_whenClause = 82, RULE_filter = 83, 
		RULE_mergeCase = 84, RULE_over = 85, RULE_windowFrame = 86, RULE_frameExtent = 87, 
		RULE_frameBound = 88, RULE_rowPattern = 89, RULE_patternPrimary = 90, 
		RULE_patternQuantifier = 91, RULE_updateAssignment = 92, RULE_explainOption = 93, 
		RULE_transactionMode = 94, RULE_levelOfIsolation = 95, RULE_callArgument = 96, 
		RULE_pathElement = 97, RULE_pathSpecification = 98, RULE_privilege = 99, 
		RULE_qualifiedName = 100, RULE_queryPeriod = 101, RULE_rangeType = 102, 
		RULE_grantor = 103, RULE_principal = 104, RULE_roles = 105, RULE_identifier = 106, 
		RULE_number = 107, RULE_nonReserved = 108;
	public static readonly string[] ruleNames = {
		"singleStatement", "standaloneExpression", "standalonePathSpecification", 
		"standaloneType", "standaloneRowPattern", "statement", "query", "with", 
		"tableElement", "columnDefinition", "likeClause", "properties", "propertyAssignments", 
		"property", "propertyValue", "queryNoWith", "limitRowCount", "rowCount", 
		"queryTerm", "queryPrimary", "sortItem", "querySpecification", "groupBy", 
		"groupingElement", "groupingSet", "windowDefinition", "windowSpecification", 
		"namedQuery", "setQuantifier", "selectItem", "relation", "joinType", "joinCriteria", 
		"sampledRelation", "sampleType", "trimsSpecification", "listAggOverflowBehavior", 
		"listaggCountIndication", "patternRecognition", "measureDefinition", "rowsPerMatch", 
		"emptyMatchHandling", "skipTo", "subsetDefinition", "variableDefinition", 
		"aliasedRelation", "columnAliases", "relationPrimary", "tableFunctionCall", 
		"tableFunctionArgument", "tableArgument", "tableArgumentRelation", "descriptorArgument", 
		"descriptorField", "copartitionTables", "expression", "booleanExpression", 
		"predicate", "valueExpression", "primaryExpression", "jsonPathInvocation", 
		"jsonValueExpression", "jsonRepresentation", "jsonArgument", "jsonExistsErrorBehavior", 
		"jsonValueBehavior", "jsonQueryWrapperBehavior", "jsonQueryBehavior", 
		"jsonObjectMember", "processingMode", "nullTreatment", "string", "timeZoneSpecifier", 
		"comparisonOperator", "comparisonQuantifier", "booleanValue", "interval", 
		"intervalField", "normalForm", "type", "rowField", "typeParameter", "whenClause", 
		"filter", "mergeCase", "over", "windowFrame", "frameExtent", "frameBound", 
		"rowPattern", "patternPrimary", "patternQuantifier", "updateAssignment", 
		"explainOption", "transactionMode", "levelOfIsolation", "callArgument", 
		"pathElement", "pathSpecification", "privilege", "qualifiedName", "queryPeriod", 
		"rangeType", "grantor", "principal", "roles", "identifier", "number", 
		"nonReserved"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'('", "')'", "','", "'SKIP'", "'=>'", "'->'", "'['", "']'", 
		"':'", "'|'", "'^'", "'$'", "'{-'", "'-}'", "'{'", "'}'", "'ABSENT'", 
		"'ADD'", "'ADMIN'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", 
		"'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", "'BERNOULLI'", 
		"'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
		"'CATALOG'", "'CATALOGS'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", 
		"'COMMITTED'", "'CONDITIONAL'", "'CONSTRAINT'", "'COUNT'", "'COPARTITION'", 
		"'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", 
		"'CURRENT_PATH'", "'CURRENT_ROLE'", "'CURRENT_SCHEMA'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", "'DATE'", "'DAY'", 
		"'DEALLOCATE'", "'DEFAULT'", "'DEFINE'", "'DEFINER'", "'DELETE'", "'DENY'", 
		"'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", "'DISTINCT'", "'DISTRIBUTED'", 
		"'DOUBLE'", "'DROP'", "'ELSE'", "'EMPTY'", "'ENCODING'", "'END'", "'ERROR'", 
		"'ESCAPE'", "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
		"'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FINAL'", "'FIRST'", "'FOLLOWING'", 
		"'FOR'", "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTIONS'", "'GRACE'", "'GRANT'", 
		"'GRANTED'", "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", "'GROUPS'", 
		"'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", "'IN'", "'INCLUDING'", "'INITIAL'", 
		"'INNER'", "'INPUT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INTO'", 
		"'INVOKER'", "'IO'", "'IS'", "'ISOLATION'", "'JOIN'", "'JSON'", "'JSON_ARRAY'", 
		"'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_QUERY'", "'JSON_VALUE'", "'KEEP'", 
		"'KEY'", "'KEYS'", "'LAST'", "'LATERAL'", "'LEADING'", "'LEFT'", "'LEVEL'", 
		"'LIKE'", "'LIMIT'", "'LISTAGG'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
		"'LOGICAL'", "'MAP'", "'MATCH'", "'MATCHED'", "'MATCHES'", "'MATCH_RECOGNIZE'", 
		"'MATERIALIZED'", "'MEASURES'", "'MERGE'", "'MINUTE'", "'MONTH'", "'NATURAL'", 
		"'NEXT'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NONE'", "'NORMALIZE'", 
		"'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", "'OBJECT'", "'OF'", "'OFFSET'", 
		"'OMIT'", "'ON'", "'ONE'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", "'ORDINALITY'", 
		"'OUTER'", "'OUTPUT'", "'OVER'", "'OVERFLOW'", "'PARTITION'", "'PARTITIONS'", 
		"'PASSING'", "'PAST'", "'PATH'", "'PATTERN'", "'PER'", "'PERIOD'", "'PERMUTE'", 
		"'POSITION'", "'PRECEDING'", "'PRECISION'", "'PREPARE'", "'PRIVILEGES'", 
		"'PROPERTIES'", "'PRUNE'", "'QUOTES'", "'RANGE'", "'READ'", "'RECURSIVE'", 
		"'REFRESH'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", 
		"'RESTRICT'", "'RETURNING'", "'REVOKE'", "'RIGHT'", "'ROLE'", "'ROLES'", 
		"'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'RUNNING'", "'SCALAR'", 
		"'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SECURITY'", "'SEEK'", "'SELECT'", 
		"'SERIALIZABLE'", "'SESSION'", "'SET'", "'SETS'", "'SHOW'", "'SOME'", 
		"'START'", "'STATS'", "'SUBSET'", "'SUBSTRING'", "'SYSTEM'", "'TABLE'", 
		"'TABLES'", "'TABLESAMPLE'", "'TEXT'", "'STRING'", "'THEN'", "'TIES'", 
		"'TIME'", "'TIMESTAMP'", "'TO'", "'TRAILING'", "'TRANSACTION'", "'TRIM'", 
		"'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", 
		"'UNCOMMITTED'", "'UNCONDITIONAL'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", 
		"'UNMATCHED'", "'UNNEST'", "'UPDATE'", "'USE'", "'USER'", "'USING'", "'UTF16'", 
		"'UTF32'", "'UTF8'", "'VALIDATE'", "'VALUE'", "'VALUES'", "'VERBOSE'", 
		"'VERSION'", "'VIEW'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", 
		"'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'YEAR'", "'ZONE'", "'='", 
		null, "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'||'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "ABSENT", "ADD", "ADMIN", "AFTER", 
		"ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "AT", "AUTHORIZATION", 
		"BERNOULLI", "BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", 
		"CATALOG", "CATALOGS", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
		"CONDITIONAL", "CONSTRAINT", "COUNT", "COPARTITION", "CREATE", "CROSS", 
		"CUBE", "CURRENT", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_PATH", 
		"CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "DATA", "DATE", "DAY", "DEALLOCATE", "DEFAULT", "DEFINE", 
		"DEFINER", "DELETE", "DENY", "DESC", "DESCRIBE", "DESCRIPTOR", "DISTINCT", 
		"DISTRIBUTED", "DOUBLE", "DROP", "ELSE", "EMPTY", "ENCODING", "END", "ERROR", 
		"ESCAPE", "EXCEPT", "EXCLUDING", "EXECUTE", "EXISTS", "EXPLAIN", "EXTRACT", 
		"FALSE", "FETCH", "FILTER", "FINAL", "FIRST", "FOLLOWING", "FOR", "FORMAT", 
		"FROM", "FULL", "FUNCTIONS", "GRACE", "GRANT", "GRANTED", "GRANTS", "GRAPHVIZ", 
		"GROUP", "GROUPING", "GROUPS", "HAVING", "HOUR", "IF", "IGNORE", "IN", 
		"INCLUDING", "INITIAL", "INNER", "INPUT", "INSERT", "INTERSECT", "INTERVAL", 
		"INTO", "INVOKER", "IO", "IS", "ISOLATION", "JOIN", "JSON", "JSON_ARRAY", 
		"JSON_EXISTS", "JSON_OBJECT", "JSON_QUERY", "JSON_VALUE", "KEEP", "KEY", 
		"KEYS", "LAST", "LATERAL", "LEADING", "LEFT", "LEVEL", "LIKE", "LIMIT", 
		"LISTAGG", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOGICAL", "MAP", "MATCH", 
		"MATCHED", "MATCHES", "MATCH_RECOGNIZE", "MATERIALIZED", "MEASURES", "MERGE", 
		"MINUTE", "MONTH", "NATURAL", "NEXT", "NFC", "NFD", "NFKC", "NFKD", "NO", 
		"NONE", "NORMALIZE", "NOT", "NULL", "NULLIF", "NULLS", "OBJECT", "OF", 
		"OFFSET", "OMIT", "ON", "ONE", "ONLY", "OPTION", "OR", "ORDER", "ORDINALITY", 
		"OUTER", "OUTPUT", "OVER", "OVERFLOW", "PARTITION", "PARTITIONS", "PASSING", 
		"PAST", "PATH", "PATTERN", "PER", "PERIOD", "PERMUTE", "POSITION", "PRECEDING", 
		"PRECISION", "PREPARE", "PRIVILEGES", "PROPERTIES", "PRUNE", "QUOTES", 
		"RANGE", "READ", "RECURSIVE", "REFRESH", "RENAME", "REPEATABLE", "REPLACE", 
		"RESET", "RESPECT", "RESTRICT", "RETURNING", "REVOKE", "RIGHT", "ROLE", 
		"ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RUNNING", "SCALAR", "SCHEMA", 
		"SCHEMAS", "SECOND", "SECURITY", "SEEK", "SELECT", "SERIALIZABLE", "SESSION", 
		"SET", "SETS", "SHOW", "SOME", "START", "STATS", "SUBSET", "SUBSTRING", 
		"SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", "TEXT", "TEXT_STRING", "THEN", 
		"TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRIM", 
		"TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", 
		"UNCONDITIONAL", "UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", "UNNEST", 
		"UPDATE", "USE", "USER", "USING", "UTF16", "UTF32", "UTF8", "VALIDATE", 
		"VALUE", "VALUES", "VERBOSE", "VERSION", "VIEW", "WHEN", "WHERE", "WINDOW", 
		"WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE", "YEAR", "ZONE", 
		"EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
		"PERCENT", "CONCAT", "QUESTION_MARK", "STRING", "UNICODE_STRING", "BINARY_LITERAL", 
		"INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
		"QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", 
		"WS", "UNRECOGNIZED", "DELIMITER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SqlBase.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SqlBaseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SqlBaseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SqlBaseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SingleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SqlBaseParser.Eof, 0); }
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_singleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			statement();
			State = 219;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SqlBaseParser.Eof, 0); }
		public StandaloneExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandaloneExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneExpressionContext standaloneExpression() {
		StandaloneExpressionContext _localctx = new StandaloneExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_standaloneExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			expression();
			State = 222;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandalonePathSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathSpecificationContext pathSpecification() {
			return GetRuleContext<PathSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SqlBaseParser.Eof, 0); }
		public StandalonePathSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standalonePathSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandalonePathSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandalonePathSpecificationContext standalonePathSpecification() {
		StandalonePathSpecificationContext _localctx = new StandalonePathSpecificationContext(Context, State);
		EnterRule(_localctx, 4, RULE_standalonePathSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			pathSpecification();
			State = 225;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SqlBaseParser.Eof, 0); }
		public StandaloneTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandaloneType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneTypeContext standaloneType() {
		StandaloneTypeContext _localctx = new StandaloneTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_standaloneType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			type(0);
			State = 228;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneRowPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext rowPattern() {
			return GetRuleContext<RowPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SqlBaseParser.Eof, 0); }
		public StandaloneRowPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneRowPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandaloneRowPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneRowPatternContext standaloneRowPattern() {
		StandaloneRowPatternContext _localctx = new StandaloneRowPatternContext(Context, State);
		EnterRule(_localctx, 8, RULE_standaloneRowPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			rowPattern(0);
			State = 231;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExplainContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(SqlBaseParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainOptionContext[] explainOption() {
			return GetRuleContexts<ExplainOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainOptionContext explainOption(int i) {
			return GetRuleContext<ExplainOptionContext>(i);
		}
		public ExplainContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrepareContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(SqlBaseParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public PrepareContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropMaterializedViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public DropMaterializedViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropMaterializedView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetMaterializedViewPropertiesContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTIES() { return GetToken(SqlBaseParser.PROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentsContext propertyAssignments() {
			return GetRuleContext<PropertyAssignmentsContext>(0);
		}
		public SetMaterializedViewPropertiesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetMaterializedViewProperties(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseContext : StatementContext {
		public IdentifierContext schema;
		public IdentifierContext catalog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(SqlBaseParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public UseContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeallocateContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(SqlBaseParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(SqlBaseParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DeallocateContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeallocate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RenameTableContext : StatementContext {
		public QualifiedNameContext from;
		public QualifiedNameContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public RenameTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommitContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(SqlBaseParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(SqlBaseParser.WORK, 0); }
		public CommitContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateRoleContext : StatementContext {
		public IdentifierContext name;
		public IdentifierContext catalog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(SqlBaseParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantorContext grantor() {
			return GetRuleContext<GrantorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		public CreateRoleContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateRole(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropColumnContext : StatementContext {
		public QualifiedNameContext tableName;
		public QualifiedNameContext column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SqlBaseParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SqlBaseParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(SqlBaseParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(SqlBaseParser.EXISTS, i);
		}
		public DropColumnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public DropViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowTablesContext : StatementContext {
		public StringContext pattern;
		public StringContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(SqlBaseParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public ShowTablesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowTables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetViewAuthorizationContext : StatementContext {
		public QualifiedNameContext from;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(SqlBaseParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SetViewAuthorizationContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetViewAuthorization(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCatalogsContext : StatementContext {
		public StringContext pattern;
		public StringContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOGS() { return GetToken(SqlBaseParser.CATALOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public ShowCatalogsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCatalogs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRolesContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLES() { return GetToken(SqlBaseParser.ROLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SqlBaseParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		public ShowRolesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoles(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MergeContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(SqlBaseParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(SqlBaseParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SqlBaseParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeCaseContext[] mergeCase() {
			return GetRuleContexts<MergeCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeCaseContext mergeCase(int i) {
			return GetRuleContext<MergeCaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		public MergeContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RenameColumnContext : StatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext from;
		public IdentifierContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SqlBaseParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SqlBaseParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(SqlBaseParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(SqlBaseParser.EXISTS, i);
		}
		public RenameColumnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentColumnContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SqlBaseParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		public CommentColumnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RevokeRolesContext : StatementContext {
		public IdentifierContext catalog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(SqlBaseParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolesContext roles() {
			return GetRuleContext<RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext[] principal() {
			return GetRuleContexts<PrincipalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal(int i) {
			return GetRuleContext<PrincipalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(SqlBaseParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(SqlBaseParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantorContext grantor() {
			return GetRuleContext<GrantorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RevokeRolesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevokeRoles(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateTableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ShowCreateTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowColumnsContext : StatementContext {
		public StringContext pattern;
		public StringContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(SqlBaseParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(SqlBaseParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SqlBaseParser.DESC, 0); }
		public ShowColumnsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowColumns(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRoleGrantsContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(SqlBaseParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		public ShowRoleGrantsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoleGrants(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddColumnContext : StatementContext {
		public QualifiedNameContext tableName;
		public ColumnDefinitionContext column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SqlBaseParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SqlBaseParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SqlBaseParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(SqlBaseParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(SqlBaseParser.EXISTS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public AddColumnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DenyContext : StatementContext {
		public PrincipalContext grantee;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENY() { return GetToken(SqlBaseParser.DENY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(SqlBaseParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		public DenyContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeny(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ResetSessionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(SqlBaseParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(SqlBaseParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ResetSessionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetSession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertIntoContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SqlBaseParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(SqlBaseParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public InsertIntoContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertInto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSessionContext : StatementContext {
		public StringContext pattern;
		public StringContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(SqlBaseParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public ShowSessionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateSchemaContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(SqlBaseParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public CreateSchemaContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplainAnalyzeContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(SqlBaseParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(SqlBaseParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(SqlBaseParser.VERBOSE, 0); }
		public ExplainAnalyzeContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainAnalyze(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExecuteContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(SqlBaseParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SqlBaseParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExecuteContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RenameSchemaContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RenameSchemaContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropRoleContext : StatementContext {
		public IdentifierContext name;
		public IdentifierContext catalog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		public DropRoleContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropRole(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnalyzeContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(SqlBaseParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public AnalyzeContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyze(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetRoleContext : StatementContext {
		public IdentifierContext role;
		public IdentifierContext catalog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(SqlBaseParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		public SetRoleContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetRole(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropCatalogContext : StatementContext {
		public IdentifierContext catalog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(SqlBaseParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(SqlBaseParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(SqlBaseParser.RESTRICT, 0); }
		public DropCatalogContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropCatalog(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGrantsContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(SqlBaseParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		public ShowGrantsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGrants(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropSchemaContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(SqlBaseParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(SqlBaseParser.RESTRICT, 0); }
		public DropSchemaContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetTableAuthorizationContext : StatementContext {
		public QualifiedNameContext tableName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(SqlBaseParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SetTableAuthorizationContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTableAuthorization(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ShowCreateViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateTableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext[] tableElement() {
			return GetRuleContexts<TableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext tableElement(int i) {
			return GetRuleContext<TableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public CreateTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StartTransactionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(SqlBaseParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(SqlBaseParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext[] transactionMode() {
			return GetRuleContexts<TransactionModeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext transactionMode(int i) {
			return GetRuleContext<TransactionModeContext>(i);
		}
		public StartTransactionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateTableAsSelectContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(SqlBaseParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(SqlBaseParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(SqlBaseParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(SqlBaseParser.NO, 0); }
		public CreateTableAsSelectContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableAsSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SqlBaseParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		public CommentViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowStatsContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS() { return GetToken(SqlBaseParser.STATS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ShowStatsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowStats(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateSchemaContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ShowCreateSchemaContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RevokeContext : StatementContext {
		public PrincipalContext grantee;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(SqlBaseParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(SqlBaseParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(SqlBaseParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		public RevokeContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpdateContext : StatementContext {
		public BooleanExpressionContext where;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(SqlBaseParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateAssignmentContext[] updateAssignment() {
			return GetRuleContexts<UpdateAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateAssignmentContext updateAssignment(int i) {
			return GetRuleContext<UpdateAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SqlBaseParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public UpdateContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableExecuteContext : StatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext procedureName;
		public BooleanExpressionContext where;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(SqlBaseParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SqlBaseParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgumentContext[] callArgument() {
			return GetRuleContexts<CallArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgumentContext callArgument(int i) {
			return GetRuleContext<CallArgumentContext>(i);
		}
		public TableExecuteContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableExecute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SqlBaseParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SqlBaseParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public DeleteContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DescribeInputContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(SqlBaseParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SqlBaseParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DescribeInputContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowStatsForQueryContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS() { return GetToken(SqlBaseParser.STATS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ShowStatsForQueryContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowStatsForQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetColumnTypeContext : StatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext columnName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(SqlBaseParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(SqlBaseParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(SqlBaseParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SqlBaseParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public SetColumnTypeContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetColumnType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementDefaultContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public StatementDefaultContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetTimeZoneContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(SqlBaseParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(SqlBaseParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(SqlBaseParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetTimeZoneContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TruncateTableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(SqlBaseParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TruncateTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateMaterializedViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SqlBaseParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SqlBaseParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRACE() { return GetToken(SqlBaseParser.GRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(SqlBaseParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public CreateMaterializedViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateMaterializedView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetSessionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(SqlBaseParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SqlBaseParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetSessionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SqlBaseParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SqlBaseParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(SqlBaseParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(SqlBaseParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(SqlBaseParser.INVOKER, 0); }
		public CreateViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RenameMaterializedViewContext : StatementContext {
		public QualifiedNameContext from;
		public QualifiedNameContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public RenameMaterializedViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameMaterializedView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSchemasContext : StatementContext {
		public StringContext pattern;
		public StringContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(SqlBaseParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public ShowSchemasContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemas(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropTableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public DropTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetSchemaAuthorizationContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(SqlBaseParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		public SetSchemaAuthorizationContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSchemaAuthorization(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RollbackContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SqlBaseParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(SqlBaseParser.WORK, 0); }
		public RollbackContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentTableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SqlBaseParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		public CommentTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RenameViewContext : StatementContext {
		public QualifiedNameContext from;
		public QualifiedNameContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public RenameViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetPathContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(SqlBaseParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathSpecificationContext pathSpecification() {
			return GetRuleContext<PathSpecificationContext>(0);
		}
		public SetPathContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPath(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GrantRolesContext : StatementContext {
		public IdentifierContext catalog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(SqlBaseParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolesContext roles() {
			return GetRuleContext<RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext[] principal() {
			return GetRuleContexts<PrincipalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal(int i) {
			return GetRuleContext<PrincipalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(SqlBaseParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(SqlBaseParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantorContext grantor() {
			return GetRuleContext<GrantorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GrantRolesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantRoles(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SqlBaseParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgumentContext[] callArgument() {
			return GetRuleContexts<CallArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgumentContext callArgument(int i) {
			return GetRuleContext<CallArgumentContext>(i);
		}
		public CallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RefreshMaterializedViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(SqlBaseParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public RefreshMaterializedViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefreshMaterializedView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateMaterializedViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ShowCreateMaterializedViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateMaterializedView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateCatalogContext : StatementContext {
		public IdentifierContext catalog;
		public IdentifierContext connectorName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(SqlBaseParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SqlBaseParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(SqlBaseParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public CreateCatalogContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateCatalog(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowFunctionsContext : StatementContext {
		public StringContext pattern;
		public StringContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(SqlBaseParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public ShowFunctionsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DescribeOutputContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(SqlBaseParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(SqlBaseParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DescribeOutputContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeOutput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GrantContext : StatementContext {
		public PrincipalContext grantee;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(SqlBaseParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(SqlBaseParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(SqlBaseParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		public GrantContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetTablePropertiesContext : StatementContext {
		public QualifiedNameContext tableName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTIES() { return GetToken(SqlBaseParser.PROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentsContext propertyAssignments() {
			return GetRuleContext<PropertyAssignmentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SetTablePropertiesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTableProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			State = 1058;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				_localctx = new StatementDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				query();
				}
				break;
			case 2:
				_localctx = new UseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				Match(USE);
				State = 235;
				((UseContext)_localctx).schema = identifier();
				}
				break;
			case 3:
				_localctx = new UseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 236;
				Match(USE);
				State = 237;
				((UseContext)_localctx).catalog = identifier();
				State = 238;
				Match(T__0);
				State = 239;
				((UseContext)_localctx).schema = identifier();
				}
				break;
			case 4:
				_localctx = new CreateCatalogContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 241;
				Match(CREATE);
				State = 242;
				Match(CATALOG);
				State = 246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 243;
					Match(IF);
					State = 244;
					Match(NOT);
					State = 245;
					Match(EXISTS);
					}
					break;
				}
				State = 248;
				((CreateCatalogContext)_localctx).catalog = identifier();
				State = 249;
				Match(USING);
				State = 250;
				((CreateCatalogContext)_localctx).connectorName = identifier();
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 251;
					Match(COMMENT);
					State = 252;
					@string();
					}
				}

				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTHORIZATION) {
					{
					State = 255;
					Match(AUTHORIZATION);
					State = 256;
					principal();
					}
				}

				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 259;
					Match(WITH);
					State = 260;
					properties();
					}
				}

				}
				break;
			case 5:
				_localctx = new DropCatalogContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 263;
				Match(DROP);
				State = 264;
				Match(CATALOG);
				State = 267;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 265;
					Match(IF);
					State = 266;
					Match(EXISTS);
					}
					break;
				}
				State = 269;
				((DropCatalogContext)_localctx).catalog = identifier();
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 270;
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case 6:
				_localctx = new CreateSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 273;
				Match(CREATE);
				State = 274;
				Match(SCHEMA);
				State = 278;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 275;
					Match(IF);
					State = 276;
					Match(NOT);
					State = 277;
					Match(EXISTS);
					}
					break;
				}
				State = 280;
				qualifiedName();
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTHORIZATION) {
					{
					State = 281;
					Match(AUTHORIZATION);
					State = 282;
					principal();
					}
				}

				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 285;
					Match(WITH);
					State = 286;
					properties();
					}
				}

				}
				break;
			case 7:
				_localctx = new DropSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 289;
				Match(DROP);
				State = 290;
				Match(SCHEMA);
				State = 293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 291;
					Match(IF);
					State = 292;
					Match(EXISTS);
					}
					break;
				}
				State = 295;
				qualifiedName();
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 296;
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case 8:
				_localctx = new RenameSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 299;
				Match(ALTER);
				State = 300;
				Match(SCHEMA);
				State = 301;
				qualifiedName();
				State = 302;
				Match(RENAME);
				State = 303;
				Match(TO);
				State = 304;
				identifier();
				}
				break;
			case 9:
				_localctx = new SetSchemaAuthorizationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 306;
				Match(ALTER);
				State = 307;
				Match(SCHEMA);
				State = 308;
				qualifiedName();
				State = 309;
				Match(SET);
				State = 310;
				Match(AUTHORIZATION);
				State = 311;
				principal();
				}
				break;
			case 10:
				_localctx = new CreateTableAsSelectContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 313;
				Match(CREATE);
				State = 314;
				Match(TABLE);
				State = 318;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 315;
					Match(IF);
					State = 316;
					Match(NOT);
					State = 317;
					Match(EXISTS);
					}
					break;
				}
				State = 320;
				qualifiedName();
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 321;
					columnAliases();
					}
				}

				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 324;
					Match(COMMENT);
					State = 325;
					@string();
					}
				}

				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 328;
					Match(WITH);
					State = 329;
					properties();
					}
				}

				State = 332;
				Match(AS);
				State = 338;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 333;
					query();
					}
					break;
				case 2:
					{
					State = 334;
					Match(T__1);
					State = 335;
					query();
					State = 336;
					Match(T__2);
					}
					break;
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 340;
					Match(WITH);
					State = 342;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO) {
						{
						State = 341;
						Match(NO);
						}
					}

					State = 344;
					Match(DATA);
					}
				}

				}
				break;
			case 11:
				_localctx = new CreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 347;
				Match(CREATE);
				State = 348;
				Match(TABLE);
				State = 352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 349;
					Match(IF);
					State = 350;
					Match(NOT);
					State = 351;
					Match(EXISTS);
					}
					break;
				}
				State = 354;
				qualifiedName();
				State = 355;
				Match(T__1);
				State = 356;
				tableElement();
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 357;
					Match(T__3);
					State = 358;
					tableElement();
					}
					}
					State = 363;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 364;
				Match(T__2);
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 365;
					Match(COMMENT);
					State = 366;
					@string();
					}
				}

				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 369;
					Match(WITH);
					State = 370;
					properties();
					}
				}

				}
				break;
			case 12:
				_localctx = new DropTableContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 373;
				Match(DROP);
				State = 374;
				Match(TABLE);
				State = 377;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 375;
					Match(IF);
					State = 376;
					Match(EXISTS);
					}
					break;
				}
				State = 379;
				qualifiedName();
				}
				break;
			case 13:
				_localctx = new InsertIntoContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 380;
				Match(INSERT);
				State = 381;
				Match(INTO);
				State = 382;
				qualifiedName();
				State = 384;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 383;
					columnAliases();
					}
					break;
				}
				State = 386;
				query();
				}
				break;
			case 14:
				_localctx = new DeleteContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 388;
				Match(DELETE);
				State = 389;
				Match(FROM);
				State = 390;
				qualifiedName();
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 391;
					Match(WHERE);
					State = 392;
					booleanExpression(0);
					}
				}

				}
				break;
			case 15:
				_localctx = new TruncateTableContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 395;
				Match(TRUNCATE);
				State = 396;
				Match(TABLE);
				State = 397;
				qualifiedName();
				}
				break;
			case 16:
				_localctx = new CommentTableContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 398;
				Match(COMMENT);
				State = 399;
				Match(ON);
				State = 400;
				Match(TABLE);
				State = 401;
				qualifiedName();
				State = 402;
				Match(IS);
				State = 405;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case UNICODE_STRING:
					{
					State = 403;
					@string();
					}
					break;
				case NULL:
					{
					State = 404;
					Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 17:
				_localctx = new CommentViewContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 407;
				Match(COMMENT);
				State = 408;
				Match(ON);
				State = 409;
				Match(VIEW);
				State = 410;
				qualifiedName();
				State = 411;
				Match(IS);
				State = 414;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case UNICODE_STRING:
					{
					State = 412;
					@string();
					}
					break;
				case NULL:
					{
					State = 413;
					Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 18:
				_localctx = new CommentColumnContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 416;
				Match(COMMENT);
				State = 417;
				Match(ON);
				State = 418;
				Match(COLUMN);
				State = 419;
				qualifiedName();
				State = 420;
				Match(IS);
				State = 423;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case UNICODE_STRING:
					{
					State = 421;
					@string();
					}
					break;
				case NULL:
					{
					State = 422;
					Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 19:
				_localctx = new RenameTableContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 425;
				Match(ALTER);
				State = 426;
				Match(TABLE);
				State = 429;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 427;
					Match(IF);
					State = 428;
					Match(EXISTS);
					}
					break;
				}
				State = 431;
				((RenameTableContext)_localctx).from = qualifiedName();
				State = 432;
				Match(RENAME);
				State = 433;
				Match(TO);
				State = 434;
				((RenameTableContext)_localctx).to = qualifiedName();
				}
				break;
			case 20:
				_localctx = new AddColumnContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 436;
				Match(ALTER);
				State = 437;
				Match(TABLE);
				State = 440;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 438;
					Match(IF);
					State = 439;
					Match(EXISTS);
					}
					break;
				}
				State = 442;
				((AddColumnContext)_localctx).tableName = qualifiedName();
				State = 443;
				Match(ADD);
				State = 444;
				Match(COLUMN);
				State = 448;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 445;
					Match(IF);
					State = 446;
					Match(NOT);
					State = 447;
					Match(EXISTS);
					}
					break;
				}
				State = 450;
				((AddColumnContext)_localctx).column = columnDefinition();
				}
				break;
			case 21:
				_localctx = new RenameColumnContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 452;
				Match(ALTER);
				State = 453;
				Match(TABLE);
				State = 456;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 454;
					Match(IF);
					State = 455;
					Match(EXISTS);
					}
					break;
				}
				State = 458;
				((RenameColumnContext)_localctx).tableName = qualifiedName();
				State = 459;
				Match(RENAME);
				State = 460;
				Match(COLUMN);
				State = 463;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 461;
					Match(IF);
					State = 462;
					Match(EXISTS);
					}
					break;
				}
				State = 465;
				((RenameColumnContext)_localctx).from = identifier();
				State = 466;
				Match(TO);
				State = 467;
				((RenameColumnContext)_localctx).to = identifier();
				}
				break;
			case 22:
				_localctx = new DropColumnContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 469;
				Match(ALTER);
				State = 470;
				Match(TABLE);
				State = 473;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 471;
					Match(IF);
					State = 472;
					Match(EXISTS);
					}
					break;
				}
				State = 475;
				((DropColumnContext)_localctx).tableName = qualifiedName();
				State = 476;
				Match(DROP);
				State = 477;
				Match(COLUMN);
				State = 480;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 478;
					Match(IF);
					State = 479;
					Match(EXISTS);
					}
					break;
				}
				State = 482;
				((DropColumnContext)_localctx).column = qualifiedName();
				}
				break;
			case 23:
				_localctx = new SetColumnTypeContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 484;
				Match(ALTER);
				State = 485;
				Match(TABLE);
				State = 488;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 486;
					Match(IF);
					State = 487;
					Match(EXISTS);
					}
					break;
				}
				State = 490;
				((SetColumnTypeContext)_localctx).tableName = qualifiedName();
				State = 491;
				Match(ALTER);
				State = 492;
				Match(COLUMN);
				State = 493;
				((SetColumnTypeContext)_localctx).columnName = identifier();
				State = 494;
				Match(SET);
				State = 495;
				Match(DATA);
				State = 496;
				Match(TYPE);
				State = 497;
				type(0);
				}
				break;
			case 24:
				_localctx = new SetTableAuthorizationContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 499;
				Match(ALTER);
				State = 500;
				Match(TABLE);
				State = 501;
				((SetTableAuthorizationContext)_localctx).tableName = qualifiedName();
				State = 502;
				Match(SET);
				State = 503;
				Match(AUTHORIZATION);
				State = 504;
				principal();
				}
				break;
			case 25:
				_localctx = new SetTablePropertiesContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 506;
				Match(ALTER);
				State = 507;
				Match(TABLE);
				State = 508;
				((SetTablePropertiesContext)_localctx).tableName = qualifiedName();
				State = 509;
				Match(SET);
				State = 510;
				Match(PROPERTIES);
				State = 511;
				propertyAssignments();
				}
				break;
			case 26:
				_localctx = new TableExecuteContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 513;
				Match(ALTER);
				State = 514;
				Match(TABLE);
				State = 515;
				((TableExecuteContext)_localctx).tableName = qualifiedName();
				State = 516;
				Match(EXECUTE);
				State = 517;
				((TableExecuteContext)_localctx).procedureName = identifier();
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 518;
					Match(T__1);
					State = 527;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_SCHEMA) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (JSON_ARRAY - 128)) | (1L << (JSON_EXISTS - 128)) | (1L << (JSON_OBJECT - 128)) | (1L << (JSON_QUERY - 128)) | (1L << (JSON_VALUE - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LISTAGG - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NORMALIZE - 128)) | (1L << (NOT - 128)) | (1L << (NULL - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)) | (1L << (TRIM - 192)) | (1L << (TRUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (PLUS - 256)) | (1L << (MINUS - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (STRING - 256)) | (1L << (UNICODE_STRING - 256)) | (1L << (BINARY_LITERAL - 256)) | (1L << (INTEGER_VALUE - 256)) | (1L << (DECIMAL_VALUE - 256)) | (1L << (DOUBLE_VALUE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
						{
						State = 519;
						callArgument();
						State = 524;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__3) {
							{
							{
							State = 520;
							Match(T__3);
							State = 521;
							callArgument();
							}
							}
							State = 526;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 529;
					Match(T__2);
					}
				}

				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 532;
					Match(WHERE);
					State = 533;
					((TableExecuteContext)_localctx).where = booleanExpression(0);
					}
				}

				}
				break;
			case 27:
				_localctx = new AnalyzeContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 536;
				Match(ANALYZE);
				State = 537;
				qualifiedName();
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 538;
					Match(WITH);
					State = 539;
					properties();
					}
				}

				}
				break;
			case 28:
				_localctx = new CreateMaterializedViewContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 542;
				Match(CREATE);
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 543;
					Match(OR);
					State = 544;
					Match(REPLACE);
					}
				}

				State = 547;
				Match(MATERIALIZED);
				State = 548;
				Match(VIEW);
				State = 552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 549;
					Match(IF);
					State = 550;
					Match(NOT);
					State = 551;
					Match(EXISTS);
					}
					break;
				}
				State = 554;
				qualifiedName();
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GRACE) {
					{
					State = 555;
					Match(GRACE);
					State = 556;
					Match(PERIOD);
					State = 557;
					interval();
					}
				}

				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 560;
					Match(COMMENT);
					State = 561;
					@string();
					}
				}

				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 564;
					Match(WITH);
					State = 565;
					properties();
					}
				}

				State = 568;
				Match(AS);
				State = 569;
				query();
				}
				break;
			case 29:
				_localctx = new CreateViewContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 571;
				Match(CREATE);
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 572;
					Match(OR);
					State = 573;
					Match(REPLACE);
					}
				}

				State = 576;
				Match(VIEW);
				State = 577;
				qualifiedName();
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 578;
					Match(COMMENT);
					State = 579;
					@string();
					}
				}

				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SECURITY) {
					{
					State = 582;
					Match(SECURITY);
					State = 583;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFINER || _la==INVOKER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 586;
				Match(AS);
				State = 587;
				query();
				}
				break;
			case 30:
				_localctx = new RefreshMaterializedViewContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 589;
				Match(REFRESH);
				State = 590;
				Match(MATERIALIZED);
				State = 591;
				Match(VIEW);
				State = 592;
				qualifiedName();
				}
				break;
			case 31:
				_localctx = new DropMaterializedViewContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 593;
				Match(DROP);
				State = 594;
				Match(MATERIALIZED);
				State = 595;
				Match(VIEW);
				State = 598;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 596;
					Match(IF);
					State = 597;
					Match(EXISTS);
					}
					break;
				}
				State = 600;
				qualifiedName();
				}
				break;
			case 32:
				_localctx = new RenameMaterializedViewContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 601;
				Match(ALTER);
				State = 602;
				Match(MATERIALIZED);
				State = 603;
				Match(VIEW);
				State = 606;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 604;
					Match(IF);
					State = 605;
					Match(EXISTS);
					}
					break;
				}
				State = 608;
				((RenameMaterializedViewContext)_localctx).from = qualifiedName();
				State = 609;
				Match(RENAME);
				State = 610;
				Match(TO);
				State = 611;
				((RenameMaterializedViewContext)_localctx).to = qualifiedName();
				}
				break;
			case 33:
				_localctx = new SetMaterializedViewPropertiesContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 613;
				Match(ALTER);
				State = 614;
				Match(MATERIALIZED);
				State = 615;
				Match(VIEW);
				State = 616;
				qualifiedName();
				State = 617;
				Match(SET);
				State = 618;
				Match(PROPERTIES);
				State = 619;
				propertyAssignments();
				}
				break;
			case 34:
				_localctx = new DropViewContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 621;
				Match(DROP);
				State = 622;
				Match(VIEW);
				State = 625;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 623;
					Match(IF);
					State = 624;
					Match(EXISTS);
					}
					break;
				}
				State = 627;
				qualifiedName();
				}
				break;
			case 35:
				_localctx = new RenameViewContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 628;
				Match(ALTER);
				State = 629;
				Match(VIEW);
				State = 630;
				((RenameViewContext)_localctx).from = qualifiedName();
				State = 631;
				Match(RENAME);
				State = 632;
				Match(TO);
				State = 633;
				((RenameViewContext)_localctx).to = qualifiedName();
				}
				break;
			case 36:
				_localctx = new SetViewAuthorizationContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 635;
				Match(ALTER);
				State = 636;
				Match(VIEW);
				State = 637;
				((SetViewAuthorizationContext)_localctx).from = qualifiedName();
				State = 638;
				Match(SET);
				State = 639;
				Match(AUTHORIZATION);
				State = 640;
				principal();
				}
				break;
			case 37:
				_localctx = new CallContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 642;
				Match(CALL);
				State = 643;
				qualifiedName();
				State = 644;
				Match(T__1);
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_SCHEMA) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (JSON_ARRAY - 128)) | (1L << (JSON_EXISTS - 128)) | (1L << (JSON_OBJECT - 128)) | (1L << (JSON_QUERY - 128)) | (1L << (JSON_VALUE - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LISTAGG - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NORMALIZE - 128)) | (1L << (NOT - 128)) | (1L << (NULL - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)) | (1L << (TRIM - 192)) | (1L << (TRUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (PLUS - 256)) | (1L << (MINUS - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (STRING - 256)) | (1L << (UNICODE_STRING - 256)) | (1L << (BINARY_LITERAL - 256)) | (1L << (INTEGER_VALUE - 256)) | (1L << (DECIMAL_VALUE - 256)) | (1L << (DOUBLE_VALUE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 645;
					callArgument();
					State = 650;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 646;
						Match(T__3);
						State = 647;
						callArgument();
						}
						}
						State = 652;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 655;
				Match(T__2);
				}
				break;
			case 38:
				_localctx = new CreateRoleContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 657;
				Match(CREATE);
				State = 658;
				Match(ROLE);
				State = 659;
				((CreateRoleContext)_localctx).name = identifier();
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 660;
					Match(WITH);
					State = 661;
					Match(ADMIN);
					State = 662;
					grantor();
					}
				}

				State = 667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 665;
					Match(IN);
					State = 666;
					((CreateRoleContext)_localctx).catalog = identifier();
					}
				}

				}
				break;
			case 39:
				_localctx = new DropRoleContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 669;
				Match(DROP);
				State = 670;
				Match(ROLE);
				State = 671;
				((DropRoleContext)_localctx).name = identifier();
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 672;
					Match(IN);
					State = 673;
					((DropRoleContext)_localctx).catalog = identifier();
					}
				}

				}
				break;
			case 40:
				_localctx = new GrantRolesContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 676;
				Match(GRANT);
				State = 677;
				roles();
				State = 678;
				Match(TO);
				State = 679;
				principal();
				State = 684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 680;
					Match(T__3);
					State = 681;
					principal();
					}
					}
					State = 686;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 687;
					Match(WITH);
					State = 688;
					Match(ADMIN);
					State = 689;
					Match(OPTION);
					}
				}

				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GRANTED) {
					{
					State = 692;
					Match(GRANTED);
					State = 693;
					Match(BY);
					State = 694;
					grantor();
					}
				}

				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 697;
					Match(IN);
					State = 698;
					((GrantRolesContext)_localctx).catalog = identifier();
					}
				}

				}
				break;
			case 41:
				_localctx = new RevokeRolesContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 701;
				Match(REVOKE);
				State = 705;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 702;
					Match(ADMIN);
					State = 703;
					Match(OPTION);
					State = 704;
					Match(FOR);
					}
					break;
				}
				State = 707;
				roles();
				State = 708;
				Match(FROM);
				State = 709;
				principal();
				State = 714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 710;
					Match(T__3);
					State = 711;
					principal();
					}
					}
					State = 716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GRANTED) {
					{
					State = 717;
					Match(GRANTED);
					State = 718;
					Match(BY);
					State = 719;
					grantor();
					}
				}

				State = 724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 722;
					Match(IN);
					State = 723;
					((RevokeRolesContext)_localctx).catalog = identifier();
					}
				}

				}
				break;
			case 42:
				_localctx = new SetRoleContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 726;
				Match(SET);
				State = 727;
				Match(ROLE);
				State = 731;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 728;
					Match(ALL);
					}
					break;
				case 2:
					{
					State = 729;
					Match(NONE);
					}
					break;
				case 3:
					{
					State = 730;
					((SetRoleContext)_localctx).role = identifier();
					}
					break;
				}
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 733;
					Match(IN);
					State = 734;
					((SetRoleContext)_localctx).catalog = identifier();
					}
				}

				}
				break;
			case 43:
				_localctx = new GrantContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 737;
				Match(GRANT);
				State = 748;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CREATE:
				case DELETE:
				case INSERT:
				case SELECT:
				case UPDATE:
					{
					State = 738;
					privilege();
					State = 743;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 739;
						Match(T__3);
						State = 740;
						privilege();
						}
						}
						State = 745;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case ALL:
					{
					State = 746;
					Match(ALL);
					State = 747;
					Match(PRIVILEGES);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 750;
				Match(ON);
				State = 752;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 751;
					_la = TokenStream.LA(1);
					if ( !(_la==SCHEMA || _la==TABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 754;
				qualifiedName();
				State = 755;
				Match(TO);
				State = 756;
				((GrantContext)_localctx).grantee = principal();
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 757;
					Match(WITH);
					State = 758;
					Match(GRANT);
					State = 759;
					Match(OPTION);
					}
				}

				}
				break;
			case 44:
				_localctx = new DenyContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 762;
				Match(DENY);
				State = 773;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CREATE:
				case DELETE:
				case INSERT:
				case SELECT:
				case UPDATE:
					{
					State = 763;
					privilege();
					State = 768;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 764;
						Match(T__3);
						State = 765;
						privilege();
						}
						}
						State = 770;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case ALL:
					{
					State = 771;
					Match(ALL);
					State = 772;
					Match(PRIVILEGES);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 775;
				Match(ON);
				State = 777;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 776;
					_la = TokenStream.LA(1);
					if ( !(_la==SCHEMA || _la==TABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 779;
				qualifiedName();
				State = 780;
				Match(TO);
				State = 781;
				((DenyContext)_localctx).grantee = principal();
				}
				break;
			case 45:
				_localctx = new RevokeContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 783;
				Match(REVOKE);
				State = 787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GRANT) {
					{
					State = 784;
					Match(GRANT);
					State = 785;
					Match(OPTION);
					State = 786;
					Match(FOR);
					}
				}

				State = 799;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CREATE:
				case DELETE:
				case INSERT:
				case SELECT:
				case UPDATE:
					{
					State = 789;
					privilege();
					State = 794;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 790;
						Match(T__3);
						State = 791;
						privilege();
						}
						}
						State = 796;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case ALL:
					{
					State = 797;
					Match(ALL);
					State = 798;
					Match(PRIVILEGES);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 801;
				Match(ON);
				State = 803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 802;
					_la = TokenStream.LA(1);
					if ( !(_la==SCHEMA || _la==TABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 805;
				qualifiedName();
				State = 806;
				Match(FROM);
				State = 807;
				((RevokeContext)_localctx).grantee = principal();
				}
				break;
			case 46:
				_localctx = new ShowGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 809;
				Match(SHOW);
				State = 810;
				Match(GRANTS);
				State = 816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 811;
					Match(ON);
					State = 813;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TABLE) {
						{
						State = 812;
						Match(TABLE);
						}
					}

					State = 815;
					qualifiedName();
					}
				}

				}
				break;
			case 47:
				_localctx = new ExplainContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 818;
				Match(EXPLAIN);
				State = 830;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 819;
					Match(T__1);
					State = 820;
					explainOption();
					State = 825;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 821;
						Match(T__3);
						State = 822;
						explainOption();
						}
						}
						State = 827;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 828;
					Match(T__2);
					}
					break;
				}
				State = 832;
				statement();
				}
				break;
			case 48:
				_localctx = new ExplainAnalyzeContext(_localctx);
				EnterOuterAlt(_localctx, 48);
				{
				State = 833;
				Match(EXPLAIN);
				State = 834;
				Match(ANALYZE);
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERBOSE) {
					{
					State = 835;
					Match(VERBOSE);
					}
				}

				State = 838;
				statement();
				}
				break;
			case 49:
				_localctx = new ShowCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 49);
				{
				State = 839;
				Match(SHOW);
				State = 840;
				Match(CREATE);
				State = 841;
				Match(TABLE);
				State = 842;
				qualifiedName();
				}
				break;
			case 50:
				_localctx = new ShowCreateSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 50);
				{
				State = 843;
				Match(SHOW);
				State = 844;
				Match(CREATE);
				State = 845;
				Match(SCHEMA);
				State = 846;
				qualifiedName();
				}
				break;
			case 51:
				_localctx = new ShowCreateViewContext(_localctx);
				EnterOuterAlt(_localctx, 51);
				{
				State = 847;
				Match(SHOW);
				State = 848;
				Match(CREATE);
				State = 849;
				Match(VIEW);
				State = 850;
				qualifiedName();
				}
				break;
			case 52:
				_localctx = new ShowCreateMaterializedViewContext(_localctx);
				EnterOuterAlt(_localctx, 52);
				{
				State = 851;
				Match(SHOW);
				State = 852;
				Match(CREATE);
				State = 853;
				Match(MATERIALIZED);
				State = 854;
				Match(VIEW);
				State = 855;
				qualifiedName();
				}
				break;
			case 53:
				_localctx = new ShowTablesContext(_localctx);
				EnterOuterAlt(_localctx, 53);
				{
				State = 856;
				Match(SHOW);
				State = 857;
				Match(TABLES);
				State = 860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 858;
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 859;
					qualifiedName();
					}
				}

				State = 868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 862;
					Match(LIKE);
					State = 863;
					((ShowTablesContext)_localctx).pattern = @string();
					State = 866;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ESCAPE) {
						{
						State = 864;
						Match(ESCAPE);
						State = 865;
						((ShowTablesContext)_localctx).escape = @string();
						}
					}

					}
				}

				}
				break;
			case 54:
				_localctx = new ShowSchemasContext(_localctx);
				EnterOuterAlt(_localctx, 54);
				{
				State = 870;
				Match(SHOW);
				State = 871;
				Match(SCHEMAS);
				State = 874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 872;
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 873;
					identifier();
					}
				}

				State = 882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 876;
					Match(LIKE);
					State = 877;
					((ShowSchemasContext)_localctx).pattern = @string();
					State = 880;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ESCAPE) {
						{
						State = 878;
						Match(ESCAPE);
						State = 879;
						((ShowSchemasContext)_localctx).escape = @string();
						}
					}

					}
				}

				}
				break;
			case 55:
				_localctx = new ShowCatalogsContext(_localctx);
				EnterOuterAlt(_localctx, 55);
				{
				State = 884;
				Match(SHOW);
				State = 885;
				Match(CATALOGS);
				State = 892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 886;
					Match(LIKE);
					State = 887;
					((ShowCatalogsContext)_localctx).pattern = @string();
					State = 890;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ESCAPE) {
						{
						State = 888;
						Match(ESCAPE);
						State = 889;
						((ShowCatalogsContext)_localctx).escape = @string();
						}
					}

					}
				}

				}
				break;
			case 56:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 56);
				{
				State = 894;
				Match(SHOW);
				State = 895;
				Match(COLUMNS);
				State = 896;
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 897;
					qualifiedName();
					}
				}

				State = 906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 900;
					Match(LIKE);
					State = 901;
					((ShowColumnsContext)_localctx).pattern = @string();
					State = 904;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ESCAPE) {
						{
						State = 902;
						Match(ESCAPE);
						State = 903;
						((ShowColumnsContext)_localctx).escape = @string();
						}
					}

					}
				}

				}
				break;
			case 57:
				_localctx = new ShowStatsContext(_localctx);
				EnterOuterAlt(_localctx, 57);
				{
				State = 908;
				Match(SHOW);
				State = 909;
				Match(STATS);
				State = 910;
				Match(FOR);
				State = 911;
				qualifiedName();
				}
				break;
			case 58:
				_localctx = new ShowStatsForQueryContext(_localctx);
				EnterOuterAlt(_localctx, 58);
				{
				State = 912;
				Match(SHOW);
				State = 913;
				Match(STATS);
				State = 914;
				Match(FOR);
				State = 915;
				Match(T__1);
				State = 916;
				query();
				State = 917;
				Match(T__2);
				}
				break;
			case 59:
				_localctx = new ShowRolesContext(_localctx);
				EnterOuterAlt(_localctx, 59);
				{
				State = 919;
				Match(SHOW);
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CURRENT) {
					{
					State = 920;
					Match(CURRENT);
					}
				}

				State = 923;
				Match(ROLES);
				State = 926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 924;
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 925;
					identifier();
					}
				}

				}
				break;
			case 60:
				_localctx = new ShowRoleGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 60);
				{
				State = 928;
				Match(SHOW);
				State = 929;
				Match(ROLE);
				State = 930;
				Match(GRANTS);
				State = 933;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 931;
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 932;
					identifier();
					}
				}

				}
				break;
			case 61:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 61);
				{
				State = 935;
				Match(DESCRIBE);
				State = 936;
				qualifiedName();
				}
				break;
			case 62:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 62);
				{
				State = 937;
				Match(DESC);
				State = 938;
				qualifiedName();
				}
				break;
			case 63:
				_localctx = new ShowFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 63);
				{
				State = 939;
				Match(SHOW);
				State = 940;
				Match(FUNCTIONS);
				State = 947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 941;
					Match(LIKE);
					State = 942;
					((ShowFunctionsContext)_localctx).pattern = @string();
					State = 945;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ESCAPE) {
						{
						State = 943;
						Match(ESCAPE);
						State = 944;
						((ShowFunctionsContext)_localctx).escape = @string();
						}
					}

					}
				}

				}
				break;
			case 64:
				_localctx = new ShowSessionContext(_localctx);
				EnterOuterAlt(_localctx, 64);
				{
				State = 949;
				Match(SHOW);
				State = 950;
				Match(SESSION);
				State = 957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 951;
					Match(LIKE);
					State = 952;
					((ShowSessionContext)_localctx).pattern = @string();
					State = 955;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ESCAPE) {
						{
						State = 953;
						Match(ESCAPE);
						State = 954;
						((ShowSessionContext)_localctx).escape = @string();
						}
					}

					}
				}

				}
				break;
			case 65:
				_localctx = new SetSessionContext(_localctx);
				EnterOuterAlt(_localctx, 65);
				{
				State = 959;
				Match(SET);
				State = 960;
				Match(SESSION);
				State = 961;
				qualifiedName();
				State = 962;
				Match(EQ);
				State = 963;
				expression();
				}
				break;
			case 66:
				_localctx = new ResetSessionContext(_localctx);
				EnterOuterAlt(_localctx, 66);
				{
				State = 965;
				Match(RESET);
				State = 966;
				Match(SESSION);
				State = 967;
				qualifiedName();
				}
				break;
			case 67:
				_localctx = new StartTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 67);
				{
				State = 968;
				Match(START);
				State = 969;
				Match(TRANSACTION);
				State = 978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ISOLATION || _la==READ) {
					{
					State = 970;
					transactionMode();
					State = 975;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 971;
						Match(T__3);
						State = 972;
						transactionMode();
						}
						}
						State = 977;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case 68:
				_localctx = new CommitContext(_localctx);
				EnterOuterAlt(_localctx, 68);
				{
				State = 980;
				Match(COMMIT);
				State = 982;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK) {
					{
					State = 981;
					Match(WORK);
					}
				}

				}
				break;
			case 69:
				_localctx = new RollbackContext(_localctx);
				EnterOuterAlt(_localctx, 69);
				{
				State = 984;
				Match(ROLLBACK);
				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK) {
					{
					State = 985;
					Match(WORK);
					}
				}

				}
				break;
			case 70:
				_localctx = new PrepareContext(_localctx);
				EnterOuterAlt(_localctx, 70);
				{
				State = 988;
				Match(PREPARE);
				State = 989;
				identifier();
				State = 990;
				Match(FROM);
				State = 991;
				statement();
				}
				break;
			case 71:
				_localctx = new DeallocateContext(_localctx);
				EnterOuterAlt(_localctx, 71);
				{
				State = 993;
				Match(DEALLOCATE);
				State = 994;
				Match(PREPARE);
				State = 995;
				identifier();
				}
				break;
			case 72:
				_localctx = new ExecuteContext(_localctx);
				EnterOuterAlt(_localctx, 72);
				{
				State = 996;
				Match(EXECUTE);
				State = 997;
				identifier();
				State = 1007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 998;
					Match(USING);
					State = 999;
					expression();
					State = 1004;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1000;
						Match(T__3);
						State = 1001;
						expression();
						}
						}
						State = 1006;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case 73:
				_localctx = new DescribeInputContext(_localctx);
				EnterOuterAlt(_localctx, 73);
				{
				State = 1009;
				Match(DESCRIBE);
				State = 1010;
				Match(INPUT);
				State = 1011;
				identifier();
				}
				break;
			case 74:
				_localctx = new DescribeOutputContext(_localctx);
				EnterOuterAlt(_localctx, 74);
				{
				State = 1012;
				Match(DESCRIBE);
				State = 1013;
				Match(OUTPUT);
				State = 1014;
				identifier();
				}
				break;
			case 75:
				_localctx = new SetPathContext(_localctx);
				EnterOuterAlt(_localctx, 75);
				{
				State = 1015;
				Match(SET);
				State = 1016;
				Match(PATH);
				State = 1017;
				pathSpecification();
				}
				break;
			case 76:
				_localctx = new SetTimeZoneContext(_localctx);
				EnterOuterAlt(_localctx, 76);
				{
				State = 1018;
				Match(SET);
				State = 1019;
				Match(TIME);
				State = 1020;
				Match(ZONE);
				State = 1023;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 1021;
					Match(LOCAL);
					}
					break;
				case 2:
					{
					State = 1022;
					expression();
					}
					break;
				}
				}
				break;
			case 77:
				_localctx = new UpdateContext(_localctx);
				EnterOuterAlt(_localctx, 77);
				{
				State = 1025;
				Match(UPDATE);
				State = 1026;
				qualifiedName();
				State = 1027;
				Match(SET);
				State = 1028;
				updateAssignment();
				State = 1033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1029;
					Match(T__3);
					State = 1030;
					updateAssignment();
					}
					}
					State = 1035;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 1036;
					Match(WHERE);
					State = 1037;
					((UpdateContext)_localctx).where = booleanExpression(0);
					}
				}

				}
				break;
			case 78:
				_localctx = new MergeContext(_localctx);
				EnterOuterAlt(_localctx, 78);
				{
				State = 1040;
				Match(MERGE);
				State = 1041;
				Match(INTO);
				State = 1042;
				qualifiedName();
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 1044;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1043;
						Match(AS);
						}
					}

					State = 1046;
					identifier();
					}
				}

				State = 1049;
				Match(USING);
				State = 1050;
				relation(0);
				State = 1051;
				Match(ON);
				State = 1052;
				expression();
				State = 1054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1053;
					mergeCase();
					}
					}
					State = 1056;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryNoWithContext queryNoWith() {
			return GetRuleContext<QueryNoWithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithContext with() {
			return GetRuleContext<WithContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 12, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1060;
				with();
				}
			}

			State = 1063;
			queryNoWith();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedQueryContext[] namedQuery() {
			return GetRuleContexts<NamedQueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedQueryContext namedQuery(int i) {
			return GetRuleContext<NamedQueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(SqlBaseParser.RECURSIVE, 0); }
		public WithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithContext with() {
		WithContext _localctx = new WithContext(Context, State);
		EnterRule(_localctx, 14, RULE_with);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			Match(WITH);
			State = 1067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RECURSIVE) {
				{
				State = 1066;
				Match(RECURSIVE);
				}
			}

			State = 1069;
			namedQuery();
			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 1070;
				Match(T__3);
				State = 1071;
				namedQuery();
				}
				}
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeClauseContext likeClause() {
			return GetRuleContext<LikeClauseContext>(0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableElementContext tableElement() {
		TableElementContext _localctx = new TableElementContext(Context, State);
		EnterRule(_localctx, 16, RULE_tableElement);
		try {
			State = 1079;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSENT:
			case ADD:
			case ADMIN:
			case AFTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case AUTHORIZATION:
			case BERNOULLI:
			case BOTH:
			case CALL:
			case CASCADE:
			case CATALOG:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITIONAL:
			case COUNT:
			case COPARTITION:
			case CURRENT:
			case DATA:
			case DATE:
			case DAY:
			case DEFAULT:
			case DEFINE:
			case DEFINER:
			case DENY:
			case DESC:
			case DESCRIPTOR:
			case DISTRIBUTED:
			case DOUBLE:
			case EMPTY:
			case ENCODING:
			case ERROR:
			case EXCLUDING:
			case EXPLAIN:
			case FETCH:
			case FILTER:
			case FINAL:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTIONS:
			case GRACE:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case GROUPS:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INITIAL:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case KEEP:
			case KEY:
			case KEYS:
			case LAST:
			case LATERAL:
			case LEADING:
			case LEVEL:
			case LIMIT:
			case LOCAL:
			case LOGICAL:
			case MAP:
			case MATCH:
			case MATCHED:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MEASURES:
			case MERGE:
			case MINUTE:
			case MONTH:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case OVERFLOW:
			case PARTITION:
			case PARTITIONS:
			case PASSING:
			case PAST:
			case PATH:
			case PATTERN:
			case PER:
			case PERIOD:
			case PERMUTE:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PRIVILEGES:
			case PROPERTIES:
			case PRUNE:
			case QUOTES:
			case RANGE:
			case READ:
			case REFRESH:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURNING:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RUNNING:
			case SCALAR:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SEEK:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSET:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TEXT_STRING:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TRANSACTION:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case USE:
			case USER:
			case UTF16:
			case UTF32:
			case UTF8:
			case VALIDATE:
			case VALUE:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WINDOW:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case YEAR:
			case ZONE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1077;
				columnDefinition();
				}
				break;
			case LIKE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1078;
				likeClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_columnDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081;
			identifier();
			State = 1082;
			type(0);
			State = 1085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1083;
				Match(NOT);
				State = 1084;
				Match(NULL);
				}
			}

			State = 1089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 1087;
				Match(COMMENT);
				State = 1088;
				@string();
				}
			}

			State = 1093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1091;
				Match(WITH);
				State = 1092;
				properties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeClauseContext : ParserRuleContext {
		public IToken optionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTIES() { return GetToken(SqlBaseParser.PROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(SqlBaseParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(SqlBaseParser.EXCLUDING, 0); }
		public LikeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeClauseContext likeClause() {
		LikeClauseContext _localctx = new LikeClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_likeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1095;
			Match(LIKE);
			State = 1096;
			qualifiedName();
			State = 1099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDING || _la==INCLUDING) {
				{
				State = 1097;
				_localctx.optionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
					_localctx.optionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1098;
				Match(PROPERTIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentsContext propertyAssignments() {
			return GetRuleContext<PropertyAssignmentsContext>(0);
		}
		public PropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_properties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesContext properties() {
		PropertiesContext _localctx = new PropertiesContext(Context, State);
		EnterRule(_localctx, 22, RULE_properties);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101;
			Match(T__1);
			State = 1102;
			propertyAssignments();
			State = 1103;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public PropertyAssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAssignments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentsContext propertyAssignments() {
		PropertyAssignmentsContext _localctx = new PropertyAssignmentsContext(Context, State);
		EnterRule(_localctx, 24, RULE_propertyAssignments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			property();
			State = 1110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 1106;
				Match(T__3);
				State = 1107;
				property();
				}
				}
				State = 1112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SqlBaseParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyValueContext propertyValue() {
			return GetRuleContext<PropertyValueContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 26, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			identifier();
			State = 1114;
			Match(EQ);
			State = 1115;
			propertyValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyValueContext : ParserRuleContext {
		public PropertyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyValue; } }
	 
		public PropertyValueContext() { }
		public virtual void CopyFrom(PropertyValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefaultPropertyValueContext : PropertyValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SqlBaseParser.DEFAULT, 0); }
		public DefaultPropertyValueContext(PropertyValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultPropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonDefaultPropertyValueContext : PropertyValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NonDefaultPropertyValueContext(PropertyValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonDefaultPropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyValueContext propertyValue() {
		PropertyValueContext _localctx = new PropertyValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_propertyValue);
		try {
			State = 1119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				_localctx = new DefaultPropertyValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1117;
				Match(DEFAULT);
				}
				break;
			case 2:
				_localctx = new NonDefaultPropertyValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1118;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryNoWithContext : ParserRuleContext {
		public RowCountContext offset;
		public LimitRowCountContext limit;
		public RowCountContext fetchFirst;
		[System.Diagnostics.DebuggerNonUserCode] public QueryTermContext queryTerm() {
			return GetRuleContext<QueryTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlBaseParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(SqlBaseParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowCountContext[] rowCount() {
			return GetRuleContexts<RowCountContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowCountContext rowCount(int i) {
			return GetRuleContext<RowCountContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(SqlBaseParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(SqlBaseParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitRowCountContext limitRowCount() {
			return GetRuleContext<LimitRowCountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(SqlBaseParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(SqlBaseParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROW() { return GetTokens(SqlBaseParser.ROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW(int i) {
			return GetToken(SqlBaseParser.ROW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROWS() { return GetTokens(SqlBaseParser.ROWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS(int i) {
			return GetToken(SqlBaseParser.ROWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(SqlBaseParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(SqlBaseParser.TIES, 0); }
		public QueryNoWithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryNoWith; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryNoWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryNoWithContext queryNoWith() {
		QueryNoWithContext _localctx = new QueryNoWithContext(Context, State);
		EnterRule(_localctx, 30, RULE_queryNoWith);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			queryTerm(0);
			State = 1132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 1122;
				Match(ORDER);
				State = 1123;
				Match(BY);
				State = 1124;
				sortItem();
				State = 1129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1125;
					Match(T__3);
					State = 1126;
					sortItem();
					}
					}
					State = 1131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFSET) {
				{
				State = 1134;
				Match(OFFSET);
				State = 1135;
				_localctx.offset = rowCount();
				State = 1137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROW || _la==ROWS) {
					{
					State = 1136;
					_la = TokenStream.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
			}

			State = 1154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				{
				{
				State = 1141;
				Match(LIMIT);
				State = 1142;
				_localctx.limit = limitRowCount();
				}
				}
				break;
			case FETCH:
				{
				{
				State = 1143;
				Match(FETCH);
				State = 1144;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==NEXT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION_MARK || _la==INTEGER_VALUE) {
					{
					State = 1145;
					_localctx.fetchFirst = rowCount();
					}
				}

				State = 1148;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1152;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ONLY:
					{
					State = 1149;
					Match(ONLY);
					}
					break;
				case WITH:
					{
					State = 1150;
					Match(WITH);
					State = 1151;
					Match(TIES);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case Eof:
			case T__2:
			case WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitRowCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowCountContext rowCount() {
			return GetRuleContext<RowCountContext>(0);
		}
		public LimitRowCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitRowCount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitRowCount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitRowCountContext limitRowCount() {
		LimitRowCountContext _localctx = new LimitRowCountContext(Context, State);
		EnterRule(_localctx, 32, RULE_limitRowCount);
		try {
			State = 1158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1156;
				Match(ALL);
				}
				break;
			case QUESTION_MARK:
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1157;
				rowCount();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(SqlBaseParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(SqlBaseParser.QUESTION_MARK, 0); }
		public RowCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowCount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowCount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowCountContext rowCount() {
		RowCountContext _localctx = new RowCountContext(Context, State);
		EnterRule(_localctx, 34, RULE_rowCount);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160;
			_la = TokenStream.LA(1);
			if ( !(_la==QUESTION_MARK || _la==INTEGER_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryTermContext : ParserRuleContext {
		public QueryTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryTerm; } }
	 
		public QueryTermContext() { }
		public virtual void CopyFrom(QueryTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QueryTermDefaultContext : QueryTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryPrimaryContext queryPrimary() {
			return GetRuleContext<QueryPrimaryContext>(0);
		}
		public QueryTermDefaultContext(QueryTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryTermDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetOperationContext : QueryTermContext {
		public QueryTermContext left;
		public IToken @operator;
		public QueryTermContext right;
		[System.Diagnostics.DebuggerNonUserCode] public QueryTermContext[] queryTerm() {
			return GetRuleContexts<QueryTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryTermContext queryTerm(int i) {
			return GetRuleContext<QueryTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(SqlBaseParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(SqlBaseParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(SqlBaseParser.EXCEPT, 0); }
		public SetOperationContext(QueryTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryTermContext queryTerm() {
		return queryTerm(0);
	}

	private QueryTermContext queryTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		QueryTermContext _localctx = new QueryTermContext(Context, _parentState);
		QueryTermContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_queryTerm, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QueryTermDefaultContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1163;
			queryPrimary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1179;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1177;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
					case 1:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						State = 1165;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1166;
						((SetOperationContext)_localctx).@operator = Match(INTERSECT);
						State = 1168;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 1167;
							setQuantifier();
							}
						}

						State = 1170;
						((SetOperationContext)_localctx).right = queryTerm(3);
						}
						break;
					case 2:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						State = 1171;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1172;
						((SetOperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EXCEPT || _la==UNION) ) {
							((SetOperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1174;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 1173;
							setQuantifier();
							}
						}

						State = 1176;
						((SetOperationContext)_localctx).right = queryTerm(2);
						}
						break;
					}
					} 
				}
				State = 1181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QueryPrimaryContext : ParserRuleContext {
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryPrimary; } }
	 
		public QueryPrimaryContext() { }
		public virtual void CopyFrom(QueryPrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryContext : QueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryNoWithContext queryNoWith() {
			return GetRuleContext<QueryNoWithContext>(0);
		}
		public SubqueryContext(QueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryPrimaryDefaultContext : QueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		public QueryPrimaryDefaultContext(QueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryPrimaryDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableContext : QueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TableContext(QueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineTableContext : QueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(SqlBaseParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InlineTableContext(QueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryPrimaryContext queryPrimary() {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(Context, State);
		EnterRule(_localctx, 38, RULE_queryPrimary);
		try {
			int _alt;
			State = 1198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				_localctx = new QueryPrimaryDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1182;
				querySpecification();
				}
				break;
			case TABLE:
				_localctx = new TableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1183;
				Match(TABLE);
				State = 1184;
				qualifiedName();
				}
				break;
			case VALUES:
				_localctx = new InlineTableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1185;
				Match(VALUES);
				State = 1186;
				expression();
				State = 1191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1187;
						Match(T__3);
						State = 1188;
						expression();
						}
						} 
					}
					State = 1193;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
				}
				}
				break;
			case T__1:
				_localctx = new SubqueryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1194;
				Match(T__1);
				State = 1195;
				queryNoWith();
				State = 1196;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortItemContext : ParserRuleContext {
		public IToken ordering;
		public IToken nullOrdering;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(SqlBaseParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(SqlBaseParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SqlBaseParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(SqlBaseParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(SqlBaseParser.LAST, 0); }
		public SortItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortItemContext sortItem() {
		SortItemContext _localctx = new SortItemContext(Context, State);
		EnterRule(_localctx, 40, RULE_sortItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			expression();
			State = 1202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 1201;
				_localctx.ordering = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.ordering = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS) {
				{
				State = 1204;
				Match(NULLS);
				State = 1205;
				_localctx.nullOrdering = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
					_localctx.nullOrdering = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		public BooleanExpressionContext where;
		public BooleanExpressionContext having;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(SqlBaseParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SqlBaseParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(SqlBaseParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByContext groupBy() {
			return GetRuleContext<GroupByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(SqlBaseParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(SqlBaseParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowDefinitionContext[] windowDefinition() {
			return GetRuleContexts<WindowDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowDefinitionContext windowDefinition(int i) {
			return GetRuleContext<WindowDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 42, RULE_querySpecification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208;
			Match(SELECT);
			State = 1210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 1209;
				setQuantifier();
				}
				break;
			}
			State = 1212;
			selectItem();
			State = 1217;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1213;
					Match(T__3);
					State = 1214;
					selectItem();
					}
					} 
				}
				State = 1219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			}
			State = 1229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 1220;
				Match(FROM);
				State = 1221;
				relation(0);
				State = 1226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1222;
						Match(T__3);
						State = 1223;
						relation(0);
						}
						} 
					}
					State = 1228;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				}
				}
				break;
			}
			State = 1233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1231;
				Match(WHERE);
				State = 1232;
				_localctx.where = booleanExpression(0);
				}
				break;
			}
			State = 1238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1235;
				Match(GROUP);
				State = 1236;
				Match(BY);
				State = 1237;
				groupBy();
				}
				break;
			}
			State = 1242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1240;
				Match(HAVING);
				State = 1241;
				_localctx.having = booleanExpression(0);
				}
				break;
			}
			State = 1253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 1244;
				Match(WINDOW);
				State = 1245;
				windowDefinition();
				State = 1250;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1246;
						Match(T__3);
						State = 1247;
						windowDefinition();
						}
						} 
					}
					State = 1252;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementContext[] groupingElement() {
			return GetRuleContexts<GroupingElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementContext groupingElement(int i) {
			return GetRuleContext<GroupingElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		public GroupByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByContext groupBy() {
		GroupByContext _localctx = new GroupByContext(Context, State);
		EnterRule(_localctx, 44, RULE_groupBy);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				{
				State = 1255;
				setQuantifier();
				}
				break;
			}
			State = 1258;
			groupingElement();
			State = 1263;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1259;
					Match(T__3);
					State = 1260;
					groupingElement();
					}
					} 
				}
				State = 1265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingElementContext : ParserRuleContext {
		public GroupingElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingElement; } }
	 
		public GroupingElementContext() { }
		public virtual void CopyFrom(GroupingElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultipleGroupingSetsContext : GroupingElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(SqlBaseParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(SqlBaseParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingSetContext[] groupingSet() {
			return GetRuleContexts<GroupingSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingSetContext groupingSet(int i) {
			return GetRuleContext<GroupingSetContext>(i);
		}
		public MultipleGroupingSetsContext(GroupingElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleGroupingSets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleGroupingSetContext : GroupingElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingSetContext groupingSet() {
			return GetRuleContext<GroupingSetContext>(0);
		}
		public SingleGroupingSetContext(GroupingElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleGroupingSet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CubeContext : GroupingElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(SqlBaseParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CubeContext(GroupingElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RollupContext : GroupingElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(SqlBaseParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RollupContext(GroupingElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingElementContext groupingElement() {
		GroupingElementContext _localctx = new GroupingElementContext(Context, State);
		EnterRule(_localctx, 46, RULE_groupingElement);
		int _la;
		try {
			State = 1306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				_localctx = new SingleGroupingSetContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1266;
				groupingSet();
				}
				break;
			case 2:
				_localctx = new RollupContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1267;
				Match(ROLLUP);
				State = 1268;
				Match(T__1);
				State = 1277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_SCHEMA) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (JSON_ARRAY - 128)) | (1L << (JSON_EXISTS - 128)) | (1L << (JSON_OBJECT - 128)) | (1L << (JSON_QUERY - 128)) | (1L << (JSON_VALUE - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LISTAGG - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NORMALIZE - 128)) | (1L << (NOT - 128)) | (1L << (NULL - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)) | (1L << (TRIM - 192)) | (1L << (TRUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (PLUS - 256)) | (1L << (MINUS - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (STRING - 256)) | (1L << (UNICODE_STRING - 256)) | (1L << (BINARY_LITERAL - 256)) | (1L << (INTEGER_VALUE - 256)) | (1L << (DECIMAL_VALUE - 256)) | (1L << (DOUBLE_VALUE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 1269;
					expression();
					State = 1274;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1270;
						Match(T__3);
						State = 1271;
						expression();
						}
						}
						State = 1276;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1279;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new CubeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1280;
				Match(CUBE);
				State = 1281;
				Match(T__1);
				State = 1290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_SCHEMA) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (JSON_ARRAY - 128)) | (1L << (JSON_EXISTS - 128)) | (1L << (JSON_OBJECT - 128)) | (1L << (JSON_QUERY - 128)) | (1L << (JSON_VALUE - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LISTAGG - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NORMALIZE - 128)) | (1L << (NOT - 128)) | (1L << (NULL - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)) | (1L << (TRIM - 192)) | (1L << (TRUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (PLUS - 256)) | (1L << (MINUS - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (STRING - 256)) | (1L << (UNICODE_STRING - 256)) | (1L << (BINARY_LITERAL - 256)) | (1L << (INTEGER_VALUE - 256)) | (1L << (DECIMAL_VALUE - 256)) | (1L << (DOUBLE_VALUE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 1282;
					expression();
					State = 1287;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1283;
						Match(T__3);
						State = 1284;
						expression();
						}
						}
						State = 1289;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1292;
				Match(T__2);
				}
				break;
			case 4:
				_localctx = new MultipleGroupingSetsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1293;
				Match(GROUPING);
				State = 1294;
				Match(SETS);
				State = 1295;
				Match(T__1);
				State = 1296;
				groupingSet();
				State = 1301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1297;
					Match(T__3);
					State = 1298;
					groupingSet();
					}
					}
					State = 1303;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1304;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GroupingSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingSetContext groupingSet() {
		GroupingSetContext _localctx = new GroupingSetContext(Context, State);
		EnterRule(_localctx, 48, RULE_groupingSet);
		int _la;
		try {
			State = 1321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1308;
				Match(T__1);
				State = 1317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_SCHEMA) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (JSON_ARRAY - 128)) | (1L << (JSON_EXISTS - 128)) | (1L << (JSON_OBJECT - 128)) | (1L << (JSON_QUERY - 128)) | (1L << (JSON_VALUE - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LISTAGG - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NORMALIZE - 128)) | (1L << (NOT - 128)) | (1L << (NULL - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)) | (1L << (TRIM - 192)) | (1L << (TRUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (PLUS - 256)) | (1L << (MINUS - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (STRING - 256)) | (1L << (UNICODE_STRING - 256)) | (1L << (BINARY_LITERAL - 256)) | (1L << (INTEGER_VALUE - 256)) | (1L << (DECIMAL_VALUE - 256)) | (1L << (DOUBLE_VALUE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 1309;
					expression();
					State = 1314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1310;
						Match(T__3);
						State = 1311;
						expression();
						}
						}
						State = 1316;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1319;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1320;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowDefinitionContext : ParserRuleContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecificationContext windowSpecification() {
			return GetRuleContext<WindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowDefinitionContext windowDefinition() {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_windowDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1323;
			_localctx.name = identifier();
			State = 1324;
			Match(AS);
			State = 1325;
			Match(T__1);
			State = 1326;
			windowSpecification();
			State = 1327;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecificationContext : ParserRuleContext {
		public IdentifierContext existingWindowName;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _partition = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SqlBaseParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(SqlBaseParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(SqlBaseParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlBaseParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameContext windowFrame() {
			return GetRuleContext<WindowFrameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public WindowSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecificationContext windowSpecification() {
		WindowSpecificationContext _localctx = new WindowSpecificationContext(Context, State);
		EnterRule(_localctx, 52, RULE_windowSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				{
				State = 1329;
				_localctx.existingWindowName = identifier();
				}
				break;
			}
			State = 1342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1332;
				Match(PARTITION);
				State = 1333;
				Match(BY);
				State = 1334;
				_localctx._expression = expression();
				_localctx._partition.Add(_localctx._expression);
				State = 1339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1335;
					Match(T__3);
					State = 1336;
					_localctx._expression = expression();
					_localctx._partition.Add(_localctx._expression);
					}
					}
					State = 1341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 1344;
				Match(ORDER);
				State = 1345;
				Match(BY);
				State = 1346;
				sortItem();
				State = 1351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1347;
					Match(T__3);
					State = 1348;
					sortItem();
					}
					}
					State = 1353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUPS || _la==MEASURES || _la==RANGE || _la==ROWS) {
				{
				State = 1356;
				windowFrame();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryContext : ParserRuleContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedQueryContext namedQuery() {
		NamedQueryContext _localctx = new NamedQueryContext(Context, State);
		EnterRule(_localctx, 54, RULE_namedQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1359;
			_localctx.name = identifier();
			State = 1361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1360;
				columnAliases();
				}
			}

			State = 1363;
			Match(AS);
			State = 1364;
			Match(T__1);
			State = 1365;
			query();
			State = 1366;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetQuantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SqlBaseParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setQuantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetQuantifierContext setQuantifier() {
		SetQuantifierContext _localctx = new SetQuantifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_setQuantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1368;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
	 
		public SelectItemContext() { }
		public virtual void CopyFrom(SelectItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectAllContext : SelectItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(SqlBaseParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public SelectAllContext(SelectItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSingleContext : SelectItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		public SelectSingleContext(SelectItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 58, RULE_selectItem);
		int _la;
		try {
			State = 1385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				_localctx = new SelectSingleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1370;
				expression();
				State = 1375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
				case 1:
					{
					State = 1372;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1371;
						Match(AS);
						}
					}

					State = 1374;
					identifier();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectAllContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1377;
				primaryExpression(0);
				State = 1378;
				Match(T__0);
				State = 1379;
				Match(ASTERISK);
				State = 1382;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
				case 1:
					{
					State = 1380;
					Match(AS);
					State = 1381;
					columnAliases();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectAllContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1384;
				Match(ASTERISK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
	 
		public RelationContext() { }
		public virtual void CopyFrom(RelationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RelationDefaultContext : RelationContext {
		[System.Diagnostics.DebuggerNonUserCode] public SampledRelationContext sampledRelation() {
			return GetRuleContext<SampledRelationContext>(0);
		}
		public RelationDefaultContext(RelationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JoinRelationContext : RelationContext {
		public RelationContext left;
		public SampledRelationContext right;
		public RelationContext rightRelation;
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(SqlBaseParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(SqlBaseParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinTypeContext joinType() {
			return GetRuleContext<JoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinCriteriaContext joinCriteria() {
			return GetRuleContext<JoinCriteriaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(SqlBaseParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SampledRelationContext sampledRelation() {
			return GetRuleContext<SampledRelationContext>(0);
		}
		public JoinRelationContext(RelationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		return relation(0);
	}

	private RelationContext relation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationContext _localctx = new RelationContext(Context, _parentState);
		RelationContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_relation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RelationDefaultContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1388;
			sampledRelation();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1408;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JoinRelationContext(new RelationContext(_parentctx, _parentState));
					((JoinRelationContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_relation);
					State = 1390;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1404;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CROSS:
						{
						State = 1391;
						Match(CROSS);
						State = 1392;
						Match(JOIN);
						State = 1393;
						((JoinRelationContext)_localctx).right = sampledRelation();
						}
						break;
					case FULL:
					case INNER:
					case JOIN:
					case LEFT:
					case RIGHT:
						{
						State = 1394;
						joinType();
						State = 1395;
						Match(JOIN);
						State = 1396;
						((JoinRelationContext)_localctx).rightRelation = relation(0);
						State = 1397;
						joinCriteria();
						}
						break;
					case NATURAL:
						{
						State = 1399;
						Match(NATURAL);
						State = 1400;
						joinType();
						State = 1401;
						Match(JOIN);
						State = 1402;
						((JoinRelationContext)_localctx).right = sampledRelation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 1410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class JoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(SqlBaseParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(SqlBaseParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(SqlBaseParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(SqlBaseParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(SqlBaseParser.FULL, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinTypeContext joinType() {
		JoinTypeContext _localctx = new JoinTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_joinType);
		int _la;
		try {
			State = 1426;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER) {
					{
					State = 1411;
					Match(INNER);
					}
				}

				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1414;
				Match(LEFT);
				State = 1416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 1415;
					Match(OUTER);
					}
				}

				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1418;
				Match(RIGHT);
				State = 1420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 1419;
					Match(OUTER);
					}
				}

				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1422;
				Match(FULL);
				State = 1424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 1423;
					Match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinCriteriaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SqlBaseParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public JoinCriteriaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinCriteria; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinCriteria(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinCriteriaContext joinCriteria() {
		JoinCriteriaContext _localctx = new JoinCriteriaContext(Context, State);
		EnterRule(_localctx, 64, RULE_joinCriteria);
		int _la;
		try {
			State = 1442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1428;
				Match(ON);
				State = 1429;
				booleanExpression(0);
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1430;
				Match(USING);
				State = 1431;
				Match(T__1);
				State = 1432;
				identifier();
				State = 1437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1433;
					Match(T__3);
					State = 1434;
					identifier();
					}
					}
					State = 1439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1440;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SampledRelationContext : ParserRuleContext {
		public ExpressionContext percentage;
		[System.Diagnostics.DebuggerNonUserCode] public PatternRecognitionContext patternRecognition() {
			return GetRuleContext<PatternRecognitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(SqlBaseParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SampleTypeContext sampleType() {
			return GetRuleContext<SampleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SampledRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sampledRelation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSampledRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SampledRelationContext sampledRelation() {
		SampledRelationContext _localctx = new SampledRelationContext(Context, State);
		EnterRule(_localctx, 66, RULE_sampledRelation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444;
			patternRecognition();
			State = 1451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1445;
				Match(TABLESAMPLE);
				State = 1446;
				sampleType();
				State = 1447;
				Match(T__1);
				State = 1448;
				_localctx.percentage = expression();
				State = 1449;
				Match(T__2);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SampleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(SqlBaseParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(SqlBaseParser.SYSTEM, 0); }
		public SampleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sampleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSampleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SampleTypeContext sampleType() {
		SampleTypeContext _localctx = new SampleTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_sampleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453;
			_la = TokenStream.LA(1);
			if ( !(_la==BERNOULLI || _la==SYSTEM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrimsSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(SqlBaseParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(SqlBaseParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(SqlBaseParser.BOTH, 0); }
		public TrimsSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trimsSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimsSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrimsSpecificationContext trimsSpecification() {
		TrimsSpecificationContext _localctx = new TrimsSpecificationContext(Context, State);
		EnterRule(_localctx, 70, RULE_trimsSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455;
			_la = TokenStream.LA(1);
			if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListAggOverflowBehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(SqlBaseParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(SqlBaseParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListaggCountIndicationContext listaggCountIndication() {
			return GetRuleContext<ListaggCountIndicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ListAggOverflowBehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listAggOverflowBehavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAggOverflowBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListAggOverflowBehaviorContext listAggOverflowBehavior() {
		ListAggOverflowBehaviorContext _localctx = new ListAggOverflowBehaviorContext(Context, State);
		EnterRule(_localctx, 72, RULE_listAggOverflowBehavior);
		int _la;
		try {
			State = 1463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERROR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1457;
				Match(ERROR);
				}
				break;
			case TRUNCATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1458;
				Match(TRUNCATE);
				State = 1460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING || _la==UNICODE_STRING) {
					{
					State = 1459;
					@string();
					}
				}

				State = 1462;
				listaggCountIndication();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListaggCountIndicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(SqlBaseParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(SqlBaseParser.WITHOUT, 0); }
		public ListaggCountIndicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listaggCountIndication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListaggCountIndication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListaggCountIndicationContext listaggCountIndication() {
		ListaggCountIndicationContext _localctx = new ListaggCountIndicationContext(Context, State);
		EnterRule(_localctx, 74, RULE_listaggCountIndication);
		try {
			State = 1469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1465;
				Match(WITH);
				State = 1466;
				Match(COUNT);
				}
				break;
			case WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1467;
				Match(WITHOUT);
				State = 1468;
				Match(COUNT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternRecognitionContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _partition = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public AliasedRelationContext aliasedRelation() {
			return GetRuleContext<AliasedRelationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE() { return GetToken(SqlBaseParser.MATCH_RECOGNIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(SqlBaseParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext rowPattern() {
			return GetRuleContext<RowPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(SqlBaseParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefinitionContext[] variableDefinition() {
			return GetRuleContexts<VariableDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefinitionContext variableDefinition(int i) {
			return GetRuleContext<VariableDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SqlBaseParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(SqlBaseParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(SqlBaseParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlBaseParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(SqlBaseParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MeasureDefinitionContext[] measureDefinition() {
			return GetRuleContexts<MeasureDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MeasureDefinitionContext measureDefinition(int i) {
			return GetRuleContext<MeasureDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsPerMatchContext rowsPerMatch() {
			return GetRuleContext<RowsPerMatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(SqlBaseParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(SqlBaseParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SkipToContext skipTo() {
			return GetRuleContext<SkipToContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSET() { return GetToken(SqlBaseParser.SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubsetDefinitionContext[] subsetDefinition() {
			return GetRuleContexts<SubsetDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubsetDefinitionContext subsetDefinition(int i) {
			return GetRuleContext<SubsetDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL() { return GetToken(SqlBaseParser.INITIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEK() { return GetToken(SqlBaseParser.SEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public PatternRecognitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternRecognition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternRecognition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternRecognitionContext patternRecognition() {
		PatternRecognitionContext _localctx = new PatternRecognitionContext(Context, State);
		EnterRule(_localctx, 76, RULE_patternRecognition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471;
			aliasedRelation();
			State = 1554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 1472;
				Match(MATCH_RECOGNIZE);
				State = 1473;
				Match(T__1);
				State = 1484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1474;
					Match(PARTITION);
					State = 1475;
					Match(BY);
					State = 1476;
					_localctx._expression = expression();
					_localctx._partition.Add(_localctx._expression);
					State = 1481;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1477;
						Match(T__3);
						State = 1478;
						_localctx._expression = expression();
						_localctx._partition.Add(_localctx._expression);
						}
						}
						State = 1483;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1486;
					Match(ORDER);
					State = 1487;
					Match(BY);
					State = 1488;
					sortItem();
					State = 1493;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1489;
						Match(T__3);
						State = 1490;
						sortItem();
						}
						}
						State = 1495;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MEASURES) {
					{
					State = 1498;
					Match(MEASURES);
					State = 1499;
					measureDefinition();
					State = 1504;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1500;
						Match(T__3);
						State = 1501;
						measureDefinition();
						}
						}
						State = 1506;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==ONE) {
					{
					State = 1509;
					rowsPerMatch();
					}
				}

				State = 1515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER) {
					{
					State = 1512;
					Match(AFTER);
					State = 1513;
					Match(MATCH);
					State = 1514;
					skipTo();
					}
				}

				State = 1518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INITIAL || _la==SEEK) {
					{
					State = 1517;
					_la = TokenStream.LA(1);
					if ( !(_la==INITIAL || _la==SEEK) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1520;
				Match(PATTERN);
				State = 1521;
				Match(T__1);
				State = 1522;
				rowPattern(0);
				State = 1523;
				Match(T__2);
				State = 1533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBSET) {
					{
					State = 1524;
					Match(SUBSET);
					State = 1525;
					subsetDefinition();
					State = 1530;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1526;
						Match(T__3);
						State = 1527;
						subsetDefinition();
						}
						}
						State = 1532;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1535;
				Match(DEFINE);
				State = 1536;
				variableDefinition();
				State = 1541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1537;
					Match(T__3);
					State = 1538;
					variableDefinition();
					}
					}
					State = 1543;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1544;
				Match(T__2);
				State = 1552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
				case 1:
					{
					State = 1546;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1545;
						Match(AS);
						}
					}

					State = 1548;
					identifier();
					State = 1550;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
					case 1:
						{
						State = 1549;
						columnAliases();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeasureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MeasureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_measureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasureDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeasureDefinitionContext measureDefinition() {
		MeasureDefinitionContext _localctx = new MeasureDefinitionContext(Context, State);
		EnterRule(_localctx, 78, RULE_measureDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1556;
			expression();
			State = 1557;
			Match(AS);
			State = 1558;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsPerMatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(SqlBaseParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(SqlBaseParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(SqlBaseParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(SqlBaseParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyMatchHandlingContext emptyMatchHandling() {
			return GetRuleContext<EmptyMatchHandlingContext>(0);
		}
		public RowsPerMatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsPerMatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowsPerMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowsPerMatchContext rowsPerMatch() {
		RowsPerMatchContext _localctx = new RowsPerMatchContext(Context, State);
		EnterRule(_localctx, 80, RULE_rowsPerMatch);
		int _la;
		try {
			State = 1571;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ONE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1560;
				Match(ONE);
				State = 1561;
				Match(ROW);
				State = 1562;
				Match(PER);
				State = 1563;
				Match(MATCH);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1564;
				Match(ALL);
				State = 1565;
				Match(ROWS);
				State = 1566;
				Match(PER);
				State = 1567;
				Match(MATCH);
				State = 1569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OMIT || _la==SHOW || _la==WITH) {
					{
					State = 1568;
					emptyMatchHandling();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyMatchHandlingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(SqlBaseParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(SqlBaseParser.MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(SqlBaseParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMATCHED() { return GetToken(SqlBaseParser.UNMATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(SqlBaseParser.ROWS, 0); }
		public EmptyMatchHandlingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyMatchHandling; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyMatchHandling(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyMatchHandlingContext emptyMatchHandling() {
		EmptyMatchHandlingContext _localctx = new EmptyMatchHandlingContext(Context, State);
		EnterRule(_localctx, 82, RULE_emptyMatchHandling);
		try {
			State = 1582;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SHOW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1573;
				Match(SHOW);
				State = 1574;
				Match(EMPTY);
				State = 1575;
				Match(MATCHES);
				}
				break;
			case OMIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1576;
				Match(OMIT);
				State = 1577;
				Match(EMPTY);
				State = 1578;
				Match(MATCHES);
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1579;
				Match(WITH);
				State = 1580;
				Match(UNMATCHED);
				State = 1581;
				Match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipToContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(SqlBaseParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(SqlBaseParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(SqlBaseParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(SqlBaseParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SkipToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipTo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipToContext skipTo() {
		SkipToContext _localctx = new SkipToContext(Context, State);
		EnterRule(_localctx, 84, RULE_skipTo);
		try {
			State = 1603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1584;
				Match(T__4);
				State = 1585;
				Match(TO);
				State = 1586;
				Match(NEXT);
				State = 1587;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1588;
				Match(T__4);
				State = 1589;
				Match(PAST);
				State = 1590;
				Match(LAST);
				State = 1591;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1592;
				Match(T__4);
				State = 1593;
				Match(TO);
				State = 1594;
				Match(FIRST);
				State = 1595;
				identifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1596;
				Match(T__4);
				State = 1597;
				Match(TO);
				State = 1598;
				Match(LAST);
				State = 1599;
				identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1600;
				Match(T__4);
				State = 1601;
				Match(TO);
				State = 1602;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsetDefinitionContext : ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _union = new List<IdentifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SqlBaseParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public SubsetDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsetDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsetDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsetDefinitionContext subsetDefinition() {
		SubsetDefinitionContext _localctx = new SubsetDefinitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_subsetDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1605;
			_localctx.name = identifier();
			State = 1606;
			Match(EQ);
			State = 1607;
			Match(T__1);
			State = 1608;
			_localctx._identifier = identifier();
			_localctx._union.Add(_localctx._identifier);
			State = 1613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 1609;
				Match(T__3);
				State = 1610;
				_localctx._identifier = identifier();
				_localctx._union.Add(_localctx._identifier);
				}
				}
				State = 1615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1616;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionContext variableDefinition() {
		VariableDefinitionContext _localctx = new VariableDefinitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_variableDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618;
			identifier();
			State = 1619;
			Match(AS);
			State = 1620;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasedRelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationPrimaryContext relationPrimary() {
			return GetRuleContext<RelationPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public AliasedRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasedRelation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasedRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasedRelationContext aliasedRelation() {
		AliasedRelationContext _localctx = new AliasedRelationContext(Context, State);
		EnterRule(_localctx, 90, RULE_aliasedRelation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			relationPrimary();
			State = 1630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				{
				State = 1624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1623;
					Match(AS);
					}
				}

				State = 1626;
				identifier();
				State = 1628;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
				case 1:
					{
					State = 1627;
					columnAliases();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAliasesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ColumnAliasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAliases; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAliases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAliasesContext columnAliases() {
		ColumnAliasesContext _localctx = new ColumnAliasesContext(Context, State);
		EnterRule(_localctx, 92, RULE_columnAliases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			Match(T__1);
			State = 1633;
			identifier();
			State = 1638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 1634;
				Match(T__3);
				State = 1635;
				identifier();
				}
				}
				State = 1640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1641;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationPrimaryContext : ParserRuleContext {
		public RelationPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationPrimary; } }
	 
		public RelationPrimaryContext() { }
		public virtual void CopyFrom(RelationPrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryRelationContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public SubqueryRelationContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryRelation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedRelationContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		public ParenthesizedRelationContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedRelation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnnestContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(SqlBaseParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(SqlBaseParser.ORDINALITY, 0); }
		public UnnestContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnest(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableFunctionInvocationContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableFunctionCallContext tableFunctionCall() {
			return GetRuleContext<TableFunctionCallContext>(0);
		}
		public TableFunctionInvocationContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LateralContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(SqlBaseParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public LateralContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLateral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableNameContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryPeriodContext queryPeriod() {
			return GetRuleContext<QueryPeriodContext>(0);
		}
		public TableNameContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationPrimaryContext relationPrimary() {
		RelationPrimaryContext _localctx = new RelationPrimaryContext(Context, State);
		EnterRule(_localctx, 94, RULE_relationPrimary);
		int _la;
		try {
			State = 1680;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				_localctx = new TableNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1643;
				qualifiedName();
				State = 1645;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
				case 1:
					{
					State = 1644;
					queryPeriod();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryRelationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1647;
				Match(T__1);
				State = 1648;
				query();
				State = 1649;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new UnnestContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1651;
				Match(UNNEST);
				State = 1652;
				Match(T__1);
				State = 1653;
				expression();
				State = 1658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1654;
					Match(T__3);
					State = 1655;
					expression();
					}
					}
					State = 1660;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1661;
				Match(T__2);
				State = 1664;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
				case 1:
					{
					State = 1662;
					Match(WITH);
					State = 1663;
					Match(ORDINALITY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new LateralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1666;
				Match(LATERAL);
				State = 1667;
				Match(T__1);
				State = 1668;
				query();
				State = 1669;
				Match(T__2);
				}
				break;
			case 5:
				_localctx = new TableFunctionInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1671;
				Match(TABLE);
				State = 1672;
				Match(T__1);
				State = 1673;
				tableFunctionCall();
				State = 1674;
				Match(T__2);
				}
				break;
			case 6:
				_localctx = new ParenthesizedRelationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1676;
				Match(T__1);
				State = 1677;
				relation(0);
				State = 1678;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFunctionArgumentContext[] tableFunctionArgument() {
			return GetRuleContexts<TableFunctionArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFunctionArgumentContext tableFunctionArgument(int i) {
			return GetRuleContext<TableFunctionArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPARTITION() { return GetToken(SqlBaseParser.COPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CopartitionTablesContext[] copartitionTables() {
			return GetRuleContexts<CopartitionTablesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopartitionTablesContext copartitionTables(int i) {
			return GetRuleContext<CopartitionTablesContext>(i);
		}
		public TableFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFunctionCallContext tableFunctionCall() {
		TableFunctionCallContext _localctx = new TableFunctionCallContext(Context, State);
		EnterRule(_localctx, 96, RULE_tableFunctionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1682;
			qualifiedName();
			State = 1683;
			Match(T__1);
			State = 1692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				{
				State = 1684;
				tableFunctionArgument();
				State = 1689;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1685;
					Match(T__3);
					State = 1686;
					tableFunctionArgument();
					}
					}
					State = 1691;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 1703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COPARTITION) {
				{
				State = 1694;
				Match(COPARTITION);
				State = 1695;
				copartitionTables();
				State = 1700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1696;
					Match(T__3);
					State = 1697;
					copartitionTables();
					}
					}
					State = 1702;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1705;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFunctionArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableArgumentContext tableArgument() {
			return GetRuleContext<TableArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptorArgumentContext descriptorArgument() {
			return GetRuleContext<DescriptorArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TableFunctionArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFunctionArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFunctionArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFunctionArgumentContext tableFunctionArgument() {
		TableFunctionArgumentContext _localctx = new TableFunctionArgumentContext(Context, State);
		EnterRule(_localctx, 98, RULE_tableFunctionArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				{
				State = 1707;
				identifier();
				State = 1708;
				Match(T__5);
				}
				break;
			}
			State = 1715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				{
				State = 1712;
				tableArgument();
				}
				break;
			case 2:
				{
				State = 1713;
				descriptorArgument();
				}
				break;
			case 3:
				{
				State = 1714;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableArgumentRelationContext tableArgumentRelation() {
			return GetRuleContext<TableArgumentRelationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SqlBaseParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(SqlBaseParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(SqlBaseParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRUNE() { return GetToken(SqlBaseParser.PRUNE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(SqlBaseParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(SqlBaseParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(SqlBaseParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlBaseParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		public TableArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableArgumentContext tableArgument() {
		TableArgumentContext _localctx = new TableArgumentContext(Context, State);
		EnterRule(_localctx, 100, RULE_tableArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717;
			tableArgumentRelation();
			State = 1735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1718;
				Match(PARTITION);
				State = 1719;
				Match(BY);
				State = 1733;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
				case 1:
					{
					State = 1720;
					Match(T__1);
					State = 1729;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_SCHEMA) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (JSON_ARRAY - 128)) | (1L << (JSON_EXISTS - 128)) | (1L << (JSON_OBJECT - 128)) | (1L << (JSON_QUERY - 128)) | (1L << (JSON_VALUE - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LISTAGG - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NORMALIZE - 128)) | (1L << (NOT - 128)) | (1L << (NULL - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)) | (1L << (TRIM - 192)) | (1L << (TRUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (PLUS - 256)) | (1L << (MINUS - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (STRING - 256)) | (1L << (UNICODE_STRING - 256)) | (1L << (BINARY_LITERAL - 256)) | (1L << (INTEGER_VALUE - 256)) | (1L << (DECIMAL_VALUE - 256)) | (1L << (DOUBLE_VALUE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
						{
						State = 1721;
						expression();
						State = 1726;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__3) {
							{
							{
							State = 1722;
							Match(T__3);
							State = 1723;
							expression();
							}
							}
							State = 1728;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 1731;
					Match(T__2);
					}
					break;
				case 2:
					{
					State = 1732;
					expression();
					}
					break;
				}
				}
			}

			State = 1743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRUNE:
				{
				State = 1737;
				Match(PRUNE);
				State = 1738;
				Match(WHEN);
				State = 1739;
				Match(EMPTY);
				}
				break;
			case KEEP:
				{
				State = 1740;
				Match(KEEP);
				State = 1741;
				Match(WHEN);
				State = 1742;
				Match(EMPTY);
				}
				break;
			case T__2:
			case T__3:
			case COPARTITION:
			case ORDER:
				break;
			default:
				break;
			}
			State = 1761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 1745;
				Match(ORDER);
				State = 1746;
				Match(BY);
				State = 1759;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 1747;
					Match(T__1);
					State = 1748;
					sortItem();
					State = 1753;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1749;
						Match(T__3);
						State = 1750;
						sortItem();
						}
						}
						State = 1755;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1756;
					Match(T__2);
					}
					break;
				case 2:
					{
					State = 1758;
					sortItem();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableArgumentRelationContext : ParserRuleContext {
		public TableArgumentRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableArgumentRelation; } }
	 
		public TableArgumentRelationContext() { }
		public virtual void CopyFrom(TableArgumentRelationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableArgumentQueryContext : TableArgumentRelationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public TableArgumentQueryContext(TableArgumentRelationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableArgumentQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableArgumentTableContext : TableArgumentRelationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public TableArgumentTableContext(TableArgumentRelationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableArgumentTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableArgumentRelationContext tableArgumentRelation() {
		TableArgumentRelationContext _localctx = new TableArgumentRelationContext(Context, State);
		EnterRule(_localctx, 102, RULE_tableArgumentRelation);
		int _la;
		try {
			State = 1789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				_localctx = new TableArgumentTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1763;
				Match(TABLE);
				State = 1764;
				Match(T__1);
				State = 1765;
				qualifiedName();
				State = 1766;
				Match(T__2);
				State = 1774;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
				case 1:
					{
					State = 1768;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1767;
						Match(AS);
						}
					}

					State = 1770;
					identifier();
					State = 1772;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__1) {
						{
						State = 1771;
						columnAliases();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new TableArgumentQueryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1776;
				Match(TABLE);
				State = 1777;
				Match(T__1);
				State = 1778;
				query();
				State = 1779;
				Match(T__2);
				State = 1787;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
				case 1:
					{
					State = 1781;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1780;
						Match(AS);
						}
					}

					State = 1783;
					identifier();
					State = 1785;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__1) {
						{
						State = 1784;
						columnAliases();
						}
					}

					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptorArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTOR() { return GetToken(SqlBaseParser.DESCRIPTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DescriptorFieldContext[] descriptorField() {
			return GetRuleContexts<DescriptorFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptorFieldContext descriptorField(int i) {
			return GetRuleContext<DescriptorFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(SqlBaseParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		public DescriptorArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptorArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptorArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptorArgumentContext descriptorArgument() {
		DescriptorArgumentContext _localctx = new DescriptorArgumentContext(Context, State);
		EnterRule(_localctx, 104, RULE_descriptorArgument);
		int _la;
		try {
			State = 1809;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DESCRIPTOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1791;
				Match(DESCRIPTOR);
				State = 1792;
				Match(T__1);
				State = 1793;
				descriptorField();
				State = 1798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1794;
					Match(T__3);
					State = 1795;
					descriptorField();
					}
					}
					State = 1800;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1801;
				Match(T__2);
				}
				break;
			case CAST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1803;
				Match(CAST);
				State = 1804;
				Match(T__1);
				State = 1805;
				Match(NULL);
				State = 1806;
				Match(AS);
				State = 1807;
				Match(DESCRIPTOR);
				State = 1808;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptorFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DescriptorFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptorField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptorField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptorFieldContext descriptorField() {
		DescriptorFieldContext _localctx = new DescriptorFieldContext(Context, State);
		EnterRule(_localctx, 106, RULE_descriptorField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811;
			identifier();
			State = 1813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
				{
				State = 1812;
				type(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopartitionTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public CopartitionTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copartitionTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopartitionTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopartitionTablesContext copartitionTables() {
		CopartitionTablesContext _localctx = new CopartitionTablesContext(Context, State);
		EnterRule(_localctx, 108, RULE_copartitionTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1815;
			Match(T__1);
			State = 1816;
			qualifiedName();
			State = 1817;
			Match(T__3);
			State = 1818;
			qualifiedName();
			State = 1823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 1819;
				Match(T__3);
				State = 1820;
				qualifiedName();
				}
				}
				State = 1825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1826;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828;
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
	 
		public BooleanExpressionContext() { }
		public virtual void CopyFrom(BooleanExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalNotContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public LogicalNotContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicatedContext : BooleanExpressionContext {
		public ValueExpressionContext _valueExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicatedContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicated(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SqlBaseParser.OR, 0); }
		public OrContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlBaseParser.AND, 0); }
		public AndContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 112;
		EnterRecursionRule(_localctx, 112, RULE_booleanExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1837;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case ABSENT:
			case ADD:
			case ADMIN:
			case AFTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case AUTHORIZATION:
			case BERNOULLI:
			case BOTH:
			case CALL:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOG:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITIONAL:
			case COUNT:
			case COPARTITION:
			case CURRENT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_PATH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEFAULT:
			case DEFINE:
			case DEFINER:
			case DENY:
			case DESC:
			case DESCRIPTOR:
			case DISTRIBUTED:
			case DOUBLE:
			case EMPTY:
			case ENCODING:
			case ERROR:
			case EXCLUDING:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FILTER:
			case FINAL:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTIONS:
			case GRACE:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case GROUPING:
			case GROUPS:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INITIAL:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case JSON_ARRAY:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEEP:
			case KEY:
			case KEYS:
			case LAST:
			case LATERAL:
			case LEADING:
			case LEVEL:
			case LIMIT:
			case LISTAGG:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MATCH:
			case MATCHED:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MEASURES:
			case MERGE:
			case MINUTE:
			case MONTH:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NORMALIZE:
			case NULL:
			case NULLIF:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case OVERFLOW:
			case PARTITION:
			case PARTITIONS:
			case PASSING:
			case PAST:
			case PATH:
			case PATTERN:
			case PER:
			case PERIOD:
			case PERMUTE:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PRIVILEGES:
			case PROPERTIES:
			case PRUNE:
			case QUOTES:
			case RANGE:
			case READ:
			case REFRESH:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURNING:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RUNNING:
			case SCALAR:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SEEK:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSET:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TEXT_STRING:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case USE:
			case USER:
			case UTF16:
			case UTF32:
			case UTF8:
			case VALIDATE:
			case VALUE:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WINDOW:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case YEAR:
			case ZONE:
			case PLUS:
			case MINUS:
			case QUESTION_MARK:
			case STRING:
			case UNICODE_STRING:
			case BINARY_LITERAL:
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_VALUE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				{
				_localctx = new PredicatedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1831;
				((PredicatedContext)_localctx)._valueExpression = valueExpression(0);
				State = 1833;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
				case 1:
					{
					State = 1832;
					predicate(((PredicatedContext)_localctx)._valueExpression);
					}
					break;
				}
				}
				break;
			case NOT:
				{
				_localctx = new LogicalNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1835;
				Match(NOT);
				State = 1836;
				booleanExpression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1847;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,241,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1845;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
					case 1:
						{
						_localctx = new AndContext(new BooleanExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 1839;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1840;
						Match(AND);
						State = 1841;
						booleanExpression(3);
						}
						break;
					case 2:
						{
						_localctx = new OrContext(new BooleanExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 1842;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1843;
						Match(OR);
						State = 1844;
						booleanExpression(2);
						}
						break;
					}
					} 
				}
				State = 1849;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,241,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ParserRuleContext value;
		public PredicateContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public PredicateContext(ParserRuleContext parent, int invokingState, ParserRuleContext value)
			: base(parent, invokingState)
		{
			this.value = value;
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
			this.value = context.value;
		}
	}
	public partial class ComparisonContext : PredicateContext {
		public ValueExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		public ComparisonContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikeContext : PredicateContext {
		public ValueExpressionContext pattern;
		public ValueExpressionContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public LikeContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InSubqueryContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public InSubqueryContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DistinctFromContext : PredicateContext {
		public ValueExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SqlBaseParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SqlBaseParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public DistinctFromContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistinctFrom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InListContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public InListContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SqlBaseParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public NullPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenContext : PredicateContext {
		public ValueExpressionContext lower;
		public ValueExpressionContext upper;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(SqlBaseParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlBaseParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public BetweenContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuantifiedComparisonContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonQuantifierContext comparisonQuantifier() {
			return GetRuleContext<ComparisonQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public QuantifiedComparisonContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifiedComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate(ParserRuleContext value) {
		PredicateContext _localctx = new PredicateContext(Context, State, value);
		EnterRule(_localctx, 114, RULE_predicate);
		int _la;
		try {
			State = 1911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
			case 1:
				_localctx = new ComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1850;
				comparisonOperator();
				State = 1851;
				((ComparisonContext)_localctx).right = valueExpression(0);
				}
				break;
			case 2:
				_localctx = new QuantifiedComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1853;
				comparisonOperator();
				State = 1854;
				comparisonQuantifier();
				State = 1855;
				Match(T__1);
				State = 1856;
				query();
				State = 1857;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new BetweenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1859;
					Match(NOT);
					}
				}

				State = 1862;
				Match(BETWEEN);
				State = 1863;
				((BetweenContext)_localctx).lower = valueExpression(0);
				State = 1864;
				Match(AND);
				State = 1865;
				((BetweenContext)_localctx).upper = valueExpression(0);
				}
				break;
			case 4:
				_localctx = new InListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1867;
					Match(NOT);
					}
				}

				State = 1870;
				Match(IN);
				State = 1871;
				Match(T__1);
				State = 1872;
				expression();
				State = 1877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1873;
					Match(T__3);
					State = 1874;
					expression();
					}
					}
					State = 1879;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1880;
				Match(T__2);
				}
				break;
			case 5:
				_localctx = new InSubqueryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1882;
					Match(NOT);
					}
				}

				State = 1885;
				Match(IN);
				State = 1886;
				Match(T__1);
				State = 1887;
				query();
				State = 1888;
				Match(T__2);
				}
				break;
			case 6:
				_localctx = new LikeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1890;
					Match(NOT);
					}
				}

				State = 1893;
				Match(LIKE);
				State = 1894;
				((LikeContext)_localctx).pattern = valueExpression(0);
				State = 1897;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
				case 1:
					{
					State = 1895;
					Match(ESCAPE);
					State = 1896;
					((LikeContext)_localctx).escape = valueExpression(0);
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new NullPredicateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1899;
				Match(IS);
				State = 1901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1900;
					Match(NOT);
					}
				}

				State = 1903;
				Match(NULL);
				}
				break;
			case 8:
				_localctx = new DistinctFromContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1904;
				Match(IS);
				State = 1906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1905;
					Match(NOT);
					}
				}

				State = 1908;
				Match(DISTINCT);
				State = 1909;
				Match(FROM);
				State = 1910;
				((DistinctFromContext)_localctx).right = valueExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueExpressionContext : ParserRuleContext {
		public ValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueExpression; } }
	 
		public ValueExpressionContext() { }
		public virtual void CopyFrom(ValueExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueExpressionDefaultContext : ValueExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ValueExpressionDefaultContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpressionDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenationContext : ValueExpressionContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(SqlBaseParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		public ConcatenationContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticBinaryContext : ValueExpressionContext {
		public ValueExpressionContext left;
		public IToken @operator;
		public ValueExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(SqlBaseParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(SqlBaseParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SqlBaseParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SqlBaseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlBaseParser.MINUS, 0); }
		public ArithmeticBinaryContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticUnaryContext : ValueExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlBaseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SqlBaseParser.PLUS, 0); }
		public ArithmeticUnaryContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtTimeZoneContext : ValueExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SqlBaseParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeZoneSpecifierContext timeZoneSpecifier() {
			return GetRuleContext<TimeZoneSpecifierContext>(0);
		}
		public AtTimeZoneContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueExpressionContext valueExpression() {
		return valueExpression(0);
	}

	private ValueExpressionContext valueExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueExpressionContext _localctx = new ValueExpressionContext(Context, _parentState);
		ValueExpressionContext _prevctx = _localctx;
		int _startState = 116;
		EnterRecursionRule(_localctx, 116, RULE_valueExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				{
				_localctx = new ValueExpressionDefaultContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1914;
				primaryExpression(0);
				}
				break;
			case 2:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1915;
				((ArithmeticUnaryContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((ArithmeticUnaryContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1916;
				valueExpression(4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1933;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1931;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						State = 1919;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1920;
						((ArithmeticBinaryContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ASTERISK - 300)) | (1L << (SLASH - 300)) | (1L << (PERCENT - 300)))) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1921;
						((ArithmeticBinaryContext)_localctx).right = valueExpression(4);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						State = 1922;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1923;
						((ArithmeticBinaryContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ArithmeticBinaryContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1924;
						((ArithmeticBinaryContext)_localctx).right = valueExpression(3);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationContext(new ValueExpressionContext(_parentctx, _parentState));
						((ConcatenationContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						State = 1925;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1926;
						Match(CONCAT);
						State = 1927;
						((ConcatenationContext)_localctx).right = valueExpression(2);
						}
						break;
					case 4:
						{
						_localctx = new AtTimeZoneContext(new ValueExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						State = 1928;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1929;
						Match(AT);
						State = 1930;
						timeZoneSpecifier();
						}
						break;
					}
					} 
				}
				State = 1935;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	 
		public PrimaryExpressionContext() { }
		public virtual void CopyFrom(PrimaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DereferenceContext : PrimaryExpressionContext {
		public PrimaryExpressionContext @base;
		public IdentifierContext fieldName;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DereferenceContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstructorContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(SqlBaseParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(SqlBaseParser.PRECISION, 0); }
		public TypeConstructorContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonValueContext : PrimaryExpressionContext {
		public JsonValueBehaviorContext emptyBehavior;
		public JsonValueBehaviorContext errorBehavior;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(SqlBaseParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonPathInvocationContext jsonPathInvocation() {
			return GetRuleContext<JsonPathInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(SqlBaseParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(SqlBaseParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(SqlBaseParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(SqlBaseParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(SqlBaseParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueBehaviorContext[] jsonValueBehavior() {
			return GetRuleContexts<JsonValueBehaviorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueBehaviorContext jsonValueBehavior(int i) {
			return GetRuleContext<JsonValueBehaviorContext>(i);
		}
		public JsonValueContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecialDateTimeFunctionContext : PrimaryExpressionContext {
		public IToken name;
		public IToken precision;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(SqlBaseParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(SqlBaseParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(SqlBaseParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(SqlBaseParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(SqlBaseParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(SqlBaseParser.LOCALTIMESTAMP, 0); }
		public SpecialDateTimeFunctionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialDateTimeFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstringContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(SqlBaseParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		public SubstringContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstring(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(SqlBaseParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY_CAST() { return GetToken(SqlBaseParser.TRY_CAST, 0); }
		public CastContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrimContext : PrimaryExpressionContext {
		public ValueExpressionContext trimChar;
		public ValueExpressionContext trimSource;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(SqlBaseParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrimsSpecificationContext trimsSpecification() {
			return GetRuleContext<TrimsSpecificationContext>(0);
		}
		public TrimContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrim(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParameterContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(SqlBaseParser.QUESTION_MARK, 0); }
		public ParameterContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NormalizeContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(SqlBaseParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalFormContext normalForm() {
			return GetRuleContext<NormalFormContext>(0);
		}
		public NormalizeContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonObjectContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECT() { return GetToken(SqlBaseParser.JSON_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjectMemberContext[] jsonObjectMember() {
			return GetRuleContexts<JsonObjectMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjectMemberContext jsonObjectMember(int i) {
			return GetRuleContext<JsonObjectMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(SqlBaseParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL() { return GetTokens(SqlBaseParser.NULL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL(int i) {
			return GetToken(SqlBaseParser.NULL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSENT() { return GetToken(SqlBaseParser.ABSENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(SqlBaseParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(SqlBaseParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(SqlBaseParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonRepresentationContext jsonRepresentation() {
			return GetRuleContext<JsonRepresentationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(SqlBaseParser.KEYS, 0); }
		public JsonObjectContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public IntervalLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumericLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public BooleanLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonArrayContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY() { return GetToken(SqlBaseParser.JSON_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueExpressionContext[] jsonValueExpression() {
			return GetRuleContexts<JsonValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueExpressionContext jsonValueExpression(int i) {
			return GetRuleContext<JsonValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(SqlBaseParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL() { return GetTokens(SqlBaseParser.NULL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL(int i) {
			return GetToken(SqlBaseParser.NULL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSENT() { return GetToken(SqlBaseParser.ABSENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(SqlBaseParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonRepresentationContext jsonRepresentation() {
			return GetRuleContext<JsonRepresentationContext>(0);
		}
		public JsonArrayContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleCaseContext : PrimaryExpressionContext {
		public ExpressionContext operand;
		public ExpressionContext elseExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SqlBaseParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SqlBaseParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext[] whenClause() {
			return GetRuleContexts<WhenClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext whenClause(int i) {
			return GetRuleContext<WhenClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SqlBaseParser.ELSE, 0); }
		public SimpleCaseContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnReferenceContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnReferenceContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		public NullLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RowConstructorContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		public RowConstructorContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubscriptContext : PrimaryExpressionContext {
		public PrimaryExpressionContext value;
		public ValueExpressionContext index;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		public SubscriptContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonExistsContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXISTS() { return GetToken(SqlBaseParser.JSON_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonPathInvocationContext jsonPathInvocation() {
			return GetRuleContext<JsonPathInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonExistsErrorBehaviorContext jsonExistsErrorBehavior() {
			return GetRuleContext<JsonExistsErrorBehaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(SqlBaseParser.ERROR, 0); }
		public JsonExistsContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonExists(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentPathContext : PrimaryExpressionContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_PATH() { return GetToken(SqlBaseParser.CURRENT_PATH, 0); }
		public CurrentPathContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentPath(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public SubqueryExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LITERAL() { return GetToken(SqlBaseParser.BINARY_LITERAL, 0); }
		public BinaryLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentUserContext : PrimaryExpressionContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(SqlBaseParser.CURRENT_USER, 0); }
		public CurrentUserContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentUser(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonQueryContext : PrimaryExpressionContext {
		public JsonQueryBehaviorContext emptyBehavior;
		public JsonQueryBehaviorContext errorBehavior;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUERY() { return GetToken(SqlBaseParser.JSON_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonPathInvocationContext jsonPathInvocation() {
			return GetRuleContext<JsonPathInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(SqlBaseParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonQueryWrapperBehaviorContext jsonQueryWrapperBehavior() {
			return GetRuleContext<JsonQueryWrapperBehaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(SqlBaseParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTES() { return GetToken(SqlBaseParser.QUOTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(SqlBaseParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(SqlBaseParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(SqlBaseParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(SqlBaseParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(SqlBaseParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(SqlBaseParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonQueryBehaviorContext[] jsonQueryBehavior() {
			return GetRuleContexts<JsonQueryBehaviorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonQueryBehaviorContext jsonQueryBehavior(int i) {
			return GetRuleContext<JsonQueryBehaviorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(SqlBaseParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonRepresentationContext jsonRepresentation() {
			return GetRuleContext<JsonRepresentationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALAR() { return GetToken(SqlBaseParser.SCALAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_STRING() { return GetToken(SqlBaseParser.TEXT_STRING, 0); }
		public JsonQueryContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MeasureContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverContext over() {
			return GetRuleContext<OverContext>(0);
		}
		public MeasureContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtractContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(SqlBaseParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		public ExtractContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayConstructorContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SqlBaseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayConstructorContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : PrimaryExpressionContext {
		public IdentifierContext label;
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(SqlBaseParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcessingModeContext processingMode() {
			return GetRuleContext<ProcessingModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverContext over() {
			return GetRuleContext<OverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlBaseParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullTreatmentContext nullTreatment() {
			return GetRuleContext<NullTreatmentContext>(0);
		}
		public FunctionCallContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentSchemaContext : PrimaryExpressionContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(SqlBaseParser.CURRENT_SCHEMA, 0); }
		public CurrentSchemaContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ExistsContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExists(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PositionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(SqlBaseParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		public PositionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListaggContext : PrimaryExpressionContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTAGG() { return GetToken(SqlBaseParser.LISTAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(SqlBaseParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(SqlBaseParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlBaseParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERFLOW() { return GetToken(SqlBaseParser.OVERFLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListAggOverflowBehaviorContext listAggOverflowBehavior() {
			return GetRuleContext<ListAggOverflowBehaviorContext>(0);
		}
		public ListaggContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListagg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SearchedCaseContext : PrimaryExpressionContext {
		public ExpressionContext elseExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SqlBaseParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SqlBaseParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext[] whenClause() {
			return GetRuleContexts<WhenClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext whenClause(int i) {
			return GetRuleContext<WhenClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SqlBaseParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SearchedCaseContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearchedCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentCatalogContext : PrimaryExpressionContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(SqlBaseParser.CURRENT_CATALOG, 0); }
		public CurrentCatalogContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentCatalog(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupingOperationContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(SqlBaseParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public GroupingOperationContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 118;
		EnterRecursionRule(_localctx, 118, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				{
				_localctx = new NullLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1937;
				Match(NULL);
				}
				break;
			case 2:
				{
				_localctx = new IntervalLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1938;
				interval();
				}
				break;
			case 3:
				{
				_localctx = new TypeConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1939;
				identifier();
				State = 1940;
				@string();
				}
				break;
			case 4:
				{
				_localctx = new TypeConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1942;
				Match(DOUBLE);
				State = 1943;
				Match(PRECISION);
				State = 1944;
				@string();
				}
				break;
			case 5:
				{
				_localctx = new NumericLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1945;
				number();
				}
				break;
			case 6:
				{
				_localctx = new BooleanLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1946;
				booleanValue();
				}
				break;
			case 7:
				{
				_localctx = new StringLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1947;
				@string();
				}
				break;
			case 8:
				{
				_localctx = new BinaryLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1948;
				Match(BINARY_LITERAL);
				}
				break;
			case 9:
				{
				_localctx = new ParameterContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1949;
				Match(QUESTION_MARK);
				}
				break;
			case 10:
				{
				_localctx = new PositionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1950;
				Match(POSITION);
				State = 1951;
				Match(T__1);
				State = 1952;
				valueExpression(0);
				State = 1953;
				Match(IN);
				State = 1954;
				valueExpression(0);
				State = 1955;
				Match(T__2);
				}
				break;
			case 11:
				{
				_localctx = new RowConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1957;
				Match(T__1);
				State = 1958;
				expression();
				State = 1961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1959;
					Match(T__3);
					State = 1960;
					expression();
					}
					}
					State = 1963;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__3 );
				State = 1965;
				Match(T__2);
				}
				break;
			case 12:
				{
				_localctx = new RowConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1967;
				Match(ROW);
				State = 1968;
				Match(T__1);
				State = 1969;
				expression();
				State = 1974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1970;
					Match(T__3);
					State = 1971;
					expression();
					}
					}
					State = 1976;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1977;
				Match(T__2);
				}
				break;
			case 13:
				{
				_localctx = new ListaggContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1979;
				((ListaggContext)_localctx).name = Match(LISTAGG);
				State = 1980;
				Match(T__1);
				State = 1982;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
				case 1:
					{
					State = 1981;
					setQuantifier();
					}
					break;
				}
				State = 1984;
				expression();
				State = 1987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 1985;
					Match(T__3);
					State = 1986;
					@string();
					}
				}

				State = 1992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 1989;
					Match(ON);
					State = 1990;
					Match(OVERFLOW);
					State = 1991;
					listAggOverflowBehavior();
					}
				}

				State = 1994;
				Match(T__2);
				{
				State = 1995;
				Match(WITHIN);
				State = 1996;
				Match(GROUP);
				State = 1997;
				Match(T__1);
				State = 1998;
				Match(ORDER);
				State = 1999;
				Match(BY);
				State = 2000;
				sortItem();
				State = 2005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 2001;
					Match(T__3);
					State = 2002;
					sortItem();
					}
					}
					State = 2007;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2008;
				Match(T__2);
				}
				}
				break;
			case 14:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2011;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
				case 1:
					{
					State = 2010;
					processingMode();
					}
					break;
				}
				State = 2013;
				qualifiedName();
				State = 2014;
				Match(T__1);
				State = 2018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 2015;
					((FunctionCallContext)_localctx).label = identifier();
					State = 2016;
					Match(T__0);
					}
				}

				State = 2020;
				Match(ASTERISK);
				State = 2021;
				Match(T__2);
				State = 2023;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
				case 1:
					{
					State = 2022;
					filter();
					}
					break;
				}
				State = 2026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
				case 1:
					{
					State = 2025;
					over();
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2029;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
				case 1:
					{
					State = 2028;
					processingMode();
					}
					break;
				}
				State = 2031;
				qualifiedName();
				State = 2032;
				Match(T__1);
				State = 2044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_SCHEMA) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTINCT - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (JSON_ARRAY - 128)) | (1L << (JSON_EXISTS - 128)) | (1L << (JSON_OBJECT - 128)) | (1L << (JSON_QUERY - 128)) | (1L << (JSON_VALUE - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LISTAGG - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NORMALIZE - 128)) | (1L << (NOT - 128)) | (1L << (NULL - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)) | (1L << (TRIM - 192)) | (1L << (TRUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (PLUS - 256)) | (1L << (MINUS - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (STRING - 256)) | (1L << (UNICODE_STRING - 256)) | (1L << (BINARY_LITERAL - 256)) | (1L << (INTEGER_VALUE - 256)) | (1L << (DECIMAL_VALUE - 256)) | (1L << (DOUBLE_VALUE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 2034;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
					case 1:
						{
						State = 2033;
						setQuantifier();
						}
						break;
					}
					State = 2036;
					expression();
					State = 2041;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 2037;
						Match(T__3);
						State = 2038;
						expression();
						}
						}
						State = 2043;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 2046;
					Match(ORDER);
					State = 2047;
					Match(BY);
					State = 2048;
					sortItem();
					State = 2053;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 2049;
						Match(T__3);
						State = 2050;
						sortItem();
						}
						}
						State = 2055;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2058;
				Match(T__2);
				State = 2060;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
				case 1:
					{
					State = 2059;
					filter();
					}
					break;
				}
				State = 2066;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
				case 1:
					{
					State = 2063;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IGNORE || _la==RESPECT) {
						{
						State = 2062;
						nullTreatment();
						}
					}

					State = 2065;
					over();
					}
					break;
				}
				}
				break;
			case 16:
				{
				_localctx = new MeasureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2068;
				identifier();
				State = 2069;
				over();
				}
				break;
			case 17:
				{
				_localctx = new LambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2071;
				identifier();
				State = 2072;
				Match(T__6);
				State = 2073;
				expression();
				}
				break;
			case 18:
				{
				_localctx = new LambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2075;
				Match(T__1);
				State = 2084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 2076;
					identifier();
					State = 2081;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 2077;
						Match(T__3);
						State = 2078;
						identifier();
						}
						}
						State = 2083;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2086;
				Match(T__2);
				State = 2087;
				Match(T__6);
				State = 2088;
				expression();
				}
				break;
			case 19:
				{
				_localctx = new SubqueryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2089;
				Match(T__1);
				State = 2090;
				query();
				State = 2091;
				Match(T__2);
				}
				break;
			case 20:
				{
				_localctx = new ExistsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2093;
				Match(EXISTS);
				State = 2094;
				Match(T__1);
				State = 2095;
				query();
				State = 2096;
				Match(T__2);
				}
				break;
			case 21:
				{
				_localctx = new SimpleCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2098;
				Match(CASE);
				State = 2099;
				((SimpleCaseContext)_localctx).operand = expression();
				State = 2101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2100;
					whenClause();
					}
					}
					State = 2103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 2107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 2105;
					Match(ELSE);
					State = 2106;
					((SimpleCaseContext)_localctx).elseExpression = expression();
					}
				}

				State = 2109;
				Match(END);
				}
				break;
			case 22:
				{
				_localctx = new SearchedCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2111;
				Match(CASE);
				State = 2113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2112;
					whenClause();
					}
					}
					State = 2115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 2119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 2117;
					Match(ELSE);
					State = 2118;
					((SearchedCaseContext)_localctx).elseExpression = expression();
					}
				}

				State = 2121;
				Match(END);
				}
				break;
			case 23:
				{
				_localctx = new CastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2123;
				Match(CAST);
				State = 2124;
				Match(T__1);
				State = 2125;
				expression();
				State = 2126;
				Match(AS);
				State = 2127;
				type(0);
				State = 2128;
				Match(T__2);
				}
				break;
			case 24:
				{
				_localctx = new CastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2130;
				Match(TRY_CAST);
				State = 2131;
				Match(T__1);
				State = 2132;
				expression();
				State = 2133;
				Match(AS);
				State = 2134;
				type(0);
				State = 2135;
				Match(T__2);
				}
				break;
			case 25:
				{
				_localctx = new ArrayConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2137;
				Match(ARRAY);
				State = 2138;
				Match(T__7);
				State = 2147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_SCHEMA) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (JSON_ARRAY - 128)) | (1L << (JSON_EXISTS - 128)) | (1L << (JSON_OBJECT - 128)) | (1L << (JSON_QUERY - 128)) | (1L << (JSON_VALUE - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LISTAGG - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NORMALIZE - 128)) | (1L << (NOT - 128)) | (1L << (NULL - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)) | (1L << (TRIM - 192)) | (1L << (TRUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (PLUS - 256)) | (1L << (MINUS - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (STRING - 256)) | (1L << (UNICODE_STRING - 256)) | (1L << (BINARY_LITERAL - 256)) | (1L << (INTEGER_VALUE - 256)) | (1L << (DECIMAL_VALUE - 256)) | (1L << (DOUBLE_VALUE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 2139;
					expression();
					State = 2144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 2140;
						Match(T__3);
						State = 2141;
						expression();
						}
						}
						State = 2146;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2149;
				Match(T__8);
				}
				break;
			case 26:
				{
				_localctx = new ColumnReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2150;
				identifier();
				}
				break;
			case 27:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2151;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(CURRENT_DATE);
				}
				break;
			case 28:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2152;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(CURRENT_TIME);
				State = 2156;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
				case 1:
					{
					State = 2153;
					Match(T__1);
					State = 2154;
					((SpecialDateTimeFunctionContext)_localctx).precision = Match(INTEGER_VALUE);
					State = 2155;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 29:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2158;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(CURRENT_TIMESTAMP);
				State = 2162;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
				case 1:
					{
					State = 2159;
					Match(T__1);
					State = 2160;
					((SpecialDateTimeFunctionContext)_localctx).precision = Match(INTEGER_VALUE);
					State = 2161;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 30:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2164;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(LOCALTIME);
				State = 2168;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 2165;
					Match(T__1);
					State = 2166;
					((SpecialDateTimeFunctionContext)_localctx).precision = Match(INTEGER_VALUE);
					State = 2167;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 31:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2170;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(LOCALTIMESTAMP);
				State = 2174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
				case 1:
					{
					State = 2171;
					Match(T__1);
					State = 2172;
					((SpecialDateTimeFunctionContext)_localctx).precision = Match(INTEGER_VALUE);
					State = 2173;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 32:
				{
				_localctx = new CurrentUserContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2176;
				((CurrentUserContext)_localctx).name = Match(CURRENT_USER);
				}
				break;
			case 33:
				{
				_localctx = new CurrentCatalogContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2177;
				((CurrentCatalogContext)_localctx).name = Match(CURRENT_CATALOG);
				}
				break;
			case 34:
				{
				_localctx = new CurrentSchemaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2178;
				((CurrentSchemaContext)_localctx).name = Match(CURRENT_SCHEMA);
				}
				break;
			case 35:
				{
				_localctx = new CurrentPathContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2179;
				((CurrentPathContext)_localctx).name = Match(CURRENT_PATH);
				}
				break;
			case 36:
				{
				_localctx = new TrimContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2180;
				Match(TRIM);
				State = 2181;
				Match(T__1);
				State = 2189;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
				case 1:
					{
					State = 2183;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
					case 1:
						{
						State = 2182;
						trimsSpecification();
						}
						break;
					}
					State = 2186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_SCHEMA) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (JSON_ARRAY - 128)) | (1L << (JSON_EXISTS - 128)) | (1L << (JSON_OBJECT - 128)) | (1L << (JSON_QUERY - 128)) | (1L << (JSON_VALUE - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LISTAGG - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NORMALIZE - 128)) | (1L << (NULL - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)) | (1L << (TRIM - 192)) | (1L << (TRUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (PLUS - 256)) | (1L << (MINUS - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (STRING - 256)) | (1L << (UNICODE_STRING - 256)) | (1L << (BINARY_LITERAL - 256)) | (1L << (INTEGER_VALUE - 256)) | (1L << (DECIMAL_VALUE - 256)) | (1L << (DOUBLE_VALUE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
						{
						State = 2185;
						((TrimContext)_localctx).trimChar = valueExpression(0);
						}
					}

					State = 2188;
					Match(FROM);
					}
					break;
				}
				State = 2191;
				((TrimContext)_localctx).trimSource = valueExpression(0);
				State = 2192;
				Match(T__2);
				}
				break;
			case 37:
				{
				_localctx = new TrimContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2194;
				Match(TRIM);
				State = 2195;
				Match(T__1);
				State = 2196;
				((TrimContext)_localctx).trimSource = valueExpression(0);
				State = 2197;
				Match(T__3);
				State = 2198;
				((TrimContext)_localctx).trimChar = valueExpression(0);
				State = 2199;
				Match(T__2);
				}
				break;
			case 38:
				{
				_localctx = new SubstringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2201;
				Match(SUBSTRING);
				State = 2202;
				Match(T__1);
				State = 2203;
				valueExpression(0);
				State = 2204;
				Match(FROM);
				State = 2205;
				valueExpression(0);
				State = 2208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 2206;
					Match(FOR);
					State = 2207;
					valueExpression(0);
					}
				}

				State = 2210;
				Match(T__2);
				}
				break;
			case 39:
				{
				_localctx = new NormalizeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2212;
				Match(NORMALIZE);
				State = 2213;
				Match(T__1);
				State = 2214;
				valueExpression(0);
				State = 2217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 2215;
					Match(T__3);
					State = 2216;
					normalForm();
					}
				}

				State = 2219;
				Match(T__2);
				}
				break;
			case 40:
				{
				_localctx = new ExtractContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2221;
				Match(EXTRACT);
				State = 2222;
				Match(T__1);
				State = 2223;
				identifier();
				State = 2224;
				Match(FROM);
				State = 2225;
				valueExpression(0);
				State = 2226;
				Match(T__2);
				}
				break;
			case 41:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2228;
				Match(T__1);
				State = 2229;
				expression();
				State = 2230;
				Match(T__2);
				}
				break;
			case 42:
				{
				_localctx = new GroupingOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2232;
				Match(GROUPING);
				State = 2233;
				Match(T__1);
				State = 2242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (IDENTIFIER - 256)) | (1L << (DIGIT_IDENTIFIER - 256)) | (1L << (QUOTED_IDENTIFIER - 256)) | (1L << (BACKQUOTED_IDENTIFIER - 256)))) != 0)) {
					{
					State = 2234;
					qualifiedName();
					State = 2239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 2235;
						Match(T__3);
						State = 2236;
						qualifiedName();
						}
						}
						State = 2241;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2244;
				Match(T__2);
				}
				break;
			case 43:
				{
				_localctx = new JsonExistsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2245;
				Match(JSON_EXISTS);
				State = 2246;
				Match(T__1);
				State = 2247;
				jsonPathInvocation();
				State = 2252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ERROR || _la==FALSE || _la==TRUE || _la==UNKNOWN) {
					{
					State = 2248;
					jsonExistsErrorBehavior();
					State = 2249;
					Match(ON);
					State = 2250;
					Match(ERROR);
					}
				}

				State = 2254;
				Match(T__2);
				}
				break;
			case 44:
				{
				_localctx = new JsonValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2256;
				Match(JSON_VALUE);
				State = 2257;
				Match(T__1);
				State = 2258;
				jsonPathInvocation();
				State = 2261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 2259;
					Match(RETURNING);
					State = 2260;
					type(0);
					}
				}

				State = 2267;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
				case 1:
					{
					State = 2263;
					((JsonValueContext)_localctx).emptyBehavior = jsonValueBehavior();
					State = 2264;
					Match(ON);
					State = 2265;
					Match(EMPTY);
					}
					break;
				}
				State = 2273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || _la==ERROR || _la==NULL) {
					{
					State = 2269;
					((JsonValueContext)_localctx).errorBehavior = jsonValueBehavior();
					State = 2270;
					Match(ON);
					State = 2271;
					Match(ERROR);
					}
				}

				State = 2275;
				Match(T__2);
				}
				break;
			case 45:
				{
				_localctx = new JsonQueryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2277;
				Match(JSON_QUERY);
				State = 2278;
				Match(T__1);
				State = 2279;
				jsonPathInvocation();
				State = 2286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 2280;
					Match(RETURNING);
					State = 2281;
					type(0);
					State = 2284;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FORMAT) {
						{
						State = 2282;
						Match(FORMAT);
						State = 2283;
						jsonRepresentation();
						}
					}

					}
				}

				State = 2291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 2288;
					jsonQueryWrapperBehavior();
					State = 2289;
					Match(WRAPPER);
					}
				}

				State = 2300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEEP || _la==OMIT) {
					{
					State = 2293;
					_la = TokenStream.LA(1);
					if ( !(_la==KEEP || _la==OMIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2294;
					Match(QUOTES);
					State = 2298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ON) {
						{
						State = 2295;
						Match(ON);
						State = 2296;
						Match(SCALAR);
						State = 2297;
						Match(TEXT_STRING);
						}
					}

					}
				}

				State = 2306;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
				case 1:
					{
					State = 2302;
					((JsonQueryContext)_localctx).emptyBehavior = jsonQueryBehavior();
					State = 2303;
					Match(ON);
					State = 2304;
					Match(EMPTY);
					}
					break;
				}
				State = 2312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EMPTY || _la==ERROR || _la==NULL) {
					{
					State = 2308;
					((JsonQueryContext)_localctx).errorBehavior = jsonQueryBehavior();
					State = 2309;
					Match(ON);
					State = 2310;
					Match(ERROR);
					}
				}

				State = 2314;
				Match(T__2);
				}
				break;
			case 46:
				{
				_localctx = new JsonObjectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2316;
				Match(JSON_OBJECT);
				State = 2317;
				Match(T__1);
				State = 2346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
				case 1:
					{
					State = 2318;
					jsonObjectMember();
					State = 2323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 2319;
						Match(T__3);
						State = 2320;
						jsonObjectMember();
						}
						}
						State = 2325;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2332;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NULL:
						{
						State = 2326;
						Match(NULL);
						State = 2327;
						Match(ON);
						State = 2328;
						Match(NULL);
						}
						break;
					case ABSENT:
						{
						State = 2329;
						Match(ABSENT);
						State = 2330;
						Match(ON);
						State = 2331;
						Match(NULL);
						}
						break;
					case T__2:
					case RETURNING:
					case WITH:
					case WITHOUT:
						break;
					default:
						break;
					}
					State = 2344;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WITH:
						{
						State = 2334;
						Match(WITH);
						State = 2335;
						Match(UNIQUE);
						State = 2337;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==KEYS) {
							{
							State = 2336;
							Match(KEYS);
							}
						}

						}
						break;
					case WITHOUT:
						{
						State = 2339;
						Match(WITHOUT);
						State = 2340;
						Match(UNIQUE);
						State = 2342;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==KEYS) {
							{
							State = 2341;
							Match(KEYS);
							}
						}

						}
						break;
					case T__2:
					case RETURNING:
						break;
					default:
						break;
					}
					}
					break;
				}
				State = 2354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 2348;
					Match(RETURNING);
					State = 2349;
					type(0);
					State = 2352;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FORMAT) {
						{
						State = 2350;
						Match(FORMAT);
						State = 2351;
						jsonRepresentation();
						}
					}

					}
				}

				State = 2356;
				Match(T__2);
				}
				break;
			case 47:
				{
				_localctx = new JsonArrayContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2357;
				Match(JSON_ARRAY);
				State = 2358;
				Match(T__1);
				State = 2375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
				case 1:
					{
					State = 2359;
					jsonValueExpression();
					State = 2364;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 2360;
						Match(T__3);
						State = 2361;
						jsonValueExpression();
						}
						}
						State = 2366;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2373;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NULL:
						{
						State = 2367;
						Match(NULL);
						State = 2368;
						Match(ON);
						State = 2369;
						Match(NULL);
						}
						break;
					case ABSENT:
						{
						State = 2370;
						Match(ABSENT);
						State = 2371;
						Match(ON);
						State = 2372;
						Match(NULL);
						}
						break;
					case T__2:
					case RETURNING:
						break;
					default:
						break;
					}
					}
					break;
				}
				State = 2383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 2377;
					Match(RETURNING);
					State = 2378;
					type(0);
					State = 2381;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FORMAT) {
						{
						State = 2379;
						Match(FORMAT);
						State = 2380;
						jsonRepresentation();
						}
					}

					}
				}

				State = 2385;
				Match(T__2);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2398;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2396;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
					case 1:
						{
						_localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((SubscriptContext)_localctx).value = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 2388;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 2389;
						Match(T__7);
						State = 2390;
						((SubscriptContext)_localctx).index = valueExpression(0);
						State = 2391;
						Match(T__8);
						}
						break;
					case 2:
						{
						_localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((DereferenceContext)_localctx).base = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 2393;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 2394;
						Match(T__0);
						State = 2395;
						((DereferenceContext)_localctx).fieldName = identifier();
						}
						break;
					}
					} 
				}
				State = 2400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class JsonPathInvocationContext : ParserRuleContext {
		public StringContext path;
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueExpressionContext jsonValueExpression() {
			return GetRuleContext<JsonValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(SqlBaseParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonArgumentContext[] jsonArgument() {
			return GetRuleContexts<JsonArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonArgumentContext jsonArgument(int i) {
			return GetRuleContext<JsonArgumentContext>(i);
		}
		public JsonPathInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonPathInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPathInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonPathInvocationContext jsonPathInvocation() {
		JsonPathInvocationContext _localctx = new JsonPathInvocationContext(Context, State);
		EnterRule(_localctx, 120, RULE_jsonPathInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2401;
			jsonValueExpression();
			State = 2402;
			Match(T__3);
			State = 2403;
			_localctx.path = @string();
			State = 2413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PASSING) {
				{
				State = 2404;
				Match(PASSING);
				State = 2405;
				jsonArgument();
				State = 2410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 2406;
					Match(T__3);
					State = 2407;
					jsonArgument();
					}
					}
					State = 2412;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(SqlBaseParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonRepresentationContext jsonRepresentation() {
			return GetRuleContext<JsonRepresentationContext>(0);
		}
		public JsonValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueExpressionContext jsonValueExpression() {
		JsonValueExpressionContext _localctx = new JsonValueExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_jsonValueExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2415;
			expression();
			State = 2418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORMAT) {
				{
				State = 2416;
				Match(FORMAT);
				State = 2417;
				jsonRepresentation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonRepresentationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(SqlBaseParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(SqlBaseParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8() { return GetToken(SqlBaseParser.UTF8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16() { return GetToken(SqlBaseParser.UTF16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF32() { return GetToken(SqlBaseParser.UTF32, 0); }
		public JsonRepresentationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonRepresentation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonRepresentation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonRepresentationContext jsonRepresentation() {
		JsonRepresentationContext _localctx = new JsonRepresentationContext(Context, State);
		EnterRule(_localctx, 124, RULE_jsonRepresentation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2420;
			Match(JSON);
			State = 2423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENCODING) {
				{
				State = 2421;
				Match(ENCODING);
				State = 2422;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (UTF16 - 272)) | (1L << (UTF32 - 272)) | (1L << (UTF8 - 272)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueExpressionContext jsonValueExpression() {
			return GetRuleContext<JsonValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public JsonArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonArgumentContext jsonArgument() {
		JsonArgumentContext _localctx = new JsonArgumentContext(Context, State);
		EnterRule(_localctx, 126, RULE_jsonArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			jsonValueExpression();
			State = 2426;
			Match(AS);
			State = 2427;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonExistsErrorBehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SqlBaseParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SqlBaseParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(SqlBaseParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(SqlBaseParser.ERROR, 0); }
		public JsonExistsErrorBehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonExistsErrorBehavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonExistsErrorBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonExistsErrorBehaviorContext jsonExistsErrorBehavior() {
		JsonExistsErrorBehaviorContext _localctx = new JsonExistsErrorBehaviorContext(Context, State);
		EnterRule(_localctx, 128, RULE_jsonExistsErrorBehavior);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2429;
			_la = TokenStream.LA(1);
			if ( !(_la==ERROR || _la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueBehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(SqlBaseParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SqlBaseParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JsonValueBehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueBehavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueBehaviorContext jsonValueBehavior() {
		JsonValueBehaviorContext _localctx = new JsonValueBehaviorContext(Context, State);
		EnterRule(_localctx, 130, RULE_jsonValueBehavior);
		try {
			State = 2435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERROR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2431;
				Match(ERROR);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2432;
				Match(NULL);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2433;
				Match(DEFAULT);
				State = 2434;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonQueryWrapperBehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(SqlBaseParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SqlBaseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(SqlBaseParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(SqlBaseParser.UNCONDITIONAL, 0); }
		public JsonQueryWrapperBehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonQueryWrapperBehavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonQueryWrapperBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonQueryWrapperBehaviorContext jsonQueryWrapperBehavior() {
		JsonQueryWrapperBehaviorContext _localctx = new JsonQueryWrapperBehaviorContext(Context, State);
		EnterRule(_localctx, 132, RULE_jsonQueryWrapperBehavior);
		int _la;
		try {
			State = 2448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITHOUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2437;
				Match(WITHOUT);
				State = 2439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 2438;
					Match(ARRAY);
					}
				}

				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2441;
				Match(WITH);
				State = 2443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONDITIONAL || _la==UNCONDITIONAL) {
					{
					State = 2442;
					_la = TokenStream.LA(1);
					if ( !(_la==CONDITIONAL || _la==UNCONDITIONAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 2445;
					Match(ARRAY);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonQueryBehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(SqlBaseParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(SqlBaseParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SqlBaseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(SqlBaseParser.OBJECT, 0); }
		public JsonQueryBehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonQueryBehavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonQueryBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonQueryBehaviorContext jsonQueryBehavior() {
		JsonQueryBehaviorContext _localctx = new JsonQueryBehaviorContext(Context, State);
		EnterRule(_localctx, 134, RULE_jsonQueryBehavior);
		try {
			State = 2456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2450;
				Match(ERROR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2451;
				Match(NULL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2452;
				Match(EMPTY);
				State = 2453;
				Match(ARRAY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2454;
				Match(EMPTY);
				State = 2455;
				Match(OBJECT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonObjectMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(SqlBaseParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueExpressionContext jsonValueExpression() {
			return GetRuleContext<JsonValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(SqlBaseParser.KEY, 0); }
		public JsonObjectMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObjectMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObjectMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjectMemberContext jsonObjectMember() {
		JsonObjectMemberContext _localctx = new JsonObjectMemberContext(Context, State);
		EnterRule(_localctx, 136, RULE_jsonObjectMember);
		try {
			State = 2469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2459;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
				case 1:
					{
					State = 2458;
					Match(KEY);
					}
					break;
				}
				State = 2461;
				expression();
				State = 2462;
				Match(VALUE);
				State = 2463;
				jsonValueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2465;
				expression();
				State = 2466;
				Match(T__9);
				State = 2467;
				jsonValueExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcessingModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNNING() { return GetToken(SqlBaseParser.RUNNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(SqlBaseParser.FINAL, 0); }
		public ProcessingModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_processingMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcessingMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcessingModeContext processingMode() {
		ProcessingModeContext _localctx = new ProcessingModeContext(Context, State);
		EnterRule(_localctx, 138, RULE_processingMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2471;
			_la = TokenStream.LA(1);
			if ( !(_la==FINAL || _la==RUNNING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullTreatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SqlBaseParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(SqlBaseParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(SqlBaseParser.RESPECT, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullTreatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullTreatment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullTreatmentContext nullTreatment() {
		NullTreatmentContext _localctx = new NullTreatmentContext(Context, State);
		EnterRule(_localctx, 140, RULE_nullTreatment);
		try {
			State = 2477;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IGNORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2473;
				Match(IGNORE);
				State = 2474;
				Match(NULLS);
				}
				break;
			case RESPECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2475;
				Match(RESPECT);
				State = 2476;
				Match(NULLS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
	 
		public StringContext() { }
		public virtual void CopyFrom(StringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnicodeStringLiteralContext : StringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_STRING() { return GetToken(SqlBaseParser.UNICODE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(SqlBaseParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SqlBaseParser.STRING, 0); }
		public UnicodeStringLiteralContext(StringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnicodeStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BasicStringLiteralContext : StringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SqlBaseParser.STRING, 0); }
		public BasicStringLiteralContext(StringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 142, RULE_string);
		try {
			State = 2485;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new BasicStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2479;
				Match(STRING);
				}
				break;
			case UNICODE_STRING:
				_localctx = new UnicodeStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2480;
				Match(UNICODE_STRING);
				State = 2483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
				case 1:
					{
					State = 2481;
					Match(UESCAPE);
					State = 2482;
					Match(STRING);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeZoneSpecifierContext : ParserRuleContext {
		public TimeZoneSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeZoneSpecifier; } }
	 
		public TimeZoneSpecifierContext() { }
		public virtual void CopyFrom(TimeZoneSpecifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimeZoneIntervalContext : TimeZoneSpecifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(SqlBaseParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(SqlBaseParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public TimeZoneIntervalContext(TimeZoneSpecifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeZoneInterval(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeZoneStringContext : TimeZoneSpecifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(SqlBaseParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(SqlBaseParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public TimeZoneStringContext(TimeZoneSpecifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeZoneString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeZoneSpecifierContext timeZoneSpecifier() {
		TimeZoneSpecifierContext _localctx = new TimeZoneSpecifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_timeZoneSpecifier);
		try {
			State = 2493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
			case 1:
				_localctx = new TimeZoneIntervalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2487;
				Match(TIME);
				State = 2488;
				Match(ZONE);
				State = 2489;
				interval();
				}
				break;
			case 2:
				_localctx = new TimeZoneStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2490;
				Match(TIME);
				State = 2491;
				Match(ZONE);
				State = 2492;
				@string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SqlBaseParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(SqlBaseParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SqlBaseParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(SqlBaseParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SqlBaseParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(SqlBaseParser.GTE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 146, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2495;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (EQ - 292)) | (1L << (NEQ - 292)) | (1L << (LT - 292)) | (1L << (LTE - 292)) | (1L << (GT - 292)) | (1L << (GTE - 292)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonQuantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(SqlBaseParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(SqlBaseParser.ANY, 0); }
		public ComparisonQuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonQuantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonQuantifierContext comparisonQuantifier() {
		ComparisonQuantifierContext _localctx = new ComparisonQuantifierContext(Context, State);
		EnterRule(_localctx, 148, RULE_comparisonQuantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2497;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SqlBaseParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SqlBaseParser.FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 150, RULE_booleanValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		public IToken sign;
		public IntervalFieldContext from;
		public IntervalFieldContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(SqlBaseParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalFieldContext[] intervalField() {
			return GetRuleContexts<IntervalFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalFieldContext intervalField(int i) {
			return GetRuleContext<IntervalFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SqlBaseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlBaseParser.MINUS, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(Context, State);
		EnterRule(_localctx, 152, RULE_interval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2501;
			Match(INTERVAL);
			State = 2503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 2502;
				_localctx.sign = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.sign = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2505;
			@string();
			State = 2506;
			_localctx.from = intervalField();
			State = 2509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				{
				State = 2507;
				Match(TO);
				State = 2508;
				_localctx.to = intervalField();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(SqlBaseParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(SqlBaseParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(SqlBaseParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(SqlBaseParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(SqlBaseParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(SqlBaseParser.SECOND, 0); }
		public IntervalFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalFieldContext intervalField() {
		IntervalFieldContext _localctx = new IntervalFieldContext(Context, State);
		EnterRule(_localctx, 154, RULE_intervalField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2511;
			_la = TokenStream.LA(1);
			if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalFormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(SqlBaseParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(SqlBaseParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(SqlBaseParser.NFKD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(SqlBaseParser.NFKC, 0); }
		public NormalFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalForm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalFormContext normalForm() {
		NormalFormContext _localctx = new NormalFormContext(Context, State);
		EnterRule(_localctx, 156, RULE_normalForm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2513;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (NFC - 161)) | (1L << (NFD - 161)) | (1L << (NFKC - 161)) | (1L << (NFKD - 161)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RowTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowFieldContext[] rowField() {
			return GetRuleContexts<RowFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowFieldContext rowField(int i) {
			return GetRuleContext<RowFieldContext>(i);
		}
		public RowTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalTypeContext : TypeContext {
		public IntervalFieldContext from;
		public IntervalFieldContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(SqlBaseParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalFieldContext[] intervalField() {
			return GetRuleContexts<IntervalFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalFieldContext intervalField(int i) {
			return GetRuleContext<IntervalFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		public IntervalTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SqlBaseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public ArrayTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoublePrecisionTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(SqlBaseParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(SqlBaseParser.PRECISION, 0); }
		public DoublePrecisionTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoublePrecisionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LegacyArrayTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SqlBaseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SqlBaseParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SqlBaseParser.GT, 0); }
		public LegacyArrayTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLegacyArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public GenericTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateTimeTypeContext : TypeContext {
		public IToken @base;
		public TypeParameterContext precision;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(SqlBaseParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(SqlBaseParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIME() { return GetTokens(SqlBaseParser.TIME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME(int i) {
			return GetToken(SqlBaseParser.TIME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(SqlBaseParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		public DateTimeTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LegacyMapTypeContext : TypeContext {
		public TypeContext keyType;
		public TypeContext valueType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(SqlBaseParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SqlBaseParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SqlBaseParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public LegacyMapTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLegacyMapType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 158;
		EnterRecursionRule(_localctx, 158, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
			case 1:
				{
				_localctx = new RowTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2516;
				Match(ROW);
				State = 2517;
				Match(T__1);
				State = 2518;
				rowField();
				State = 2523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 2519;
					Match(T__3);
					State = 2520;
					rowField();
					}
					}
					State = 2525;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2526;
				Match(T__2);
				}
				break;
			case 2:
				{
				_localctx = new IntervalTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2528;
				Match(INTERVAL);
				State = 2529;
				((IntervalTypeContext)_localctx).from = intervalField();
				State = 2532;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,338,Context) ) {
				case 1:
					{
					State = 2530;
					Match(TO);
					State = 2531;
					((IntervalTypeContext)_localctx).to = intervalField();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new DateTimeTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2534;
				((DateTimeTypeContext)_localctx).@base = Match(TIMESTAMP);
				State = 2539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
				case 1:
					{
					State = 2535;
					Match(T__1);
					State = 2536;
					((DateTimeTypeContext)_localctx).precision = typeParameter();
					State = 2537;
					Match(T__2);
					}
					break;
				}
				State = 2544;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
				case 1:
					{
					State = 2541;
					Match(WITHOUT);
					State = 2542;
					Match(TIME);
					State = 2543;
					Match(ZONE);
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new DateTimeTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2546;
				((DateTimeTypeContext)_localctx).@base = Match(TIMESTAMP);
				State = 2551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 2547;
					Match(T__1);
					State = 2548;
					((DateTimeTypeContext)_localctx).precision = typeParameter();
					State = 2549;
					Match(T__2);
					}
				}

				State = 2553;
				Match(WITH);
				State = 2554;
				Match(TIME);
				State = 2555;
				Match(ZONE);
				}
				break;
			case 5:
				{
				_localctx = new DateTimeTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2556;
				((DateTimeTypeContext)_localctx).@base = Match(TIME);
				State = 2561;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
				case 1:
					{
					State = 2557;
					Match(T__1);
					State = 2558;
					((DateTimeTypeContext)_localctx).precision = typeParameter();
					State = 2559;
					Match(T__2);
					}
					break;
				}
				State = 2566;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
				case 1:
					{
					State = 2563;
					Match(WITHOUT);
					State = 2564;
					Match(TIME);
					State = 2565;
					Match(ZONE);
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new DateTimeTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2568;
				((DateTimeTypeContext)_localctx).@base = Match(TIME);
				State = 2573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 2569;
					Match(T__1);
					State = 2570;
					((DateTimeTypeContext)_localctx).precision = typeParameter();
					State = 2571;
					Match(T__2);
					}
				}

				State = 2575;
				Match(WITH);
				State = 2576;
				Match(TIME);
				State = 2577;
				Match(ZONE);
				}
				break;
			case 7:
				{
				_localctx = new DoublePrecisionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2578;
				Match(DOUBLE);
				State = 2579;
				Match(PRECISION);
				}
				break;
			case 8:
				{
				_localctx = new LegacyArrayTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2580;
				Match(ARRAY);
				State = 2581;
				Match(LT);
				State = 2582;
				type(0);
				State = 2583;
				Match(GT);
				}
				break;
			case 9:
				{
				_localctx = new LegacyMapTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2585;
				Match(MAP);
				State = 2586;
				Match(LT);
				State = 2587;
				((LegacyMapTypeContext)_localctx).keyType = type(0);
				State = 2588;
				Match(T__3);
				State = 2589;
				((LegacyMapTypeContext)_localctx).valueType = type(0);
				State = 2590;
				Match(GT);
				}
				break;
			case 10:
				{
				_localctx = new GenericTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2592;
				identifier();
				State = 2604;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
				case 1:
					{
					State = 2593;
					Match(T__1);
					State = 2594;
					typeParameter();
					State = 2599;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 2595;
						Match(T__3);
						State = 2596;
						typeParameter();
						}
						}
						State = 2601;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2602;
					Match(T__2);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2617;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,349,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArrayTypeContext(new TypeContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 2608;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 2609;
					Match(ARRAY);
					State = 2613;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
					case 1:
						{
						State = 2610;
						Match(T__7);
						State = 2611;
						Match(INTEGER_VALUE);
						State = 2612;
						Match(T__8);
						}
						break;
					}
					}
					} 
				}
				State = 2619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,349,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RowFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RowFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowFieldContext rowField() {
		RowFieldContext _localctx = new RowFieldContext(Context, State);
		EnterRule(_localctx, 160, RULE_rowField);
		try {
			State = 2624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2620;
				type(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2621;
				identifier();
				State = 2622;
				type(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(SqlBaseParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 162, RULE_typeParameter);
		try {
			State = 2628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2626;
				Match(INTEGER_VALUE);
				}
				break;
			case ABSENT:
			case ADD:
			case ADMIN:
			case AFTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case AUTHORIZATION:
			case BERNOULLI:
			case BOTH:
			case CALL:
			case CASCADE:
			case CATALOG:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITIONAL:
			case COUNT:
			case COPARTITION:
			case CURRENT:
			case DATA:
			case DATE:
			case DAY:
			case DEFAULT:
			case DEFINE:
			case DEFINER:
			case DENY:
			case DESC:
			case DESCRIPTOR:
			case DISTRIBUTED:
			case DOUBLE:
			case EMPTY:
			case ENCODING:
			case ERROR:
			case EXCLUDING:
			case EXPLAIN:
			case FETCH:
			case FILTER:
			case FINAL:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTIONS:
			case GRACE:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case GROUPS:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INITIAL:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case KEEP:
			case KEY:
			case KEYS:
			case LAST:
			case LATERAL:
			case LEADING:
			case LEVEL:
			case LIMIT:
			case LOCAL:
			case LOGICAL:
			case MAP:
			case MATCH:
			case MATCHED:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MEASURES:
			case MERGE:
			case MINUTE:
			case MONTH:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case OVERFLOW:
			case PARTITION:
			case PARTITIONS:
			case PASSING:
			case PAST:
			case PATH:
			case PATTERN:
			case PER:
			case PERIOD:
			case PERMUTE:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PRIVILEGES:
			case PROPERTIES:
			case PRUNE:
			case QUOTES:
			case RANGE:
			case READ:
			case REFRESH:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURNING:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RUNNING:
			case SCALAR:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SEEK:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSET:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TEXT_STRING:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TRANSACTION:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case USE:
			case USER:
			case UTF16:
			case UTF32:
			case UTF8:
			case VALIDATE:
			case VALUE:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WINDOW:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case YEAR:
			case ZONE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2627;
				type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenClauseContext : ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(SqlBaseParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SqlBaseParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenClauseContext whenClause() {
		WhenClauseContext _localctx = new WhenClauseContext(Context, State);
		EnterRule(_localctx, 164, RULE_whenClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2630;
			Match(WHEN);
			State = 2631;
			_localctx.condition = expression();
			State = 2632;
			Match(THEN);
			State = 2633;
			_localctx.result = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(SqlBaseParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SqlBaseParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 166, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2635;
			Match(FILTER);
			State = 2636;
			Match(T__1);
			State = 2637;
			Match(WHERE);
			State = 2638;
			booleanExpression(0);
			State = 2639;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeCaseContext : ParserRuleContext {
		public MergeCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeCase; } }
	 
		public MergeCaseContext() { }
		public virtual void CopyFrom(MergeCaseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MergeInsertContext : MergeCaseContext {
		public ExpressionContext condition;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _targets = new List<IdentifierContext>();
		public ExpressionContext _expression;
		public IList<ExpressionContext> _values = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(SqlBaseParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(SqlBaseParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SqlBaseParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SqlBaseParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(SqlBaseParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlBaseParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public MergeInsertContext(MergeCaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeInsert(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MergeUpdateContext : MergeCaseContext {
		public ExpressionContext condition;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _targets = new List<IdentifierContext>();
		public ExpressionContext _expression;
		public IList<ExpressionContext> _values = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(SqlBaseParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(SqlBaseParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SqlBaseParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(SqlBaseParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(SqlBaseParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(SqlBaseParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlBaseParser.AND, 0); }
		public MergeUpdateContext(MergeCaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MergeDeleteContext : MergeCaseContext {
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(SqlBaseParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(SqlBaseParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SqlBaseParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SqlBaseParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlBaseParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MergeDeleteContext(MergeCaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeCaseContext mergeCase() {
		MergeCaseContext _localctx = new MergeCaseContext(Context, State);
		EnterRule(_localctx, 168, RULE_mergeCase);
		int _la;
		try {
			State = 2705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,359,Context) ) {
			case 1:
				_localctx = new MergeUpdateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2641;
				Match(WHEN);
				State = 2642;
				Match(MATCHED);
				State = 2645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 2643;
					Match(AND);
					State = 2644;
					((MergeUpdateContext)_localctx).condition = expression();
					}
				}

				State = 2647;
				Match(THEN);
				State = 2648;
				Match(UPDATE);
				State = 2649;
				Match(SET);
				State = 2650;
				((MergeUpdateContext)_localctx)._identifier = identifier();
				((MergeUpdateContext)_localctx)._targets.Add(((MergeUpdateContext)_localctx)._identifier);
				State = 2651;
				Match(EQ);
				State = 2652;
				((MergeUpdateContext)_localctx)._expression = expression();
				((MergeUpdateContext)_localctx)._values.Add(((MergeUpdateContext)_localctx)._expression);
				State = 2660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 2653;
					Match(T__3);
					State = 2654;
					((MergeUpdateContext)_localctx)._identifier = identifier();
					((MergeUpdateContext)_localctx)._targets.Add(((MergeUpdateContext)_localctx)._identifier);
					State = 2655;
					Match(EQ);
					State = 2656;
					((MergeUpdateContext)_localctx)._expression = expression();
					((MergeUpdateContext)_localctx)._values.Add(((MergeUpdateContext)_localctx)._expression);
					}
					}
					State = 2662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new MergeDeleteContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2663;
				Match(WHEN);
				State = 2664;
				Match(MATCHED);
				State = 2667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 2665;
					Match(AND);
					State = 2666;
					((MergeDeleteContext)_localctx).condition = expression();
					}
				}

				State = 2669;
				Match(THEN);
				State = 2670;
				Match(DELETE);
				}
				break;
			case 3:
				_localctx = new MergeInsertContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2671;
				Match(WHEN);
				State = 2672;
				Match(NOT);
				State = 2673;
				Match(MATCHED);
				State = 2676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 2674;
					Match(AND);
					State = 2675;
					((MergeInsertContext)_localctx).condition = expression();
					}
				}

				State = 2678;
				Match(THEN);
				State = 2679;
				Match(INSERT);
				State = 2691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 2680;
					Match(T__1);
					State = 2681;
					((MergeInsertContext)_localctx)._identifier = identifier();
					((MergeInsertContext)_localctx)._targets.Add(((MergeInsertContext)_localctx)._identifier);
					State = 2686;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 2682;
						Match(T__3);
						State = 2683;
						((MergeInsertContext)_localctx)._identifier = identifier();
						((MergeInsertContext)_localctx)._targets.Add(((MergeInsertContext)_localctx)._identifier);
						}
						}
						State = 2688;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2689;
					Match(T__2);
					}
				}

				State = 2693;
				Match(VALUES);
				State = 2694;
				Match(T__1);
				State = 2695;
				((MergeInsertContext)_localctx)._expression = expression();
				((MergeInsertContext)_localctx)._values.Add(((MergeInsertContext)_localctx)._expression);
				State = 2700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 2696;
					Match(T__3);
					State = 2697;
					((MergeInsertContext)_localctx)._expression = expression();
					((MergeInsertContext)_localctx)._values.Add(((MergeInsertContext)_localctx)._expression);
					}
					}
					State = 2702;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2703;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverContext : ParserRuleContext {
		public IdentifierContext windowName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(SqlBaseParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecificationContext windowSpecification() {
			return GetRuleContext<WindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverContext over() {
		OverContext _localctx = new OverContext(Context, State);
		EnterRule(_localctx, 170, RULE_over);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2707;
			Match(OVER);
			State = 2713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSENT:
			case ADD:
			case ADMIN:
			case AFTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case AUTHORIZATION:
			case BERNOULLI:
			case BOTH:
			case CALL:
			case CASCADE:
			case CATALOG:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITIONAL:
			case COUNT:
			case COPARTITION:
			case CURRENT:
			case DATA:
			case DATE:
			case DAY:
			case DEFAULT:
			case DEFINE:
			case DEFINER:
			case DENY:
			case DESC:
			case DESCRIPTOR:
			case DISTRIBUTED:
			case DOUBLE:
			case EMPTY:
			case ENCODING:
			case ERROR:
			case EXCLUDING:
			case EXPLAIN:
			case FETCH:
			case FILTER:
			case FINAL:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTIONS:
			case GRACE:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case GROUPS:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INITIAL:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case KEEP:
			case KEY:
			case KEYS:
			case LAST:
			case LATERAL:
			case LEADING:
			case LEVEL:
			case LIMIT:
			case LOCAL:
			case LOGICAL:
			case MAP:
			case MATCH:
			case MATCHED:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MEASURES:
			case MERGE:
			case MINUTE:
			case MONTH:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case OVERFLOW:
			case PARTITION:
			case PARTITIONS:
			case PASSING:
			case PAST:
			case PATH:
			case PATTERN:
			case PER:
			case PERIOD:
			case PERMUTE:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PRIVILEGES:
			case PROPERTIES:
			case PRUNE:
			case QUOTES:
			case RANGE:
			case READ:
			case REFRESH:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURNING:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RUNNING:
			case SCALAR:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SEEK:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSET:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TEXT_STRING:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TRANSACTION:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case USE:
			case USER:
			case UTF16:
			case UTF32:
			case UTF8:
			case VALIDATE:
			case VALUE:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WINDOW:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case YEAR:
			case ZONE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				{
				State = 2708;
				_localctx.windowName = identifier();
				}
				break;
			case T__1:
				{
				State = 2709;
				Match(T__1);
				State = 2710;
				windowSpecification();
				State = 2711;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameExtentContext frameExtent() {
			return GetRuleContext<FrameExtentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(SqlBaseParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MeasureDefinitionContext[] measureDefinition() {
			return GetRuleContexts<MeasureDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MeasureDefinitionContext measureDefinition(int i) {
			return GetRuleContext<MeasureDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(SqlBaseParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(SqlBaseParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SkipToContext skipTo() {
			return GetRuleContext<SkipToContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(SqlBaseParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext rowPattern() {
			return GetRuleContext<RowPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSET() { return GetToken(SqlBaseParser.SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubsetDefinitionContext[] subsetDefinition() {
			return GetRuleContexts<SubsetDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubsetDefinitionContext subsetDefinition(int i) {
			return GetRuleContext<SubsetDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(SqlBaseParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefinitionContext[] variableDefinition() {
			return GetRuleContexts<VariableDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefinitionContext variableDefinition(int i) {
			return GetRuleContext<VariableDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL() { return GetToken(SqlBaseParser.INITIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEK() { return GetToken(SqlBaseParser.SEEK, 0); }
		public WindowFrameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrame; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrame(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameContext windowFrame() {
		WindowFrameContext _localctx = new WindowFrameContext(Context, State);
		EnterRule(_localctx, 172, RULE_windowFrame);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MEASURES) {
				{
				State = 2715;
				Match(MEASURES);
				State = 2716;
				measureDefinition();
				State = 2721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 2717;
					Match(T__3);
					State = 2718;
					measureDefinition();
					}
					}
					State = 2723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2726;
			frameExtent();
			State = 2730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AFTER) {
				{
				State = 2727;
				Match(AFTER);
				State = 2728;
				Match(MATCH);
				State = 2729;
				skipTo();
				}
			}

			State = 2733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL || _la==SEEK) {
				{
				State = 2732;
				_la = TokenStream.LA(1);
				if ( !(_la==INITIAL || _la==SEEK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PATTERN) {
				{
				State = 2735;
				Match(PATTERN);
				State = 2736;
				Match(T__1);
				State = 2737;
				rowPattern(0);
				State = 2738;
				Match(T__2);
				}
			}

			State = 2751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBSET) {
				{
				State = 2742;
				Match(SUBSET);
				State = 2743;
				subsetDefinition();
				State = 2748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 2744;
					Match(T__3);
					State = 2745;
					subsetDefinition();
					}
					}
					State = 2750;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINE) {
				{
				State = 2753;
				Match(DEFINE);
				State = 2754;
				variableDefinition();
				State = 2759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 2755;
					Match(T__3);
					State = 2756;
					variableDefinition();
					}
					}
					State = 2761;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameExtentContext : ParserRuleContext {
		public IToken frameType;
		public FrameBoundContext start;
		public FrameBoundContext end;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(SqlBaseParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameBoundContext[] frameBound() {
			return GetRuleContexts<FrameBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameBoundContext frameBound(int i) {
			return GetRuleContext<FrameBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(SqlBaseParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(SqlBaseParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(SqlBaseParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlBaseParser.AND, 0); }
		public FrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameExtent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameExtent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameExtentContext frameExtent() {
		FrameExtentContext _localctx = new FrameExtentContext(Context, State);
		EnterRule(_localctx, 174, RULE_frameExtent);
		try {
			State = 2788;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2764;
				_localctx.frameType = Match(RANGE);
				State = 2765;
				_localctx.start = frameBound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2766;
				_localctx.frameType = Match(ROWS);
				State = 2767;
				_localctx.start = frameBound();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2768;
				_localctx.frameType = Match(GROUPS);
				State = 2769;
				_localctx.start = frameBound();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2770;
				_localctx.frameType = Match(RANGE);
				State = 2771;
				Match(BETWEEN);
				State = 2772;
				_localctx.start = frameBound();
				State = 2773;
				Match(AND);
				State = 2774;
				_localctx.end = frameBound();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2776;
				_localctx.frameType = Match(ROWS);
				State = 2777;
				Match(BETWEEN);
				State = 2778;
				_localctx.start = frameBound();
				State = 2779;
				Match(AND);
				State = 2780;
				_localctx.end = frameBound();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2782;
				_localctx.frameType = Match(GROUPS);
				State = 2783;
				Match(BETWEEN);
				State = 2784;
				_localctx.start = frameBound();
				State = 2785;
				Match(AND);
				State = 2786;
				_localctx.end = frameBound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameBoundContext : ParserRuleContext {
		public FrameBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameBound; } }
	 
		public FrameBoundContext() { }
		public virtual void CopyFrom(FrameBoundContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoundedFrameContext : FrameBoundContext {
		public IToken boundType;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SqlBaseParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(SqlBaseParser.FOLLOWING, 0); }
		public BoundedFrameContext(FrameBoundContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundedFrame(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnboundedFrameContext : FrameBoundContext {
		public IToken boundType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(SqlBaseParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SqlBaseParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(SqlBaseParser.FOLLOWING, 0); }
		public UnboundedFrameContext(FrameBoundContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnboundedFrame(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentRowBoundContext : FrameBoundContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SqlBaseParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		public CurrentRowBoundContext(FrameBoundContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentRowBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameBoundContext frameBound() {
		FrameBoundContext _localctx = new FrameBoundContext(Context, State);
		EnterRule(_localctx, 176, RULE_frameBound);
		int _la;
		try {
			State = 2799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				_localctx = new UnboundedFrameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2790;
				Match(UNBOUNDED);
				State = 2791;
				((UnboundedFrameContext)_localctx).boundType = Match(PRECEDING);
				}
				break;
			case 2:
				_localctx = new UnboundedFrameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2792;
				Match(UNBOUNDED);
				State = 2793;
				((UnboundedFrameContext)_localctx).boundType = Match(FOLLOWING);
				}
				break;
			case 3:
				_localctx = new CurrentRowBoundContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2794;
				Match(CURRENT);
				State = 2795;
				Match(ROW);
				}
				break;
			case 4:
				_localctx = new BoundedFrameContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2796;
				expression();
				State = 2797;
				((BoundedFrameContext)_localctx).boundType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((BoundedFrameContext)_localctx).boundType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowPatternContext : ParserRuleContext {
		public RowPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowPattern; } }
	 
		public RowPatternContext() { }
		public virtual void CopyFrom(RowPatternContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QuantifiedPrimaryContext : RowPatternContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternPrimaryContext patternPrimary() {
			return GetRuleContext<PatternPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternQuantifierContext patternQuantifier() {
			return GetRuleContext<PatternQuantifierContext>(0);
		}
		public QuantifiedPrimaryContext(RowPatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifiedPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternConcatenationContext : RowPatternContext {
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext[] rowPattern() {
			return GetRuleContexts<RowPatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext rowPattern(int i) {
			return GetRuleContext<RowPatternContext>(i);
		}
		public PatternConcatenationContext(RowPatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternAlternationContext : RowPatternContext {
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext[] rowPattern() {
			return GetRuleContexts<RowPatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext rowPattern(int i) {
			return GetRuleContext<RowPatternContext>(i);
		}
		public PatternAlternationContext(RowPatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternAlternation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowPatternContext rowPattern() {
		return rowPattern(0);
	}

	private RowPatternContext rowPattern(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RowPatternContext _localctx = new RowPatternContext(Context, _parentState);
		RowPatternContext _prevctx = _localctx;
		int _startState = 178;
		EnterRecursionRule(_localctx, 178, RULE_rowPattern, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QuantifiedPrimaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2802;
			patternPrimary();
			State = 2804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				{
				State = 2803;
				patternQuantifier();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2813;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2811;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
					case 1:
						{
						_localctx = new PatternConcatenationContext(new RowPatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_rowPattern);
						State = 2806;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2807;
						rowPattern(3);
						}
						break;
					case 2:
						{
						_localctx = new PatternAlternationContext(new RowPatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_rowPattern);
						State = 2808;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2809;
						Match(T__10);
						State = 2810;
						rowPattern(2);
						}
						break;
					}
					} 
				}
				State = 2815;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PatternPrimaryContext : ParserRuleContext {
		public PatternPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternPrimary; } }
	 
		public PatternPrimaryContext() { }
		public virtual void CopyFrom(PatternPrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PatternPermutationContext : PatternPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMUTE() { return GetToken(SqlBaseParser.PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext[] rowPattern() {
			return GetRuleContexts<RowPatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext rowPattern(int i) {
			return GetRuleContext<RowPatternContext>(i);
		}
		public PatternPermutationContext(PatternPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternPermutation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionEndAnchorContext : PatternPrimaryContext {
		public PartitionEndAnchorContext(PatternPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionEndAnchor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternVariableContext : PatternPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PatternVariableContext(PatternPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExcludedPatternContext : PatternPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext rowPattern() {
			return GetRuleContext<RowPatternContext>(0);
		}
		public ExcludedPatternContext(PatternPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExcludedPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionStartAnchorContext : PatternPrimaryContext {
		public PartitionStartAnchorContext(PatternPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionStartAnchor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyPatternContext : PatternPrimaryContext {
		public EmptyPatternContext(PatternPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupedPatternContext : PatternPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public RowPatternContext rowPattern() {
			return GetRuleContext<RowPatternContext>(0);
		}
		public GroupedPatternContext(PatternPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternPrimaryContext patternPrimary() {
		PatternPrimaryContext _localctx = new PatternPrimaryContext(Context, State);
		EnterRule(_localctx, 180, RULE_patternPrimary);
		int _la;
		try {
			State = 2841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
			case 1:
				_localctx = new PatternVariableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2816;
				identifier();
				}
				break;
			case 2:
				_localctx = new EmptyPatternContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2817;
				Match(T__1);
				State = 2818;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new PatternPermutationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2819;
				Match(PERMUTE);
				State = 2820;
				Match(T__1);
				State = 2821;
				rowPattern(0);
				State = 2826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 2822;
					Match(T__3);
					State = 2823;
					rowPattern(0);
					}
					}
					State = 2828;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2829;
				Match(T__2);
				}
				break;
			case 4:
				_localctx = new GroupedPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2831;
				Match(T__1);
				State = 2832;
				rowPattern(0);
				State = 2833;
				Match(T__2);
				}
				break;
			case 5:
				_localctx = new PartitionStartAnchorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2835;
				Match(T__11);
				}
				break;
			case 6:
				_localctx = new PartitionEndAnchorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2836;
				Match(T__12);
				}
				break;
			case 7:
				_localctx = new ExcludedPatternContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2837;
				Match(T__13);
				State = 2838;
				rowPattern(0);
				State = 2839;
				Match(T__14);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternQuantifierContext : ParserRuleContext {
		public PatternQuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternQuantifier; } }
	 
		public PatternQuantifierContext() { }
		public virtual void CopyFrom(PatternQuantifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ZeroOrMoreQuantifierContext : PatternQuantifierContext {
		public IToken reluctant;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(SqlBaseParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(SqlBaseParser.QUESTION_MARK, 0); }
		public ZeroOrMoreQuantifierContext(PatternQuantifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZeroOrMoreQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OneOrMoreQuantifierContext : PatternQuantifierContext {
		public IToken reluctant;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SqlBaseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(SqlBaseParser.QUESTION_MARK, 0); }
		public OneOrMoreQuantifierContext(PatternQuantifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneOrMoreQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ZeroOrOneQuantifierContext : PatternQuantifierContext {
		public IToken reluctant;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION_MARK() { return GetTokens(SqlBaseParser.QUESTION_MARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK(int i) {
			return GetToken(SqlBaseParser.QUESTION_MARK, i);
		}
		public ZeroOrOneQuantifierContext(PatternQuantifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZeroOrOneQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeQuantifierContext : PatternQuantifierContext {
		public IToken exactly;
		public IToken reluctant;
		public IToken atLeast;
		public IToken atMost;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER_VALUE() { return GetTokens(SqlBaseParser.INTEGER_VALUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE(int i) {
			return GetToken(SqlBaseParser.INTEGER_VALUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(SqlBaseParser.QUESTION_MARK, 0); }
		public RangeQuantifierContext(PatternQuantifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternQuantifierContext patternQuantifier() {
		PatternQuantifierContext _localctx = new PatternQuantifierContext(Context, State);
		EnterRule(_localctx, 182, RULE_patternQuantifier);
		int _la;
		try {
			State = 2873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				_localctx = new ZeroOrMoreQuantifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2843;
				Match(ASTERISK);
				State = 2845;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
				case 1:
					{
					State = 2844;
					((ZeroOrMoreQuantifierContext)_localctx).reluctant = Match(QUESTION_MARK);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new OneOrMoreQuantifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2847;
				Match(PLUS);
				State = 2849;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
				case 1:
					{
					State = 2848;
					((OneOrMoreQuantifierContext)_localctx).reluctant = Match(QUESTION_MARK);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ZeroOrOneQuantifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2851;
				Match(QUESTION_MARK);
				State = 2853;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
				case 1:
					{
					State = 2852;
					((ZeroOrOneQuantifierContext)_localctx).reluctant = Match(QUESTION_MARK);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new RangeQuantifierContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2855;
				Match(T__15);
				State = 2856;
				((RangeQuantifierContext)_localctx).exactly = Match(INTEGER_VALUE);
				State = 2857;
				Match(T__16);
				State = 2859;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
				case 1:
					{
					State = 2858;
					((RangeQuantifierContext)_localctx).reluctant = Match(QUESTION_MARK);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new RangeQuantifierContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2861;
				Match(T__15);
				State = 2863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER_VALUE) {
					{
					State = 2862;
					((RangeQuantifierContext)_localctx).atLeast = Match(INTEGER_VALUE);
					}
				}

				State = 2865;
				Match(T__3);
				State = 2867;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER_VALUE) {
					{
					State = 2866;
					((RangeQuantifierContext)_localctx).atMost = Match(INTEGER_VALUE);
					}
				}

				State = 2869;
				Match(T__16);
				State = 2871;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,383,Context) ) {
				case 1:
					{
					State = 2870;
					((RangeQuantifierContext)_localctx).reluctant = Match(QUESTION_MARK);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SqlBaseParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpdateAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateAssignmentContext updateAssignment() {
		UpdateAssignmentContext _localctx = new UpdateAssignmentContext(Context, State);
		EnterRule(_localctx, 184, RULE_updateAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2875;
			identifier();
			State = 2876;
			Match(EQ);
			State = 2877;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainOptionContext : ParserRuleContext {
		public ExplainOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainOption; } }
	 
		public ExplainOptionContext() { }
		public virtual void CopyFrom(ExplainOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExplainFormatContext : ExplainOptionContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(SqlBaseParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(SqlBaseParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPHVIZ() { return GetToken(SqlBaseParser.GRAPHVIZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(SqlBaseParser.JSON, 0); }
		public ExplainFormatContext(ExplainOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplainTypeContext : ExplainOptionContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SqlBaseParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL() { return GetToken(SqlBaseParser.LOGICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTRIBUTED() { return GetToken(SqlBaseParser.DISTRIBUTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(SqlBaseParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(SqlBaseParser.IO, 0); }
		public ExplainTypeContext(ExplainOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainOptionContext explainOption() {
		ExplainOptionContext _localctx = new ExplainOptionContext(Context, State);
		EnterRule(_localctx, 186, RULE_explainOption);
		int _la;
		try {
			State = 2883;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORMAT:
				_localctx = new ExplainFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2879;
				Match(FORMAT);
				State = 2880;
				((ExplainFormatContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GRAPHVIZ || _la==JSON || _la==TEXT) ) {
					((ExplainFormatContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TYPE:
				_localctx = new ExplainTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2881;
				Match(TYPE);
				State = 2882;
				((ExplainTypeContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DISTRIBUTED || _la==IO || _la==LOGICAL || _la==VALIDATE) ) {
					((ExplainTypeContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionModeContext : ParserRuleContext {
		public TransactionModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionMode; } }
	 
		public TransactionModeContext() { }
		public virtual void CopyFrom(TransactionModeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TransactionAccessModeContext : TransactionModeContext {
		public IToken accessMode;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(SqlBaseParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(SqlBaseParser.WRITE, 0); }
		public TransactionAccessModeContext(TransactionModeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionAccessMode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsolationLevelContext : TransactionModeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(SqlBaseParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(SqlBaseParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevelOfIsolationContext levelOfIsolation() {
			return GetRuleContext<LevelOfIsolationContext>(0);
		}
		public IsolationLevelContext(TransactionModeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsolationLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionModeContext transactionMode() {
		TransactionModeContext _localctx = new TransactionModeContext(Context, State);
		EnterRule(_localctx, 188, RULE_transactionMode);
		int _la;
		try {
			State = 2890;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ISOLATION:
				_localctx = new IsolationLevelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2885;
				Match(ISOLATION);
				State = 2886;
				Match(LEVEL);
				State = 2887;
				levelOfIsolation();
				}
				break;
			case READ:
				_localctx = new TransactionAccessModeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2888;
				Match(READ);
				State = 2889;
				((TransactionAccessModeContext)_localctx).accessMode = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
					((TransactionAccessModeContext)_localctx).accessMode = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelOfIsolationContext : ParserRuleContext {
		public LevelOfIsolationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelOfIsolation; } }
	 
		public LevelOfIsolationContext() { }
		public virtual void CopyFrom(LevelOfIsolationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReadUncommittedContext : LevelOfIsolationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(SqlBaseParser.UNCOMMITTED, 0); }
		public ReadUncommittedContext(LevelOfIsolationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadUncommitted(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SerializableContext : LevelOfIsolationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(SqlBaseParser.SERIALIZABLE, 0); }
		public SerializableContext(LevelOfIsolationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerializable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadCommittedContext : LevelOfIsolationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(SqlBaseParser.COMMITTED, 0); }
		public ReadCommittedContext(LevelOfIsolationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadCommitted(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatableReadContext : LevelOfIsolationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(SqlBaseParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		public RepeatableReadContext(LevelOfIsolationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatableRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelOfIsolationContext levelOfIsolation() {
		LevelOfIsolationContext _localctx = new LevelOfIsolationContext(Context, State);
		EnterRule(_localctx, 190, RULE_levelOfIsolation);
		try {
			State = 2899;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
			case 1:
				_localctx = new ReadUncommittedContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2892;
				Match(READ);
				State = 2893;
				Match(UNCOMMITTED);
				}
				break;
			case 2:
				_localctx = new ReadCommittedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2894;
				Match(READ);
				State = 2895;
				Match(COMMITTED);
				}
				break;
			case 3:
				_localctx = new RepeatableReadContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2896;
				Match(REPEATABLE);
				State = 2897;
				Match(READ);
				}
				break;
			case 4:
				_localctx = new SerializableContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2898;
				Match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgumentContext : ParserRuleContext {
		public CallArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgument; } }
	 
		public CallArgumentContext() { }
		public virtual void CopyFrom(CallArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PositionalArgumentContext : CallArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositionalArgumentContext(CallArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionalArgument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedArgumentContext : CallArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NamedArgumentContext(CallArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgumentContext callArgument() {
		CallArgumentContext _localctx = new CallArgumentContext(Context, State);
		EnterRule(_localctx, 192, RULE_callArgument);
		try {
			State = 2906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				_localctx = new PositionalArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2901;
				expression();
				}
				break;
			case 2:
				_localctx = new NamedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2902;
				identifier();
				State = 2903;
				Match(T__5);
				State = 2904;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathElementContext : ParserRuleContext {
		public PathElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathElement; } }
	 
		public PathElementContext() { }
		public virtual void CopyFrom(PathElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedArgumentContext : PathElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public QualifiedArgumentContext(PathElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnqualifiedArgumentContext : PathElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UnqualifiedArgumentContext(PathElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualifiedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathElementContext pathElement() {
		PathElementContext _localctx = new PathElementContext(Context, State);
		EnterRule(_localctx, 194, RULE_pathElement);
		try {
			State = 2913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,389,Context) ) {
			case 1:
				_localctx = new QualifiedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2908;
				identifier();
				State = 2909;
				Match(T__0);
				State = 2910;
				identifier();
				}
				break;
			case 2:
				_localctx = new UnqualifiedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2912;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathElementContext[] pathElement() {
			return GetRuleContexts<PathElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathElementContext pathElement(int i) {
			return GetRuleContext<PathElementContext>(i);
		}
		public PathSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathSpecificationContext pathSpecification() {
		PathSpecificationContext _localctx = new PathSpecificationContext(Context, State);
		EnterRule(_localctx, 196, RULE_pathSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2915;
			pathElement();
			State = 2920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 2916;
				Match(T__3);
				State = 2917;
				pathElement();
				}
				}
				State = 2922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(SqlBaseParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SqlBaseParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SqlBaseParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(SqlBaseParser.UPDATE, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 198, RULE_privilege);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2923;
			_la = TokenStream.LA(1);
			if ( !(_la==CREATE || _la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 200, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2925;
			identifier();
			State = 2930;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,391,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2926;
					Match(T__0);
					State = 2927;
					identifier();
					}
					} 
				}
				State = 2932;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,391,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryPeriodContext : ParserRuleContext {
		public ValueExpressionContext end;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeTypeContext rangeType() {
			return GetRuleContext<RangeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(SqlBaseParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		public QueryPeriodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryPeriod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryPeriod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryPeriodContext queryPeriod() {
		QueryPeriodContext _localctx = new QueryPeriodContext(Context, State);
		EnterRule(_localctx, 202, RULE_queryPeriod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2933;
			Match(FOR);
			State = 2934;
			rangeType();
			State = 2935;
			Match(AS);
			State = 2936;
			Match(OF);
			State = 2937;
			_localctx.end = valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(SqlBaseParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(SqlBaseParser.VERSION, 0); }
		public RangeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeTypeContext rangeType() {
		RangeTypeContext _localctx = new RangeTypeContext(Context, State);
		EnterRule(_localctx, 204, RULE_rangeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2939;
			_la = TokenStream.LA(1);
			if ( !(_la==TIMESTAMP || _la==VERSION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantorContext : ParserRuleContext {
		public GrantorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantor; } }
	 
		public GrantorContext() { }
		public virtual void CopyFrom(GrantorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CurrentUserGrantorContext : GrantorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(SqlBaseParser.CURRENT_USER, 0); }
		public CurrentUserGrantorContext(GrantorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentUserGrantor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecifiedPrincipalContext : GrantorContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		public SpecifiedPrincipalContext(GrantorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecifiedPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentRoleGrantorContext : GrantorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(SqlBaseParser.CURRENT_ROLE, 0); }
		public CurrentRoleGrantorContext(GrantorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentRoleGrantor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantorContext grantor() {
		GrantorContext _localctx = new GrantorContext(Context, State);
		EnterRule(_localctx, 206, RULE_grantor);
		try {
			State = 2944;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSENT:
			case ADD:
			case ADMIN:
			case AFTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case AUTHORIZATION:
			case BERNOULLI:
			case BOTH:
			case CALL:
			case CASCADE:
			case CATALOG:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITIONAL:
			case COUNT:
			case COPARTITION:
			case CURRENT:
			case DATA:
			case DATE:
			case DAY:
			case DEFAULT:
			case DEFINE:
			case DEFINER:
			case DENY:
			case DESC:
			case DESCRIPTOR:
			case DISTRIBUTED:
			case DOUBLE:
			case EMPTY:
			case ENCODING:
			case ERROR:
			case EXCLUDING:
			case EXPLAIN:
			case FETCH:
			case FILTER:
			case FINAL:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTIONS:
			case GRACE:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case GROUPS:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INITIAL:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case KEEP:
			case KEY:
			case KEYS:
			case LAST:
			case LATERAL:
			case LEADING:
			case LEVEL:
			case LIMIT:
			case LOCAL:
			case LOGICAL:
			case MAP:
			case MATCH:
			case MATCHED:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MEASURES:
			case MERGE:
			case MINUTE:
			case MONTH:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case OVERFLOW:
			case PARTITION:
			case PARTITIONS:
			case PASSING:
			case PAST:
			case PATH:
			case PATTERN:
			case PER:
			case PERIOD:
			case PERMUTE:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PRIVILEGES:
			case PROPERTIES:
			case PRUNE:
			case QUOTES:
			case RANGE:
			case READ:
			case REFRESH:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURNING:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RUNNING:
			case SCALAR:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SEEK:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSET:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TEXT_STRING:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TRANSACTION:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case USE:
			case USER:
			case UTF16:
			case UTF32:
			case UTF8:
			case VALIDATE:
			case VALUE:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WINDOW:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case YEAR:
			case ZONE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				_localctx = new SpecifiedPrincipalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2941;
				principal();
				}
				break;
			case CURRENT_USER:
				_localctx = new CurrentUserGrantorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2942;
				Match(CURRENT_USER);
				}
				break;
			case CURRENT_ROLE:
				_localctx = new CurrentRoleGrantorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2943;
				Match(CURRENT_ROLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrincipalContext : ParserRuleContext {
		public PrincipalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal; } }
	 
		public PrincipalContext() { }
		public virtual void CopyFrom(PrincipalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnspecifiedPrincipalContext : PrincipalContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UnspecifiedPrincipalContext(PrincipalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnspecifiedPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UserPrincipalContext : PrincipalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(SqlBaseParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UserPrincipalContext(PrincipalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RolePrincipalContext : PrincipalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RolePrincipalContext(PrincipalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRolePrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrincipalContext principal() {
		PrincipalContext _localctx = new PrincipalContext(Context, State);
		EnterRule(_localctx, 208, RULE_principal);
		try {
			State = 2951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,393,Context) ) {
			case 1:
				_localctx = new UnspecifiedPrincipalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2946;
				identifier();
				}
				break;
			case 2:
				_localctx = new UserPrincipalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2947;
				Match(USER);
				State = 2948;
				identifier();
				}
				break;
			case 3:
				_localctx = new RolePrincipalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2949;
				Match(ROLE);
				State = 2950;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public RolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RolesContext roles() {
		RolesContext _localctx = new RolesContext(Context, State);
		EnterRule(_localctx, 210, RULE_roles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2953;
			identifier();
			State = 2958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 2954;
				Match(T__3);
				State = 2955;
				identifier();
				}
				}
				State = 2960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BackQuotedIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKQUOTED_IDENTIFIER() { return GetToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0); }
		public BackQuotedIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackQuotedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuotedIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(SqlBaseParser.QUOTED_IDENTIFIER, 0); }
		public QuotedIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DigitIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_IDENTIFIER() { return GetToken(SqlBaseParser.DIGIT_IDENTIFIER, 0); }
		public DigitIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDigitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnquotedIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SqlBaseParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonReservedContext nonReserved() {
			return GetRuleContext<NonReservedContext>(0);
		}
		public UnquotedIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquotedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 212, RULE_identifier);
		try {
			State = 2966;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new UnquotedIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2961;
				Match(IDENTIFIER);
				}
				break;
			case QUOTED_IDENTIFIER:
				_localctx = new QuotedIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2962;
				Match(QUOTED_IDENTIFIER);
				}
				break;
			case ABSENT:
			case ADD:
			case ADMIN:
			case AFTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case AUTHORIZATION:
			case BERNOULLI:
			case BOTH:
			case CALL:
			case CASCADE:
			case CATALOG:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITIONAL:
			case COUNT:
			case COPARTITION:
			case CURRENT:
			case DATA:
			case DATE:
			case DAY:
			case DEFAULT:
			case DEFINE:
			case DEFINER:
			case DENY:
			case DESC:
			case DESCRIPTOR:
			case DISTRIBUTED:
			case DOUBLE:
			case EMPTY:
			case ENCODING:
			case ERROR:
			case EXCLUDING:
			case EXPLAIN:
			case FETCH:
			case FILTER:
			case FINAL:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTIONS:
			case GRACE:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case GROUPS:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INITIAL:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case KEEP:
			case KEY:
			case KEYS:
			case LAST:
			case LATERAL:
			case LEADING:
			case LEVEL:
			case LIMIT:
			case LOCAL:
			case LOGICAL:
			case MAP:
			case MATCH:
			case MATCHED:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MEASURES:
			case MERGE:
			case MINUTE:
			case MONTH:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case OVERFLOW:
			case PARTITION:
			case PARTITIONS:
			case PASSING:
			case PAST:
			case PATH:
			case PATTERN:
			case PER:
			case PERIOD:
			case PERMUTE:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PRIVILEGES:
			case PROPERTIES:
			case PRUNE:
			case QUOTES:
			case RANGE:
			case READ:
			case REFRESH:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURNING:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RUNNING:
			case SCALAR:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SEEK:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSET:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TEXT_STRING:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TRANSACTION:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case USE:
			case USER:
			case UTF16:
			case UTF32:
			case UTF8:
			case VALIDATE:
			case VALUE:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WINDOW:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case YEAR:
			case ZONE:
				_localctx = new UnquotedIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2963;
				nonReserved();
				}
				break;
			case BACKQUOTED_IDENTIFIER:
				_localctx = new BackQuotedIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2964;
				Match(BACKQUOTED_IDENTIFIER);
				}
				break;
			case DIGIT_IDENTIFIER:
				_localctx = new DigitIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2965;
				Match(DIGIT_IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecimalLiteralContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_VALUE() { return GetToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlBaseParser.MINUS, 0); }
		public DecimalLiteralContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleLiteralContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_VALUE() { return GetToken(SqlBaseParser.DOUBLE_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlBaseParser.MINUS, 0); }
		public DoubleLiteralContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerLiteralContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(SqlBaseParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlBaseParser.MINUS, 0); }
		public IntegerLiteralContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 214, RULE_number);
		int _la;
		try {
			State = 2980;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,399,Context) ) {
			case 1:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 2968;
					Match(MINUS);
					}
				}

				State = 2971;
				Match(DECIMAL_VALUE);
				}
				break;
			case 2:
				_localctx = new DoubleLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 2972;
					Match(MINUS);
					}
				}

				State = 2975;
				Match(DOUBLE_VALUE);
				}
				break;
			case 3:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 2976;
					Match(MINUS);
					}
				}

				State = 2979;
				Match(INTEGER_VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonReservedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSENT() { return GetToken(SqlBaseParser.ABSENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SqlBaseParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(SqlBaseParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(SqlBaseParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(SqlBaseParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(SqlBaseParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SqlBaseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(SqlBaseParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SqlBaseParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(SqlBaseParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(SqlBaseParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(SqlBaseParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SqlBaseParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(SqlBaseParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(SqlBaseParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOGS() { return GetToken(SqlBaseParser.CATALOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(SqlBaseParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(SqlBaseParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(SqlBaseParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(SqlBaseParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPARTITION() { return GetToken(SqlBaseParser.COPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(SqlBaseParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SqlBaseParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(SqlBaseParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(SqlBaseParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(SqlBaseParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SqlBaseParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(SqlBaseParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(SqlBaseParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENY() { return GetToken(SqlBaseParser.DENY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SqlBaseParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTOR() { return GetToken(SqlBaseParser.DESCRIPTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTRIBUTED() { return GetToken(SqlBaseParser.DISTRIBUTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(SqlBaseParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(SqlBaseParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(SqlBaseParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(SqlBaseParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(SqlBaseParser.EXCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(SqlBaseParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(SqlBaseParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(SqlBaseParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(SqlBaseParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(SqlBaseParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(SqlBaseParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(SqlBaseParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(SqlBaseParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRACE() { return GetToken(SqlBaseParser.GRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(SqlBaseParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(SqlBaseParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(SqlBaseParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPHVIZ() { return GetToken(SqlBaseParser.GRAPHVIZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(SqlBaseParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(SqlBaseParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SqlBaseParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(SqlBaseParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL() { return GetToken(SqlBaseParser.INITIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SqlBaseParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(SqlBaseParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(SqlBaseParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(SqlBaseParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(SqlBaseParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(SqlBaseParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(SqlBaseParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(SqlBaseParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(SqlBaseParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(SqlBaseParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(SqlBaseParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(SqlBaseParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(SqlBaseParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(SqlBaseParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(SqlBaseParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL() { return GetToken(SqlBaseParser.LOGICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(SqlBaseParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(SqlBaseParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(SqlBaseParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(SqlBaseParser.MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE() { return GetToken(SqlBaseParser.MATCH_RECOGNIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(SqlBaseParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(SqlBaseParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(SqlBaseParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(SqlBaseParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(SqlBaseParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(SqlBaseParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(SqlBaseParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(SqlBaseParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(SqlBaseParser.NFKD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(SqlBaseParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(SqlBaseParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(SqlBaseParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(SqlBaseParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(SqlBaseParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(SqlBaseParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(SqlBaseParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(SqlBaseParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(SqlBaseParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(SqlBaseParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(SqlBaseParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(SqlBaseParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(SqlBaseParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERFLOW() { return GetToken(SqlBaseParser.OVERFLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SqlBaseParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(SqlBaseParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(SqlBaseParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(SqlBaseParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(SqlBaseParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(SqlBaseParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(SqlBaseParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(SqlBaseParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMUTE() { return GetToken(SqlBaseParser.PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(SqlBaseParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SqlBaseParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(SqlBaseParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(SqlBaseParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTIES() { return GetToken(SqlBaseParser.PROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRUNE() { return GetToken(SqlBaseParser.PRUNE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTES() { return GetToken(SqlBaseParser.QUOTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(SqlBaseParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(SqlBaseParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(SqlBaseParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SqlBaseParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(SqlBaseParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(SqlBaseParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(SqlBaseParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(SqlBaseParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(SqlBaseParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLES() { return GetToken(SqlBaseParser.ROLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SqlBaseParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(SqlBaseParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNNING() { return GetToken(SqlBaseParser.RUNNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALAR() { return GetToken(SqlBaseParser.SCALAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(SqlBaseParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(SqlBaseParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(SqlBaseParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEK() { return GetToken(SqlBaseParser.SEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(SqlBaseParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(SqlBaseParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(SqlBaseParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(SqlBaseParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(SqlBaseParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS() { return GetToken(SqlBaseParser.STATS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSET() { return GetToken(SqlBaseParser.SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(SqlBaseParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(SqlBaseParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(SqlBaseParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(SqlBaseParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(SqlBaseParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_STRING() { return GetToken(SqlBaseParser.TEXT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(SqlBaseParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(SqlBaseParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(SqlBaseParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(SqlBaseParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(SqlBaseParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(SqlBaseParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY_CAST() { return GetToken(SqlBaseParser.TRY_CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SqlBaseParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(SqlBaseParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(SqlBaseParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(SqlBaseParser.UNCONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(SqlBaseParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(SqlBaseParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMATCHED() { return GetToken(SqlBaseParser.UNMATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(SqlBaseParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(SqlBaseParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(SqlBaseParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16() { return GetToken(SqlBaseParser.UTF16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF32() { return GetToken(SqlBaseParser.UTF32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8() { return GetToken(SqlBaseParser.UTF8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(SqlBaseParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(SqlBaseParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(SqlBaseParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(SqlBaseParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(SqlBaseParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(SqlBaseParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(SqlBaseParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(SqlBaseParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(SqlBaseParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(SqlBaseParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(SqlBaseParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(SqlBaseParser.ZONE, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonReserved; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonReservedContext nonReserved() {
		NonReservedContext _localctx = new NonReservedContext(Context, State);
		EnterRule(_localctx, 216, RULE_nonReserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2982;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BERNOULLI) | (1L << BOTH) | (1L << CALL) | (1L << CASCADE) | (1L << CATALOG) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONDITIONAL) | (1L << COUNT) | (1L << COPARTITION) | (1L << CURRENT) | (1L << DATA))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DEFINER - 64)) | (1L << (DENY - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DISTRIBUTED - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (ENCODING - 64)) | (1L << (ERROR - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FETCH - 64)) | (1L << (FILTER - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRACE - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPS - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INITIAL - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (JSON - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LATERAL - 128)) | (1L << (LEADING - 128)) | (1L << (LEVEL - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOGICAL - 128)) | (1L << (MAP - 128)) | (1L << (MATCH - 128)) | (1L << (MATCHED - 128)) | (1L << (MATCHES - 128)) | (1L << (MATCH_RECOGNIZE - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MEASURES - 128)) | (1L << (MERGE - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (NEXT - 128)) | (1L << (NFC - 128)) | (1L << (NFD - 128)) | (1L << (NFKC - 128)) | (1L << (NFKD - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NULLIF - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (OMIT - 128)) | (1L << (ONE - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (OVERFLOW - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PASSING - 128)) | (1L << (PAST - 128)) | (1L << (PATH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (PATTERN - 192)) | (1L << (PER - 192)) | (1L << (PERIOD - 192)) | (1L << (PERMUTE - 192)) | (1L << (POSITION - 192)) | (1L << (PRECEDING - 192)) | (1L << (PRECISION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROPERTIES - 192)) | (1L << (PRUNE - 192)) | (1L << (QUOTES - 192)) | (1L << (RANGE - 192)) | (1L << (READ - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNING - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (RUNNING - 192)) | (1L << (SCALAR - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEEK - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SOME - 192)) | (1L << (START - 192)) | (1L << (STATS - 192)) | (1L << (SUBSET - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TEXT - 192)) | (1L << (TEXT_STRING - 192)) | (1L << (TIES - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TO - 192)) | (1L << (TRAILING - 192)) | (1L << (TRANSACTION - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNCONDITIONAL - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNMATCHED - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (UTF16 - 256)) | (1L << (UTF32 - 256)) | (1L << (UTF8 - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUE - 256)) | (1L << (VERBOSE - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (WINDOW - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return queryTerm_sempred((QueryTermContext)_localctx, predIndex);
		case 30: return relation_sempred((RelationContext)_localctx, predIndex);
		case 56: return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		case 58: return valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
		case 59: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		case 79: return type_sempred((TypeContext)_localctx, predIndex);
		case 89: return rowPattern_sempred((RowPatternContext)_localctx, predIndex);
		}
		return true;
	}
	private bool queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relation_sempred(RelationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		case 8: return Precpred(Context, 5);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 24);
		case 10: return Precpred(Context, 22);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 2);
		}
		return true;
	}
	private bool rowPattern_sempred(RowPatternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x141', '\xBAB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xF9', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x100', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x104', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x108', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x10E', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x112', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x119', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x11E', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x122', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x128', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x12C', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x141', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x145', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x149', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x14D', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x155', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x159', '\n', 
		'\a', '\x3', '\a', '\x5', '\a', '\x15C', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x163', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x16A', '\n', '\a', '\f', '\a', '\xE', '\a', '\x16D', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x172', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x176', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x17C', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x183', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x18C', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x198', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1A1', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1AA', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1B0', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1BB', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x1C3', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x1CB', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x1D2', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x1DC', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1E3', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x1EB', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x20D', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x210', '\v', '\a', '\x5', '\a', '\x212', '\n', '\a', '\x3', '\a', 
		'\x5', '\a', '\x215', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x219', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x21F', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x224', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x22B', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x231', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x235', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x239', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x241', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x247', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x24B', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x259', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x261', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x274', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x28B', 
		'\n', '\a', '\f', '\a', '\xE', '\a', '\x28E', '\v', '\a', '\x5', '\a', 
		'\x290', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x29A', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x29E', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x2A5', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x2AD', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x2B0', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x2B5', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x2BA', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x2BE', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x2C4', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x2CB', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x2CE', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x2D3', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x2D7', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x2DE', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x2E2', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x2E8', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x2EB', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x2EF', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x2F3', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x2FB', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x301', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x304', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x308', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x30C', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x316', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x31B', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x31E', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x322', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x326', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x330', '\n', 
		'\a', '\x3', '\a', '\x5', '\a', '\x333', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x33A', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x33D', '\v', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x341', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x347', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x35F', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x365', '\n', '\a', '\x5', '\a', '\x367', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x36D', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x373', 
		'\n', '\a', '\x5', '\a', '\x375', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x37D', 
		'\n', '\a', '\x5', '\a', '\x37F', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x385', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x38B', '\n', '\a', 
		'\x5', '\a', '\x38D', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x39C', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x3A1', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x3A8', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x3B4', '\n', '\a', '\x5', 
		'\a', '\x3B6', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x3BE', '\n', '\a', '\x5', 
		'\a', '\x3C0', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', '\x3D0', '\n', '\a', '\f', '\a', '\xE', '\a', '\x3D3', '\v', '\a', 
		'\x5', '\a', '\x3D5', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x3D9', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x3DD', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x3ED', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x3F0', '\v', '\a', '\x5', '\a', '\x3F2', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x402', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x40A', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x40D', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x411', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x417', '\n', '\a', '\x3', '\a', '\x5', '\a', '\x41A', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x6', 
		'\a', '\x421', '\n', '\a', '\r', '\a', '\xE', '\a', '\x422', '\x5', '\a', 
		'\x425', '\n', '\a', '\x3', '\b', '\x5', '\b', '\x428', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x42E', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x433', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x436', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\x43A', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x440', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x444', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\x448', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x44E', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		'\x457', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x45A', '\v', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x462', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x46A', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x46D', '\v', 
		'\x11', '\x5', '\x11', '\x46F', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x474', '\n', '\x11', '\x5', '\x11', '\x476', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x47D', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x483', '\n', '\x11', 
		'\x5', '\x11', '\x485', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x489', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x493', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x499', '\n', '\x14', '\x3', '\x14', 
		'\a', '\x14', '\x49C', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x49F', 
		'\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x4A8', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\x4AB', '\v', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x4B1', '\n', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x4B5', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x4B9', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x4BD', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x4C2', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\x4C5', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x4CB', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\x4CE', '\v', '\x17', '\x5', '\x17', '\x4D0', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x4D4', '\n', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x4D9', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x4DD', '\n', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\x4E3', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x4E6', '\v', 
		'\x17', '\x5', '\x17', '\x4E8', '\n', '\x17', '\x3', '\x18', '\x5', '\x18', 
		'\x4EB', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', 
		'\x18', '\x4F0', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x4F3', '\v', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\a', '\x19', '\x4FB', '\n', '\x19', '\f', '\x19', 
		'\xE', '\x19', '\x4FE', '\v', '\x19', '\x5', '\x19', '\x500', '\n', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\a', '\x19', '\x508', '\n', '\x19', '\f', '\x19', '\xE', 
		'\x19', '\x50B', '\v', '\x19', '\x5', '\x19', '\x50D', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\a', '\x19', '\x516', '\n', '\x19', '\f', '\x19', 
		'\xE', '\x19', '\x519', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x51D', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\a', '\x1A', '\x523', '\n', '\x1A', '\f', '\x1A', '\xE', 
		'\x1A', '\x526', '\v', '\x1A', '\x5', '\x1A', '\x528', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x52C', '\n', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x5', '\x1C', '\x535', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x53C', 
		'\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x53F', '\v', '\x1C', '\x5', 
		'\x1C', '\x541', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x548', '\n', '\x1C', '\f', 
		'\x1C', '\xE', '\x1C', '\x54B', '\v', '\x1C', '\x5', '\x1C', '\x54D', 
		'\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x550', '\n', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x554', '\n', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x55F', '\n', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x562', '\n', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x569', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x56C', '\n', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x57F', '\n', ' ', '\a', ' ', '\x581', '\n', ' ', '\f', ' ', '\xE', ' ', 
		'\x584', '\v', ' ', '\x3', '!', '\x5', '!', '\x587', '\n', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x58B', '\n', '!', '\x3', '!', '\x3', '!', 
		'\x5', '!', '\x58F', '\n', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x593', 
		'\n', '!', '\x5', '!', '\x595', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', 
		'\x59E', '\n', '\"', '\f', '\"', '\xE', '\"', '\x5A1', '\v', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x5A5', '\n', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x5AE', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x5B7', '\n', '&', '\x3', 
		'&', '\x5', '&', '\x5BA', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x5C0', '\n', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\a', '(', '\x5CA', '\n', '(', '\f', '(', '\xE', '(', '\x5CD', '\v', 
		'(', '\x5', '(', '\x5CF', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\a', '(', '\x5D6', '\n', '(', '\f', '(', '\xE', 
		'(', '\x5D9', '\v', '(', '\x5', '(', '\x5DB', '\n', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\a', '(', '\x5E1', '\n', '(', '\f', '(', 
		'\xE', '(', '\x5E4', '\v', '(', '\x5', '(', '\x5E6', '\n', '(', '\x3', 
		'(', '\x5', '(', '\x5E9', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x5EE', '\n', '(', '\x3', '(', '\x5', '(', '\x5F1', '\n', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\a', '(', '\x5FB', '\n', '(', '\f', '(', 
		'\xE', '(', '\x5FE', '\v', '(', '\x5', '(', '\x600', '\n', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x606', '\n', '(', 
		'\f', '(', '\xE', '(', '\x609', '\v', '(', '\x3', '(', '\x3', '(', '\x5', 
		'(', '\x60D', '\n', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x611', 
		'\n', '(', '\x5', '(', '\x613', '\n', '(', '\x5', '(', '\x615', '\n', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x5', '*', '\x624', '\n', '*', '\x5', '*', '\x626', 
		'\n', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x631', '\n', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x646', '\n', ',', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x64E', '\n', 
		'-', '\f', '-', '\xE', '-', '\x651', '\v', '-', '\x3', '-', '\x3', '-', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', 
		'\x5', '/', '\x65B', '\n', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x65F', 
		'\n', '/', '\x5', '/', '\x661', '\n', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x667', '\n', '\x30', '\f', 
		'\x30', '\xE', '\x30', '\x66A', '\v', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x670', '\n', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x67B', 
		'\n', '\x31', '\f', '\x31', '\xE', '\x31', '\x67E', '\v', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x683', '\n', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', 
		'\x693', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\a', '\x32', '\x69A', '\n', '\x32', '\f', '\x32', 
		'\xE', '\x32', '\x69D', '\v', '\x32', '\x5', '\x32', '\x69F', '\n', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', 
		'\x6A5', '\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x6A8', '\v', '\x32', 
		'\x5', '\x32', '\x6AA', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x6B1', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x6B6', '\n', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x6BF', '\n', '\x34', 
		'\f', '\x34', '\xE', '\x34', '\x6C2', '\v', '\x34', '\x5', '\x34', '\x6C4', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x6C8', '\n', 
		'\x34', '\x5', '\x34', '\x6CA', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', 
		'\x6D2', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x6DA', '\n', '\x34', 
		'\f', '\x34', '\xE', '\x34', '\x6DD', '\v', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x5', '\x34', '\x6E2', '\n', '\x34', '\x5', '\x34', 
		'\x6E4', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x6EB', '\n', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x5', '\x35', '\x6EF', '\n', '\x35', '\x5', '\x35', '\x6F1', 
		'\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x5', '\x35', '\x6F8', '\n', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x6FC', '\n', '\x35', '\x5', '\x35', '\x6FE', 
		'\n', '\x35', '\x5', '\x35', '\x700', '\n', '\x35', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x707', 
		'\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x70A', '\v', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x714', '\n', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x718', '\n', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\a', '\x38', '\x720', '\n', '\x38', '\f', '\x38', '\xE', '\x38', 
		'\x723', '\v', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', 
		'\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x72C', '\n', 
		':', '\x3', ':', '\x3', ':', '\x5', ':', '\x730', '\n', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\a', ':', 
		'\x738', '\n', ':', '\f', ':', '\xE', ':', '\x73B', '\v', ':', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x747', '\n', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x5', ';', '\x74F', '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\a', ';', '\x756', '\n', ';', '\f', ';', '\xE', ';', 
		'\x759', '\v', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x75E', 
		'\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x5', ';', '\x766', '\n', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x5', ';', '\x76C', '\n', ';', '\x3', ';', '\x3', ';', 
		'\x5', ';', '\x770', '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', 
		';', '\x775', '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', 
		'\x77A', '\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', 
		'<', '\x780', '\n', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\a', '<', '\x78E', '\n', '<', '\f', '<', '\xE', 
		'<', '\x791', '\v', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x6', '=', '\x7AC', '\n', '=', '\r', 
		'=', '\xE', '=', '\x7AD', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x7B7', '\n', '=', '\f', 
		'=', '\xE', '=', '\x7BA', '\v', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x5', '=', '\x7C1', '\n', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x5', '=', '\x7C6', '\n', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x5', '=', '\x7CB', '\n', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\a', '=', '\x7D6', '\n', '=', '\f', '=', '\xE', '=', '\x7D9', '\v', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x7DE', '\n', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', 
		'\x7E5', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x7EA', 
		'\n', '=', '\x3', '=', '\x5', '=', '\x7ED', '\n', '=', '\x3', '=', '\x5', 
		'=', '\x7F0', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', 
		'\x7F5', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x7FA', 
		'\n', '=', '\f', '=', '\xE', '=', '\x7FD', '\v', '=', '\x5', '=', '\x7FF', 
		'\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\a', '=', '\x806', '\n', '=', '\f', '=', '\xE', '=', '\x809', '\v', '=', 
		'\x5', '=', '\x80B', '\n', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x80F', 
		'\n', '=', '\x3', '=', '\x5', '=', '\x812', '\n', '=', '\x3', '=', '\x5', 
		'=', '\x815', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\a', '=', '\x822', '\n', '=', '\f', '=', '\xE', '=', '\x825', 
		'\v', '=', '\x5', '=', '\x827', '\n', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x6', '=', '\x838', '\n', '=', '\r', '=', '\xE', '=', '\x839', '\x3', 
		'=', '\x3', '=', '\x5', '=', '\x83E', '\n', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x6', '=', '\x844', '\n', '=', '\r', '=', '\xE', 
		'=', '\x845', '\x3', '=', '\x3', '=', '\x5', '=', '\x84A', '\n', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x861', '\n', '=', '\f', 
		'=', '\xE', '=', '\x864', '\v', '=', '\x5', '=', '\x866', '\n', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x5', '=', '\x86F', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x5', '=', '\x875', '\n', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x5', '=', '\x87B', '\n', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x5', '=', '\x881', '\n', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x88A', '\n', '=', '\x3', '=', '\x5', '=', '\x88D', '\n', '=', '\x3', 
		'=', '\x5', '=', '\x890', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x5', '=', '\x8A3', '\n', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x8AC', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\a', '=', '\x8C0', '\n', '=', '\f', '=', '\xE', 
		'=', '\x8C3', '\v', '=', '\x5', '=', '\x8C5', '\n', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x5', '=', '\x8CF', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x8D8', '\n', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x8DE', 
		'\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', 
		'\x8E4', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x8EF', 
		'\n', '=', '\x5', '=', '\x8F1', '\n', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x5', '=', '\x8F6', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x5', '=', '\x8FD', '\n', '=', '\x5', '=', '\x8FF', 
		'\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', 
		'\x905', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x90B', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x914', '\n', '=', '\f', 
		'=', '\xE', '=', '\x917', '\v', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x91F', '\n', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x5', '=', '\x924', '\n', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x5', '=', '\x929', '\n', '=', '\x5', '=', '\x92B', 
		'\n', '=', '\x5', '=', '\x92D', '\n', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x5', '=', '\x933', '\n', '=', '\x5', '=', '\x935', 
		'\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\a', '=', '\x93D', '\n', '=', '\f', '=', '\xE', '=', '\x940', 
		'\v', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x5', '=', '\x948', '\n', '=', '\x5', '=', '\x94A', '\n', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x950', 
		'\n', '=', '\x5', '=', '\x952', '\n', '=', '\x3', '=', '\x5', '=', '\x955', 
		'\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x95F', '\n', '=', '\f', 
		'=', '\xE', '=', '\x962', '\v', '=', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\a', '>', '\x96B', '\n', 
		'>', '\f', '>', '\xE', '>', '\x96E', '\v', '>', '\x5', '>', '\x970', '\n', 
		'>', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x975', '\n', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x97A', '\n', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', 
		'\x43', '\x986', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x98A', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x98E', 
		'\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x991', '\n', '\x44', '\x5', 
		'\x44', '\x993', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x99B', '\n', 
		'\x45', '\x3', '\x46', '\x5', '\x46', '\x99E', '\n', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x9A8', '\n', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 
		'H', '\x9B0', '\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x5', 'I', '\x9B6', '\n', 'I', '\x5', 'I', '\x9B8', '\n', 'I', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 
		'J', '\x9C0', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', 
		'\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x9CA', '\n', 
		'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x9D0', 
		'\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\a', 'Q', 
		'\x9DC', '\n', 'Q', '\f', 'Q', '\xE', 'Q', '\x9DF', '\v', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 
		'Q', '\x9E7', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x5', 'Q', '\x9EE', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x5', 'Q', '\x9F3', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x9FA', '\n', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x5', 'Q', '\xA04', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x5', 'Q', '\xA09', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x5', 'Q', '\xA10', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\a', 'Q', '\xA28', '\n', 'Q', '\f', 'Q', '\xE', 
		'Q', '\xA2B', '\v', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\xA2F', 
		'\n', 'Q', '\x5', 'Q', '\xA31', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\xA38', '\n', 'Q', '\a', 'Q', 
		'\xA3A', '\n', 'Q', '\f', 'Q', '\xE', 'Q', '\xA3D', '\v', 'Q', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\xA43', '\n', 'R', 
		'\x3', 'S', '\x3', 'S', '\x5', 'S', '\xA47', '\n', 'S', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x5', 'V', '\xA58', '\n', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\a', 'V', '\xA65', '\n', 'V', '\f', 
		'V', '\xE', 'V', '\xA68', '\v', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x5', 'V', '\xA6E', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\xA77', 
		'\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\a', 'V', '\xA7F', '\n', 'V', '\f', 'V', '\xE', 'V', '\xA82', 
		'\v', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\xA86', '\n', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\a', 'V', '\xA8D', 
		'\n', 'V', '\f', 'V', '\xE', 'V', '\xA90', '\v', 'V', '\x3', 'V', '\x3', 
		'V', '\x5', 'V', '\xA94', '\n', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\xA9C', '\n', 'W', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\a', 'X', '\xAA2', '\n', 'X', 
		'\f', 'X', '\xE', 'X', '\xAA5', '\v', 'X', '\x5', 'X', '\xAA7', '\n', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xAAD', 
		'\n', 'X', '\x3', 'X', '\x5', 'X', '\xAB0', '\n', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xAB7', '\n', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\a', 'X', '\xABD', '\n', 
		'X', '\f', 'X', '\xE', 'X', '\xAC0', '\v', 'X', '\x5', 'X', '\xAC2', '\n', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\a', 'X', '\xAC8', 
		'\n', 'X', '\f', 'X', '\xE', 'X', '\xACB', '\v', 'X', '\x5', 'X', '\xACD', 
		'\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x5', 'Y', '\xAE7', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x5', 'Z', '\xAF2', '\n', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', 
		'\x5', '[', '\xAF7', '\n', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\a', '[', '\xAFE', '\n', '[', '\f', '[', '\xE', '[', 
		'\xB01', '\v', '[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\a', '\\', '\xB0B', 
		'\n', '\\', '\f', '\\', '\xE', '\\', '\xB0E', '\v', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', 
		'\x5', '\\', '\xB1C', '\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', 
		'\xB20', '\n', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\xB24', '\n', 
		']', '\x3', ']', '\x3', ']', '\x5', ']', '\xB28', '\n', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\xB2E', '\n', ']', '\x3', 
		']', '\x3', ']', '\x5', ']', '\xB32', '\n', ']', '\x3', ']', '\x3', ']', 
		'\x5', ']', '\xB36', '\n', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\xB3A', 
		'\n', ']', '\x5', ']', '\xB3C', '\n', ']', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x5', 
		'_', '\xB46', '\n', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x5', '`', '\xB4D', '\n', '`', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\x5', '\x61', '\xB56', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\xB5D', '\n', '\x62', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x5', '\x63', '\xB64', '\n', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\a', '\x64', '\xB69', '\n', '\x64', '\f', '\x64', '\xE', '\x64', 
		'\xB6C', '\v', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\a', '\x66', '\xB73', '\n', '\x66', '\f', '\x66', 
		'\xE', '\x66', '\xB76', '\v', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'i', 
		'\x3', 'i', '\x3', 'i', '\x5', 'i', '\xB83', '\n', 'i', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\xB8A', '\n', 'j', 
		'\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 'k', '\xB8F', '\n', 'k', '\f', 
		'k', '\xE', 'k', '\xB92', '\v', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', 
		'\x3', 'l', '\x3', 'l', '\x5', 'l', '\xB99', '\n', 'l', '\x3', 'm', '\x5', 
		'm', '\xB9C', '\n', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\xBA0', 
		'\n', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\xBA4', '\n', 'm', '\x3', 
		'm', '\x5', 'm', '\xBA7', '\n', 'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', 
		'\x2', '\t', '&', '>', 'r', 'v', 'x', '\xA0', '\xB4', 'o', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', 
		'~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', 
		'\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', 
		'\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', 
		'\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', 
		'\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', 
		'\xDA', '\x2', '$', '\x4', '\x2', '\'', '\'', '\xD7', '\xD7', '\x4', '\x2', 
		'G', 'G', '}', '}', '\x4', '\x2', '\xE3', '\xE3', '\xF4', '\xF4', '\x4', 
		'\x2', '\x65', '\x65', 't', 't', '\x4', '\x2', 'X', 'X', 'u', 'u', '\x3', 
		'\x2', '\xDF', '\xE0', '\x4', '\x2', '\x61', '\x61', '\xA2', '\xA2', '\x4', 
		'\x2', '\x132', '\x132', '\x136', '\x136', '\x4', '\x2', 'W', 'W', '\x109', 
		'\x109', '\x4', '\x2', '\x1F', '\x1F', 'J', 'J', '\x4', '\x2', '\x61', 
		'\x61', '\x8B', '\x8B', '\x4', '\x2', '\x18', '\x18', 'M', 'M', '\x4', 
		'\x2', '\"', '\"', '\xF3', '\xF3', '\x5', '\x2', '$', '$', '\x8D', '\x8D', 
		'\xFE', '\xFE', '\x4', '\x2', 'v', 'v', '\xE7', '\xE7', '\x3', '\x2', 
		'\x12C', '\x12D', '\x3', '\x2', '\x12E', '\x130', '\x4', '\x2', '\x88', 
		'\x88', '\xB1', '\xB1', '\x3', '\x2', '\x112', '\x114', '\x6', '\x2', 
		'U', 'U', ']', ']', '\x101', '\x101', '\x10B', '\x10B', '\x4', '\x2', 
		'\x31', '\x31', '\x108', '\x108', '\x4', '\x2', '`', '`', '\xE1', '\xE1', 
		'\x3', '\x2', '\x126', '\x12B', '\x5', '\x2', '\x18', '\x18', '\x1C', 
		'\x1C', '\xEE', '\xEE', '\x4', '\x2', ']', ']', '\x101', '\x101', '\a', 
		'\x2', '\x43', '\x43', 'q', 'q', '\x9F', '\xA0', '\xE5', '\xE5', '\x124', 
		'\x124', '\x3', '\x2', '\xA3', '\xA6', '\x4', '\x2', '\x62', '\x62', '\xC7', 
		'\xC7', '\x5', '\x2', 'l', 'l', '\x82', '\x82', '\xF7', '\xF7', '\x6', 
		'\x2', 'N', 'N', '~', '~', '\x96', '\x96', '\x115', '\x115', '\x4', '\x2', 
		'\xB4', '\xB4', '\x123', '\x123', '\a', '\x2', '\x35', '\x35', 'H', 'H', 
		'y', 'y', '\xE8', '\xE8', '\x10E', '\x10E', '\x4', '\x2', '\xFC', '\xFC', 
		'\x119', '\x119', '\x38', '\x2', '\x14', '\x18', '\x1A', '\x1A', '\x1C', 
		'\x1D', '\x1F', '\"', '$', '$', '&', '\'', '*', '\x31', '\x33', '\x34', 
		'\x38', '\x38', '\x41', '\x43', '\x45', 'G', 'I', 'J', 'L', 'L', 'N', 
		'O', 'R', 'S', 'U', 'U', 'X', 'X', '[', '[', '^', '\x62', '\x64', '\x64', 
		'g', 'l', 'o', 'o', 'q', 's', 'u', 'v', 'x', 'x', '{', '{', '}', '~', 
		'\x80', '\x80', '\x82', '\x82', '\x88', '\x8D', '\x8F', '\x8F', '\x91', 
		'\x91', '\x93', '\x93', '\x96', '\xA0', '\xA2', '\xA8', '\xAC', '\xB1', 
		'\xB3', '\xB5', '\xB8', '\xB8', '\xBA', '\xC8', '\xCA', '\xCF', '\xD1', 
		'\xD9', '\xDB', '\xDD', '\xDF', '\xE7', '\xE9', '\xF3', '\xF5', '\xF8', 
		'\xFA', '\xFF', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', 
		'\x10E', '\x110', '\x112', '\x116', '\x118', '\x11A', '\x11D', '\x11D', 
		'\x11F', '\x125', '\x2', '\xD87', '\x2', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x6', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\xE5', '\x3', '\x2', '\x2', '\x2', '\n', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x424', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x427', '\x3', '\x2', '\x2', '\x2', '\x10', '\x42B', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x439', '\x3', '\x2', '\x2', '\x2', '\x14', '\x43B', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x449', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x453', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x461', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x463', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x488', '\x3', '\x2', '\x2', '\x2', '$', '\x48A', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x48C', '\x3', '\x2', '\x2', '\x2', '(', '\x4B0', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x4B2', '\x3', '\x2', '\x2', '\x2', 
		',', '\x4BA', '\x3', '\x2', '\x2', '\x2', '.', '\x4EA', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x51C', '\x3', '\x2', '\x2', '\x2', '\x32', '\x52B', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x52D', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x534', '\x3', '\x2', '\x2', '\x2', '\x38', '\x551', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x55A', '\x3', '\x2', '\x2', '\x2', '<', '\x56B', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x56D', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x594', '\x3', '\x2', '\x2', '\x2', '\x42', '\x5A4', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x46', '\x5AF', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x5B1', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x5B9', '\x3', '\x2', '\x2', '\x2', 'L', '\x5BF', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x5C1', '\x3', '\x2', '\x2', '\x2', 'P', '\x616', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x625', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x630', '\x3', '\x2', '\x2', '\x2', 'V', '\x645', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x647', '\x3', '\x2', '\x2', '\x2', 'Z', '\x654', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x658', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x662', '\x3', '\x2', '\x2', '\x2', '`', '\x692', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x694', '\x3', '\x2', '\x2', '\x2', '\x64', '\x6B0', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x6B7', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x6FF', '\x3', '\x2', '\x2', '\x2', 'j', '\x713', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x715', '\x3', '\x2', '\x2', '\x2', 'n', '\x719', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x726', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x72F', '\x3', '\x2', '\x2', '\x2', 't', '\x779', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x77F', '\x3', '\x2', '\x2', '\x2', 'x', '\x954', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x963', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x971', '\x3', '\x2', '\x2', '\x2', '~', '\x976', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x97B', '\x3', '\x2', '\x2', '\x2', '\x82', '\x97F', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x985', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x992', '\x3', '\x2', '\x2', '\x2', '\x88', '\x99A', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x9A7', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x9A9', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x9AF', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x9B7', '\x3', '\x2', '\x2', '\x2', '\x92', '\x9BF', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x9C1', '\x3', '\x2', '\x2', '\x2', '\x96', '\x9C3', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x9C5', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9C7', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D1', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9D3', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA30', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA42', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA46', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA48', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA4D', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA93', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xA95', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\xAA6', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE6', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xAF1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xAF3', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB1B', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB3B', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB3D', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xB45', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB4C', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xB55', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xB5C', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xB63', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xB65', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xB6D', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\xB6F', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xB77', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xB7D', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xB82', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xB89', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xB8B', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xB98', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xBA6', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xBA8', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', 
		'\x5', '\f', '\a', '\x2', '\xDD', '\xDE', '\a', '\x2', '\x2', '\x3', '\xDE', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x5', 'p', '\x39', 
		'\x2', '\xE0', '\xE1', '\a', '\x2', '\x2', '\x3', '\xE1', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x5', '\xC6', '\x64', '\x2', '\xE3', 
		'\xE4', '\a', '\x2', '\x2', '\x3', '\xE4', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x5', '\xA0', 'Q', '\x2', '\xE6', '\xE7', '\a', 
		'\x2', '\x2', '\x3', '\xE7', '\t', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x5', '\xB4', '[', '\x2', '\xE9', '\xEA', '\a', '\x2', '\x2', 
		'\x3', '\xEA', '\v', '\x3', '\x2', '\x2', '\x2', '\xEB', '\x425', '\x5', 
		'\xE', '\b', '\x2', '\xEC', '\xED', '\a', '\x10F', '\x2', '\x2', '\xED', 
		'\x425', '\x5', '\xD6', 'l', '\x2', '\xEE', '\xEF', '\a', '\x10F', '\x2', 
		'\x2', '\xEF', '\xF0', '\x5', '\xD6', 'l', '\x2', '\xF0', '\xF1', '\a', 
		'\x3', '\x2', '\x2', '\xF1', '\xF2', '\x5', '\xD6', 'l', '\x2', '\xF2', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', '\x35', '\x2', 
		'\x2', '\xF4', '\xF8', '\a', '*', '\x2', '\x2', '\xF5', '\xF6', '\a', 
		'r', '\x2', '\x2', '\xF6', '\xF7', '\a', '\xAA', '\x2', '\x2', '\xF7', 
		'\xF9', '\a', 'Z', '\x2', '\x2', '\xF8', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFB', '\x5', '\xD6', 'l', '\x2', '\xFB', 
		'\xFC', '\a', '\x111', '\x2', '\x2', '\xFC', '\xFF', '\x5', '\xD6', 'l', 
		'\x2', '\xFD', '\xFE', '\a', '.', '\x2', '\x2', '\xFE', '\x100', '\x5', 
		'\x90', 'I', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\x102', '\a', '!', '\x2', '\x2', '\x102', '\x104', '\x5', 
		'\xD2', 'j', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x106', '\a', '\x11E', '\x2', '\x2', '\x106', '\x108', 
		'\x5', '\x18', '\r', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\a', 'P', '\x2', '\x2', '\x10A', 
		'\x10D', '\a', '*', '\x2', '\x2', '\x10B', '\x10C', '\a', 'r', '\x2', 
		'\x2', '\x10C', '\x10E', '\a', 'Z', '\x2', '\x2', '\x10D', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\x5', '\xD6', 
		'l', '\x2', '\x110', '\x112', '\t', '\x2', '\x2', '\x2', '\x111', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x425', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\a', 
		'\x35', '\x2', '\x2', '\x114', '\x118', '\a', '\xE3', '\x2', '\x2', '\x115', 
		'\x116', '\a', 'r', '\x2', '\x2', '\x116', '\x117', '\a', '\xAA', '\x2', 
		'\x2', '\x117', '\x119', '\a', 'Z', '\x2', '\x2', '\x118', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11D', '\x5', '\xCA', 
		'\x66', '\x2', '\x11B', '\x11C', '\a', '!', '\x2', '\x2', '\x11C', '\x11E', 
		'\x5', '\xD2', 'j', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x120', '\a', '\x11E', '\x2', '\x2', '\x120', 
		'\x122', '\x5', '\x18', '\r', '\x2', '\x121', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '\x425', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', 'P', '\x2', '\x2', 
		'\x124', '\x127', '\a', '\xE3', '\x2', '\x2', '\x125', '\x126', '\a', 
		'r', '\x2', '\x2', '\x126', '\x128', '\a', 'Z', '\x2', '\x2', '\x127', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12B', 
		'\x5', '\xCA', '\x66', '\x2', '\x12A', '\x12C', '\t', '\x2', '\x2', '\x2', 
		'\x12B', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x425', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x12E', '\a', '\x19', '\x2', '\x2', '\x12E', '\x12F', '\a', '\xE3', '\x2', 
		'\x2', '\x12F', '\x130', '\x5', '\xCA', '\x66', '\x2', '\x130', '\x131', 
		'\a', '\xD2', '\x2', '\x2', '\x131', '\x132', '\a', '\xFD', '\x2', '\x2', 
		'\x132', '\x133', '\x5', '\xD6', 'l', '\x2', '\x133', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x135', '\a', '\x19', '\x2', '\x2', '\x135', 
		'\x136', '\a', '\xE3', '\x2', '\x2', '\x136', '\x137', '\x5', '\xCA', 
		'\x66', '\x2', '\x137', '\x138', '\a', '\xEB', '\x2', '\x2', '\x138', 
		'\x139', '\a', '!', '\x2', '\x2', '\x139', '\x13A', '\x5', '\xD2', 'j', 
		'\x2', '\x13A', '\x425', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', 
		'\a', '\x35', '\x2', '\x2', '\x13C', '\x140', '\a', '\xF4', '\x2', '\x2', 
		'\x13D', '\x13E', '\a', 'r', '\x2', '\x2', '\x13E', '\x13F', '\a', '\xAA', 
		'\x2', '\x2', '\x13F', '\x141', '\a', 'Z', '\x2', '\x2', '\x140', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x144', '\x5', 
		'\xCA', '\x66', '\x2', '\x143', '\x145', '\x5', '^', '\x30', '\x2', '\x144', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x148', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', 
		'\a', '.', '\x2', '\x2', '\x147', '\x149', '\x5', '\x90', 'I', '\x2', 
		'\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x14B', '\a', '\x11E', '\x2', '\x2', '\x14B', '\x14D', '\x5', '\x18', 
		'\r', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x154', '\a', '\x1E', '\x2', '\x2', '\x14F', '\x155', '\x5', 
		'\xE', '\b', '\x2', '\x150', '\x151', '\a', '\x4', '\x2', '\x2', '\x151', 
		'\x152', '\x5', '\xE', '\b', '\x2', '\x152', '\x153', '\a', '\x5', '\x2', 
		'\x2', '\x153', '\x155', '\x3', '\x2', '\x2', '\x2', '\x154', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x156', '\x158', '\a', 
		'\x11E', '\x2', '\x2', '\x157', '\x159', '\a', '\xA7', '\x2', '\x2', '\x158', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15C', 
		'\a', '\x41', '\x2', '\x2', '\x15B', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x15E', '\a', '\x35', '\x2', '\x2', '\x15E', 
		'\x162', '\a', '\xF4', '\x2', '\x2', '\x15F', '\x160', '\a', 'r', '\x2', 
		'\x2', '\x160', '\x161', '\a', '\xAA', '\x2', '\x2', '\x161', '\x163', 
		'\a', 'Z', '\x2', '\x2', '\x162', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x163', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x165', '\x5', '\xCA', '\x66', '\x2', '\x165', 
		'\x166', '\a', '\x4', '\x2', '\x2', '\x166', '\x16B', '\x5', '\x12', '\n', 
		'\x2', '\x167', '\x168', '\a', '\x6', '\x2', '\x2', '\x168', '\x16A', 
		'\x5', '\x12', '\n', '\x2', '\x169', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x16E', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x171', '\a', '\x5', '\x2', '\x2', '\x16F', '\x170', 
		'\a', '.', '\x2', '\x2', '\x170', '\x172', '\x5', '\x90', 'I', '\x2', 
		'\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x175', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x174', '\a', '\x11E', '\x2', '\x2', '\x174', '\x176', '\x5', '\x18', 
		'\r', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x178', '\a', 'P', '\x2', '\x2', '\x178', '\x17B', '\a', '\xF4', 
		'\x2', '\x2', '\x179', '\x17A', '\a', 'r', '\x2', '\x2', '\x17A', '\x17C', 
		'\a', 'Z', '\x2', '\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x425', '\x5', '\xCA', '\x66', '\x2', '\x17E', 
		'\x17F', '\a', 'y', '\x2', '\x2', '\x17F', '\x180', '\a', '|', '\x2', 
		'\x2', '\x180', '\x182', '\x5', '\xCA', '\x66', '\x2', '\x181', '\x183', 
		'\x5', '^', '\x30', '\x2', '\x182', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x185', '\x5', '\xE', '\b', '\x2', '\x185', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\a', 'H', '\x2', 
		'\x2', '\x187', '\x188', '\a', '\x65', '\x2', '\x2', '\x188', '\x18B', 
		'\x5', '\xCA', '\x66', '\x2', '\x189', '\x18A', '\a', '\x11C', '\x2', 
		'\x2', '\x18A', '\x18C', '\x5', 'r', ':', '\x2', '\x18B', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\a', '\x102', 
		'\x2', '\x2', '\x18E', '\x18F', '\a', '\xF4', '\x2', '\x2', '\x18F', '\x425', 
		'\x5', '\xCA', '\x66', '\x2', '\x190', '\x191', '\a', '.', '\x2', '\x2', 
		'\x191', '\x192', '\a', '\xB2', '\x2', '\x2', '\x192', '\x193', '\a', 
		'\xF4', '\x2', '\x2', '\x193', '\x194', '\x5', '\xCA', '\x66', '\x2', 
		'\x194', '\x197', '\a', '\x7F', '\x2', '\x2', '\x195', '\x198', '\x5', 
		'\x90', 'I', '\x2', '\x196', '\x198', '\a', '\xAB', '\x2', '\x2', '\x197', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x197', '\x196', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x425', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', 
		'\a', '.', '\x2', '\x2', '\x19A', '\x19B', '\a', '\xB2', '\x2', '\x2', 
		'\x19B', '\x19C', '\a', '\x11A', '\x2', '\x2', '\x19C', '\x19D', '\x5', 
		'\xCA', '\x66', '\x2', '\x19D', '\x1A0', '\a', '\x7F', '\x2', '\x2', '\x19E', 
		'\x1A1', '\x5', '\x90', 'I', '\x2', '\x19F', '\x1A1', '\a', '\xAB', '\x2', 
		'\x2', '\x1A0', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\a', '.', '\x2', '\x2', '\x1A3', '\x1A4', '\a', '\xB2', 
		'\x2', '\x2', '\x1A4', '\x1A5', '\a', ',', '\x2', '\x2', '\x1A5', '\x1A6', 
		'\x5', '\xCA', '\x66', '\x2', '\x1A6', '\x1A9', '\a', '\x7F', '\x2', '\x2', 
		'\x1A7', '\x1AA', '\x5', '\x90', 'I', '\x2', '\x1A8', '\x1AA', '\a', '\xAB', 
		'\x2', '\x2', '\x1A9', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1AC', '\a', '\x19', '\x2', '\x2', '\x1AC', '\x1AF', '\a', 
		'\xF4', '\x2', '\x2', '\x1AD', '\x1AE', '\a', 'r', '\x2', '\x2', '\x1AE', 
		'\x1B0', '\a', 'Z', '\x2', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1AF', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\x5', '\xCA', '\x66', '\x2', 
		'\x1B2', '\x1B3', '\a', '\xD2', '\x2', '\x2', '\x1B3', '\x1B4', '\a', 
		'\xFD', '\x2', '\x2', '\x1B4', '\x1B5', '\x5', '\xCA', '\x66', '\x2', 
		'\x1B5', '\x425', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\a', 
		'\x19', '\x2', '\x2', '\x1B7', '\x1BA', '\a', '\xF4', '\x2', '\x2', '\x1B8', 
		'\x1B9', '\a', 'r', '\x2', '\x2', '\x1B9', '\x1BB', '\a', 'Z', '\x2', 
		'\x2', '\x1BA', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x1BD', '\x5', '\xCA', '\x66', '\x2', '\x1BD', '\x1BE', '\a', 
		'\x15', '\x2', '\x2', '\x1BE', '\x1C2', '\a', ',', '\x2', '\x2', '\x1BF', 
		'\x1C0', '\a', 'r', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\xAA', '\x2', 
		'\x2', '\x1C1', '\x1C3', '\a', 'Z', '\x2', '\x2', '\x1C2', '\x1BF', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x5', '\x14', 
		'\v', '\x2', '\x1C5', '\x425', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', 
		'\a', '\x19', '\x2', '\x2', '\x1C7', '\x1CA', '\a', '\xF4', '\x2', '\x2', 
		'\x1C8', '\x1C9', '\a', 'r', '\x2', '\x2', '\x1C9', '\x1CB', '\a', 'Z', 
		'\x2', '\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC', '\x1CD', '\x5', '\xCA', '\x66', '\x2', '\x1CD', '\x1CE', '\a', 
		'\xD2', '\x2', '\x2', '\x1CE', '\x1D1', '\a', ',', '\x2', '\x2', '\x1CF', 
		'\x1D0', '\a', 'r', '\x2', '\x2', '\x1D0', '\x1D2', '\a', 'Z', '\x2', 
		'\x2', '\x1D1', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', 
		'\x1D3', '\x1D4', '\x5', '\xD6', 'l', '\x2', '\x1D4', '\x1D5', '\a', '\xFD', 
		'\x2', '\x2', '\x1D5', '\x1D6', '\x5', '\xD6', 'l', '\x2', '\x1D6', '\x425', 
		'\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\x19', '\x2', '\x2', 
		'\x1D8', '\x1DB', '\a', '\xF4', '\x2', '\x2', '\x1D9', '\x1DA', '\a', 
		'r', '\x2', '\x2', '\x1DA', '\x1DC', '\a', 'Z', '\x2', '\x2', '\x1DB', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\x5', '\xCA', '\x66', '\x2', '\x1DE', '\x1DF', '\a', 'P', '\x2', '\x2', 
		'\x1DF', '\x1E2', '\a', ',', '\x2', '\x2', '\x1E0', '\x1E1', '\a', 'r', 
		'\x2', '\x2', '\x1E1', '\x1E3', '\a', 'Z', '\x2', '\x2', '\x1E2', '\x1E0', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\x5', 
		'\xCA', '\x66', '\x2', '\x1E5', '\x425', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1E7', '\a', '\x19', '\x2', '\x2', '\x1E7', '\x1EA', '\a', '\xF4', '\x2', 
		'\x2', '\x1E8', '\x1E9', '\a', 'r', '\x2', '\x2', '\x1E9', '\x1EB', '\a', 
		'Z', '\x2', '\x2', '\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1ED', '\x5', '\xCA', '\x66', '\x2', '\x1ED', '\x1EE', 
		'\a', '\x19', '\x2', '\x2', '\x1EE', '\x1EF', '\a', ',', '\x2', '\x2', 
		'\x1EF', '\x1F0', '\x5', '\xD6', 'l', '\x2', '\x1F0', '\x1F1', '\a', '\xEB', 
		'\x2', '\x2', '\x1F1', '\x1F2', '\a', '\x41', '\x2', '\x2', '\x1F2', '\x1F3', 
		'\a', '\x104', '\x2', '\x2', '\x1F3', '\x1F4', '\x5', '\xA0', 'Q', '\x2', 
		'\x1F4', '\x425', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\a', 
		'\x19', '\x2', '\x2', '\x1F6', '\x1F7', '\a', '\xF4', '\x2', '\x2', '\x1F7', 
		'\x1F8', '\x5', '\xCA', '\x66', '\x2', '\x1F8', '\x1F9', '\a', '\xEB', 
		'\x2', '\x2', '\x1F9', '\x1FA', '\a', '!', '\x2', '\x2', '\x1FA', '\x1FB', 
		'\x5', '\xD2', 'j', '\x2', '\x1FB', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC', '\x1FD', '\a', '\x19', '\x2', '\x2', '\x1FD', '\x1FE', '\a', 
		'\xF4', '\x2', '\x2', '\x1FE', '\x1FF', '\x5', '\xCA', '\x66', '\x2', 
		'\x1FF', '\x200', '\a', '\xEB', '\x2', '\x2', '\x200', '\x201', '\a', 
		'\xCB', '\x2', '\x2', '\x201', '\x202', '\x5', '\x1A', '\xE', '\x2', '\x202', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\a', '\x19', '\x2', 
		'\x2', '\x204', '\x205', '\a', '\xF4', '\x2', '\x2', '\x205', '\x206', 
		'\x5', '\xCA', '\x66', '\x2', '\x206', '\x207', '\a', 'Y', '\x2', '\x2', 
		'\x207', '\x214', '\x5', '\xD6', 'l', '\x2', '\x208', '\x211', '\a', '\x4', 
		'\x2', '\x2', '\x209', '\x20E', '\x5', '\xC2', '\x62', '\x2', '\x20A', 
		'\x20B', '\a', '\x6', '\x2', '\x2', '\x20B', '\x20D', '\x5', '\xC2', '\x62', 
		'\x2', '\x20C', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x210', 
		'\x3', '\x2', '\x2', '\x2', '\x20E', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x209', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', '\x213', '\x215', 
		'\a', '\x5', '\x2', '\x2', '\x214', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x215', '\x3', '\x2', '\x2', '\x2', '\x215', '\x218', '\x3', 
		'\x2', '\x2', '\x2', '\x216', '\x217', '\a', '\x11C', '\x2', '\x2', '\x217', 
		'\x219', '\x5', 'r', ':', '\x2', '\x218', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x218', '\x219', '\x3', '\x2', '\x2', '\x2', '\x219', '\x425', 
		'\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\a', '\x1A', '\x2', '\x2', 
		'\x21B', '\x21E', '\x5', '\xCA', '\x66', '\x2', '\x21C', '\x21D', '\a', 
		'\x11E', '\x2', '\x2', '\x21D', '\x21F', '\x5', '\x18', '\r', '\x2', '\x21E', 
		'\x21C', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\x3', '\x2', '\x2', 
		'\x2', '\x21F', '\x425', '\x3', '\x2', '\x2', '\x2', '\x220', '\x223', 
		'\a', '\x35', '\x2', '\x2', '\x221', '\x222', '\a', '\xB6', '\x2', '\x2', 
		'\x222', '\x224', '\a', '\xD4', '\x2', '\x2', '\x223', '\x221', '\x3', 
		'\x2', '\x2', '\x2', '\x223', '\x224', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\a', '\x9C', '\x2', 
		'\x2', '\x226', '\x22A', '\a', '\x11A', '\x2', '\x2', '\x227', '\x228', 
		'\a', 'r', '\x2', '\x2', '\x228', '\x229', '\a', '\xAA', '\x2', '\x2', 
		'\x229', '\x22B', '\a', 'Z', '\x2', '\x2', '\x22A', '\x227', '\x3', '\x2', 
		'\x2', '\x2', '\x22A', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x230', '\x5', '\xCA', '\x66', '\x2', 
		'\x22D', '\x22E', '\a', 'h', '\x2', '\x2', '\x22E', '\x22F', '\a', '\xC4', 
		'\x2', '\x2', '\x22F', '\x231', '\x5', '\x9A', 'N', '\x2', '\x230', '\x22D', 
		'\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\x3', '\x2', '\x2', '\x2', 
		'\x231', '\x234', '\x3', '\x2', '\x2', '\x2', '\x232', '\x233', '\a', 
		'.', '\x2', '\x2', '\x233', '\x235', '\x5', '\x90', 'I', '\x2', '\x234', 
		'\x232', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x238', '\x3', '\x2', '\x2', '\x2', '\x236', '\x237', 
		'\a', '\x11E', '\x2', '\x2', '\x237', '\x239', '\x5', '\x18', '\r', '\x2', 
		'\x238', '\x236', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x23B', '\a', '\x1E', '\x2', '\x2', '\x23B', '\x23C', '\x5', '\xE', '\b', 
		'\x2', '\x23C', '\x425', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x240', 
		'\a', '\x35', '\x2', '\x2', '\x23E', '\x23F', '\a', '\xB6', '\x2', '\x2', 
		'\x23F', '\x241', '\a', '\xD4', '\x2', '\x2', '\x240', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x240', '\x241', '\x3', '\x2', '\x2', '\x2', '\x241', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\a', '\x11A', 
		'\x2', '\x2', '\x243', '\x246', '\x5', '\xCA', '\x66', '\x2', '\x244', 
		'\x245', '\a', '.', '\x2', '\x2', '\x245', '\x247', '\x5', '\x90', 'I', 
		'\x2', '\x246', '\x244', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x24A', '\x3', '\x2', '\x2', '\x2', 
		'\x248', '\x249', '\a', '\xE6', '\x2', '\x2', '\x249', '\x24B', '\t', 
		'\x3', '\x2', '\x2', '\x24A', '\x248', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x24B', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', '\x2', '\x2', 
		'\x2', '\x24C', '\x24D', '\a', '\x1E', '\x2', '\x2', '\x24D', '\x24E', 
		'\x5', '\xE', '\b', '\x2', '\x24E', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x24F', '\x250', '\a', '\xD1', '\x2', '\x2', '\x250', '\x251', '\a', 
		'\x9C', '\x2', '\x2', '\x251', '\x252', '\a', '\x11A', '\x2', '\x2', '\x252', 
		'\x425', '\x5', '\xCA', '\x66', '\x2', '\x253', '\x254', '\a', 'P', '\x2', 
		'\x2', '\x254', '\x255', '\a', '\x9C', '\x2', '\x2', '\x255', '\x258', 
		'\a', '\x11A', '\x2', '\x2', '\x256', '\x257', '\a', 'r', '\x2', '\x2', 
		'\x257', '\x259', '\a', 'Z', '\x2', '\x2', '\x258', '\x256', '\x3', '\x2', 
		'\x2', '\x2', '\x258', '\x259', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x25A', '\x425', '\x5', '\xCA', '\x66', '\x2', 
		'\x25B', '\x25C', '\a', '\x19', '\x2', '\x2', '\x25C', '\x25D', '\a', 
		'\x9C', '\x2', '\x2', '\x25D', '\x260', '\a', '\x11A', '\x2', '\x2', '\x25E', 
		'\x25F', '\a', 'r', '\x2', '\x2', '\x25F', '\x261', '\a', 'Z', '\x2', 
		'\x2', '\x260', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', 
		'\x3', '\x2', '\x2', '\x2', '\x261', '\x262', '\x3', '\x2', '\x2', '\x2', 
		'\x262', '\x263', '\x5', '\xCA', '\x66', '\x2', '\x263', '\x264', '\a', 
		'\xD2', '\x2', '\x2', '\x264', '\x265', '\a', '\xFD', '\x2', '\x2', '\x265', 
		'\x266', '\x5', '\xCA', '\x66', '\x2', '\x266', '\x425', '\x3', '\x2', 
		'\x2', '\x2', '\x267', '\x268', '\a', '\x19', '\x2', '\x2', '\x268', '\x269', 
		'\a', '\x9C', '\x2', '\x2', '\x269', '\x26A', '\a', '\x11A', '\x2', '\x2', 
		'\x26A', '\x26B', '\x5', '\xCA', '\x66', '\x2', '\x26B', '\x26C', '\a', 
		'\xEB', '\x2', '\x2', '\x26C', '\x26D', '\a', '\xCB', '\x2', '\x2', '\x26D', 
		'\x26E', '\x5', '\x1A', '\xE', '\x2', '\x26E', '\x425', '\x3', '\x2', 
		'\x2', '\x2', '\x26F', '\x270', '\a', 'P', '\x2', '\x2', '\x270', '\x273', 
		'\a', '\x11A', '\x2', '\x2', '\x271', '\x272', '\a', 'r', '\x2', '\x2', 
		'\x272', '\x274', '\a', 'Z', '\x2', '\x2', '\x273', '\x271', '\x3', '\x2', 
		'\x2', '\x2', '\x273', '\x274', '\x3', '\x2', '\x2', '\x2', '\x274', '\x275', 
		'\x3', '\x2', '\x2', '\x2', '\x275', '\x425', '\x5', '\xCA', '\x66', '\x2', 
		'\x276', '\x277', '\a', '\x19', '\x2', '\x2', '\x277', '\x278', '\a', 
		'\x11A', '\x2', '\x2', '\x278', '\x279', '\x5', '\xCA', '\x66', '\x2', 
		'\x279', '\x27A', '\a', '\xD2', '\x2', '\x2', '\x27A', '\x27B', '\a', 
		'\xFD', '\x2', '\x2', '\x27B', '\x27C', '\x5', '\xCA', '\x66', '\x2', 
		'\x27C', '\x425', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', '\a', 
		'\x19', '\x2', '\x2', '\x27E', '\x27F', '\a', '\x11A', '\x2', '\x2', '\x27F', 
		'\x280', '\x5', '\xCA', '\x66', '\x2', '\x280', '\x281', '\a', '\xEB', 
		'\x2', '\x2', '\x281', '\x282', '\a', '!', '\x2', '\x2', '\x282', '\x283', 
		'\x5', '\xD2', 'j', '\x2', '\x283', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x284', '\x285', '\a', '&', '\x2', '\x2', '\x285', '\x286', '\x5', '\xCA', 
		'\x66', '\x2', '\x286', '\x28F', '\a', '\x4', '\x2', '\x2', '\x287', '\x28C', 
		'\x5', '\xC2', '\x62', '\x2', '\x288', '\x289', '\a', '\x6', '\x2', '\x2', 
		'\x289', '\x28B', '\x5', '\xC2', '\x62', '\x2', '\x28A', '\x288', '\x3', 
		'\x2', '\x2', '\x2', '\x28B', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x28C', 
		'\x28A', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', 
		'\x2', '\x28D', '\x290', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28C', 
		'\x3', '\x2', '\x2', '\x2', '\x28F', '\x287', '\x3', '\x2', '\x2', '\x2', 
		'\x28F', '\x290', '\x3', '\x2', '\x2', '\x2', '\x290', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x291', '\x292', '\a', '\x5', '\x2', '\x2', '\x292', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x293', '\x294', '\a', '\x35', '\x2', 
		'\x2', '\x294', '\x295', '\a', '\xDB', '\x2', '\x2', '\x295', '\x299', 
		'\x5', '\xD6', 'l', '\x2', '\x296', '\x297', '\a', '\x11E', '\x2', '\x2', 
		'\x297', '\x298', '\a', '\x16', '\x2', '\x2', '\x298', '\x29A', '\x5', 
		'\xD0', 'i', '\x2', '\x299', '\x296', '\x3', '\x2', '\x2', '\x2', '\x299', 
		'\x29A', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29D', '\x3', '\x2', '\x2', 
		'\x2', '\x29B', '\x29C', '\a', 't', '\x2', '\x2', '\x29C', '\x29E', '\x5', 
		'\xD6', 'l', '\x2', '\x29D', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29D', 
		'\x29E', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x425', '\x3', '\x2', '\x2', 
		'\x2', '\x29F', '\x2A0', '\a', 'P', '\x2', '\x2', '\x2A0', '\x2A1', '\a', 
		'\xDB', '\x2', '\x2', '\x2A1', '\x2A4', '\x5', '\xD6', 'l', '\x2', '\x2A2', 
		'\x2A3', '\a', 't', '\x2', '\x2', '\x2A3', '\x2A5', '\x5', '\xD6', 'l', 
		'\x2', '\x2A4', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x2A6', '\x2A7', '\a', 'i', '\x2', '\x2', '\x2A7', '\x2A8', '\x5', '\xD4', 
		'k', '\x2', '\x2A8', '\x2A9', '\a', '\xFD', '\x2', '\x2', '\x2A9', '\x2AE', 
		'\x5', '\xD2', 'j', '\x2', '\x2AA', '\x2AB', '\a', '\x6', '\x2', '\x2', 
		'\x2AB', '\x2AD', '\x5', '\xD2', 'j', '\x2', '\x2AC', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x2AD', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2AE', 
		'\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\x3', '\x2', '\x2', 
		'\x2', '\x2AF', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2AE', 
		'\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\a', '\x11E', '\x2', '\x2', 
		'\x2B2', '\x2B3', '\a', '\x16', '\x2', '\x2', '\x2B3', '\x2B5', '\a', 
		'\xB5', '\x2', '\x2', '\x2B4', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B4', 
		'\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B9', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x2B7', '\a', 'j', '\x2', '\x2', '\x2B7', '\x2B8', '\a', 
		'%', '\x2', '\x2', '\x2B8', '\x2BA', '\x5', '\xD0', 'i', '\x2', '\x2B9', 
		'\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BA', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', 
		'\a', 't', '\x2', '\x2', '\x2BC', '\x2BE', '\x5', '\xD6', 'l', '\x2', 
		'\x2BD', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BE', '\x3', 
		'\x2', '\x2', '\x2', '\x2BE', '\x425', '\x3', '\x2', '\x2', '\x2', '\x2BF', 
		'\x2C3', '\a', '\xD9', '\x2', '\x2', '\x2C0', '\x2C1', '\a', '\x16', '\x2', 
		'\x2', '\x2C1', '\x2C2', '\a', '\xB5', '\x2', '\x2', '\x2C2', '\x2C4', 
		'\a', '\x63', '\x2', '\x2', '\x2C3', '\x2C0', '\x3', '\x2', '\x2', '\x2', 
		'\x2C3', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\x2C6', '\x5', '\xD4', 'k', '\x2', '\x2C6', 
		'\x2C7', '\a', '\x65', '\x2', '\x2', '\x2C7', '\x2CC', '\x5', '\xD2', 
		'j', '\x2', '\x2C8', '\x2C9', '\a', '\x6', '\x2', '\x2', '\x2C9', '\x2CB', 
		'\x5', '\xD2', 'j', '\x2', '\x2CA', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x2CB', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CA', '\x3', 
		'\x2', '\x2', '\x2', '\x2CC', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CC', '\x3', '\x2', '\x2', 
		'\x2', '\x2CF', '\x2D0', '\a', 'j', '\x2', '\x2', '\x2D0', '\x2D1', '\a', 
		'%', '\x2', '\x2', '\x2D1', '\x2D3', '\x5', '\xD0', 'i', '\x2', '\x2D2', 
		'\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D3', '\x3', '\x2', '\x2', 
		'\x2', '\x2D3', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D5', 
		'\a', 't', '\x2', '\x2', '\x2D5', '\x2D7', '\x5', '\xD6', 'l', '\x2', 
		'\x2D6', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D7', '\x3', 
		'\x2', '\x2', '\x2', '\x2D7', '\x425', '\x3', '\x2', '\x2', '\x2', '\x2D8', 
		'\x2D9', '\a', '\xEB', '\x2', '\x2', '\x2D9', '\x2DD', '\a', '\xDB', '\x2', 
		'\x2', '\x2DA', '\x2DE', '\a', '\x18', '\x2', '\x2', '\x2DB', '\x2DE', 
		'\a', '\xA8', '\x2', '\x2', '\x2DC', '\x2DE', '\x5', '\xD6', 'l', '\x2', 
		'\x2DD', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DB', '\x3', 
		'\x2', '\x2', '\x2', '\x2DD', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\a', 't', '\x2', 
		'\x2', '\x2E0', '\x2E2', '\x5', '\xD6', 'l', '\x2', '\x2E1', '\x2DF', 
		'\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', '\x3', '\x2', '\x2', '\x2', 
		'\x2E2', '\x425', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2EE', '\a', 
		'i', '\x2', '\x2', '\x2E4', '\x2E9', '\x5', '\xC8', '\x65', '\x2', '\x2E5', 
		'\x2E6', '\a', '\x6', '\x2', '\x2', '\x2E6', '\x2E8', '\x5', '\xC8', '\x65', 
		'\x2', '\x2E7', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2EB', 
		'\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2E7', '\x3', '\x2', '\x2', '\x2', 
		'\x2E9', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EF', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2EC', 
		'\x2ED', '\a', '\x18', '\x2', '\x2', '\x2ED', '\x2EF', '\a', '\xCA', '\x2', 
		'\x2', '\x2EE', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EC', 
		'\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F0', '\x3', '\x2', '\x2', '\x2', 
		'\x2F0', '\x2F2', '\a', '\xB2', '\x2', '\x2', '\x2F1', '\x2F3', '\t', 
		'\x4', '\x2', '\x2', '\x2F2', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F4', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '\x2F5', '\x5', '\xCA', '\x66', '\x2', '\x2F5', '\x2F6', 
		'\a', '\xFD', '\x2', '\x2', '\x2F6', '\x2FA', '\x5', '\xD2', 'j', '\x2', 
		'\x2F7', '\x2F8', '\a', '\x11E', '\x2', '\x2', '\x2F8', '\x2F9', '\a', 
		'i', '\x2', '\x2', '\x2F9', '\x2FB', '\a', '\xB5', '\x2', '\x2', '\x2FA', 
		'\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FB', '\x3', '\x2', '\x2', 
		'\x2', '\x2FB', '\x425', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x307', 
		'\a', 'I', '\x2', '\x2', '\x2FD', '\x302', '\x5', '\xC8', '\x65', '\x2', 
		'\x2FE', '\x2FF', '\a', '\x6', '\x2', '\x2', '\x2FF', '\x301', '\x5', 
		'\xC8', '\x65', '\x2', '\x300', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x301', 
		'\x304', '\x3', '\x2', '\x2', '\x2', '\x302', '\x300', '\x3', '\x2', '\x2', 
		'\x2', '\x302', '\x303', '\x3', '\x2', '\x2', '\x2', '\x303', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x304', '\x302', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x306', '\a', '\x18', '\x2', '\x2', '\x306', '\x308', '\a', 
		'\xCA', '\x2', '\x2', '\x307', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x307', 
		'\x305', '\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\x3', '\x2', '\x2', 
		'\x2', '\x309', '\x30B', '\a', '\xB2', '\x2', '\x2', '\x30A', '\x30C', 
		'\t', '\x4', '\x2', '\x2', '\x30B', '\x30A', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x30D', '\x3', 
		'\x2', '\x2', '\x2', '\x30D', '\x30E', '\x5', '\xCA', '\x66', '\x2', '\x30E', 
		'\x30F', '\a', '\xFD', '\x2', '\x2', '\x30F', '\x310', '\x5', '\xD2', 
		'j', '\x2', '\x310', '\x425', '\x3', '\x2', '\x2', '\x2', '\x311', '\x315', 
		'\a', '\xD9', '\x2', '\x2', '\x312', '\x313', '\a', 'i', '\x2', '\x2', 
		'\x313', '\x314', '\a', '\xB5', '\x2', '\x2', '\x314', '\x316', '\a', 
		'\x63', '\x2', '\x2', '\x315', '\x312', '\x3', '\x2', '\x2', '\x2', '\x315', 
		'\x316', '\x3', '\x2', '\x2', '\x2', '\x316', '\x321', '\x3', '\x2', '\x2', 
		'\x2', '\x317', '\x31C', '\x5', '\xC8', '\x65', '\x2', '\x318', '\x319', 
		'\a', '\x6', '\x2', '\x2', '\x319', '\x31B', '\x5', '\xC8', '\x65', '\x2', 
		'\x31A', '\x318', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31E', '\x3', 
		'\x2', '\x2', '\x2', '\x31C', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x31C', 
		'\x31D', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x322', '\x3', '\x2', '\x2', 
		'\x2', '\x31E', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x320', 
		'\a', '\x18', '\x2', '\x2', '\x320', '\x322', '\a', '\xCA', '\x2', '\x2', 
		'\x321', '\x317', '\x3', '\x2', '\x2', '\x2', '\x321', '\x31F', '\x3', 
		'\x2', '\x2', '\x2', '\x322', '\x323', '\x3', '\x2', '\x2', '\x2', '\x323', 
		'\x325', '\a', '\xB2', '\x2', '\x2', '\x324', '\x326', '\t', '\x4', '\x2', 
		'\x2', '\x325', '\x324', '\x3', '\x2', '\x2', '\x2', '\x325', '\x326', 
		'\x3', '\x2', '\x2', '\x2', '\x326', '\x327', '\x3', '\x2', '\x2', '\x2', 
		'\x327', '\x328', '\x5', '\xCA', '\x66', '\x2', '\x328', '\x329', '\a', 
		'\x65', '\x2', '\x2', '\x329', '\x32A', '\x5', '\xD2', 'j', '\x2', '\x32A', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', '\a', '\xED', '\x2', 
		'\x2', '\x32C', '\x332', '\a', 'k', '\x2', '\x2', '\x32D', '\x32F', '\a', 
		'\xB2', '\x2', '\x2', '\x32E', '\x330', '\a', '\xF4', '\x2', '\x2', '\x32F', 
		'\x32E', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x330', '\x3', '\x2', '\x2', 
		'\x2', '\x330', '\x331', '\x3', '\x2', '\x2', '\x2', '\x331', '\x333', 
		'\x5', '\xCA', '\x66', '\x2', '\x332', '\x32D', '\x3', '\x2', '\x2', '\x2', 
		'\x332', '\x333', '\x3', '\x2', '\x2', '\x2', '\x333', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x334', '\x340', '\a', '[', '\x2', '\x2', '\x335', 
		'\x336', '\a', '\x4', '\x2', '\x2', '\x336', '\x33B', '\x5', '\xBC', '_', 
		'\x2', '\x337', '\x338', '\a', '\x6', '\x2', '\x2', '\x338', '\x33A', 
		'\x5', '\xBC', '_', '\x2', '\x339', '\x337', '\x3', '\x2', '\x2', '\x2', 
		'\x33A', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x339', '\x3', 
		'\x2', '\x2', '\x2', '\x33B', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x33E', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x33B', '\x3', '\x2', '\x2', 
		'\x2', '\x33E', '\x33F', '\a', '\x5', '\x2', '\x2', '\x33F', '\x341', 
		'\x3', '\x2', '\x2', '\x2', '\x340', '\x335', '\x3', '\x2', '\x2', '\x2', 
		'\x340', '\x341', '\x3', '\x2', '\x2', '\x2', '\x341', '\x342', '\x3', 
		'\x2', '\x2', '\x2', '\x342', '\x425', '\x5', '\f', '\a', '\x2', '\x343', 
		'\x344', '\a', '[', '\x2', '\x2', '\x344', '\x346', '\a', '\x1A', '\x2', 
		'\x2', '\x345', '\x347', '\a', '\x118', '\x2', '\x2', '\x346', '\x345', 
		'\x3', '\x2', '\x2', '\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', 
		'\x347', '\x348', '\x3', '\x2', '\x2', '\x2', '\x348', '\x425', '\x5', 
		'\f', '\a', '\x2', '\x349', '\x34A', '\a', '\xED', '\x2', '\x2', '\x34A', 
		'\x34B', '\a', '\x35', '\x2', '\x2', '\x34B', '\x34C', '\a', '\xF4', '\x2', 
		'\x2', '\x34C', '\x425', '\x5', '\xCA', '\x66', '\x2', '\x34D', '\x34E', 
		'\a', '\xED', '\x2', '\x2', '\x34E', '\x34F', '\a', '\x35', '\x2', '\x2', 
		'\x34F', '\x350', '\a', '\xE3', '\x2', '\x2', '\x350', '\x425', '\x5', 
		'\xCA', '\x66', '\x2', '\x351', '\x352', '\a', '\xED', '\x2', '\x2', '\x352', 
		'\x353', '\a', '\x35', '\x2', '\x2', '\x353', '\x354', '\a', '\x11A', 
		'\x2', '\x2', '\x354', '\x425', '\x5', '\xCA', '\x66', '\x2', '\x355', 
		'\x356', '\a', '\xED', '\x2', '\x2', '\x356', '\x357', '\a', '\x35', '\x2', 
		'\x2', '\x357', '\x358', '\a', '\x9C', '\x2', '\x2', '\x358', '\x359', 
		'\a', '\x11A', '\x2', '\x2', '\x359', '\x425', '\x5', '\xCA', '\x66', 
		'\x2', '\x35A', '\x35B', '\a', '\xED', '\x2', '\x2', '\x35B', '\x35E', 
		'\a', '\xF5', '\x2', '\x2', '\x35C', '\x35D', '\t', '\x5', '\x2', '\x2', 
		'\x35D', '\x35F', '\x5', '\xCA', '\x66', '\x2', '\x35E', '\x35C', '\x3', 
		'\x2', '\x2', '\x2', '\x35E', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x35F', 
		'\x366', '\x3', '\x2', '\x2', '\x2', '\x360', '\x361', '\a', '\x90', '\x2', 
		'\x2', '\x361', '\x364', '\x5', '\x90', 'I', '\x2', '\x362', '\x363', 
		'\a', 'V', '\x2', '\x2', '\x363', '\x365', '\x5', '\x90', 'I', '\x2', 
		'\x364', '\x362', '\x3', '\x2', '\x2', '\x2', '\x364', '\x365', '\x3', 
		'\x2', '\x2', '\x2', '\x365', '\x367', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x360', '\x3', '\x2', '\x2', '\x2', '\x366', '\x367', '\x3', '\x2', '\x2', 
		'\x2', '\x367', '\x425', '\x3', '\x2', '\x2', '\x2', '\x368', '\x369', 
		'\a', '\xED', '\x2', '\x2', '\x369', '\x36C', '\a', '\xE4', '\x2', '\x2', 
		'\x36A', '\x36B', '\t', '\x5', '\x2', '\x2', '\x36B', '\x36D', '\x5', 
		'\xD6', 'l', '\x2', '\x36C', '\x36A', '\x3', '\x2', '\x2', '\x2', '\x36C', 
		'\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x374', '\x3', '\x2', '\x2', 
		'\x2', '\x36E', '\x36F', '\a', '\x90', '\x2', '\x2', '\x36F', '\x372', 
		'\x5', '\x90', 'I', '\x2', '\x370', '\x371', '\a', 'V', '\x2', '\x2', 
		'\x371', '\x373', '\x5', '\x90', 'I', '\x2', '\x372', '\x370', '\x3', 
		'\x2', '\x2', '\x2', '\x372', '\x373', '\x3', '\x2', '\x2', '\x2', '\x373', 
		'\x375', '\x3', '\x2', '\x2', '\x2', '\x374', '\x36E', '\x3', '\x2', '\x2', 
		'\x2', '\x374', '\x375', '\x3', '\x2', '\x2', '\x2', '\x375', '\x425', 
		'\x3', '\x2', '\x2', '\x2', '\x376', '\x377', '\a', '\xED', '\x2', '\x2', 
		'\x377', '\x37E', '\a', '+', '\x2', '\x2', '\x378', '\x379', '\a', '\x90', 
		'\x2', '\x2', '\x379', '\x37C', '\x5', '\x90', 'I', '\x2', '\x37A', '\x37B', 
		'\a', 'V', '\x2', '\x2', '\x37B', '\x37D', '\x5', '\x90', 'I', '\x2', 
		'\x37C', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x37D', '\x3', 
		'\x2', '\x2', '\x2', '\x37D', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x37E', 
		'\x378', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37F', '\x3', '\x2', '\x2', 
		'\x2', '\x37F', '\x425', '\x3', '\x2', '\x2', '\x2', '\x380', '\x381', 
		'\a', '\xED', '\x2', '\x2', '\x381', '\x382', '\a', '-', '\x2', '\x2', 
		'\x382', '\x384', '\t', '\x5', '\x2', '\x2', '\x383', '\x385', '\x5', 
		'\xCA', '\x66', '\x2', '\x384', '\x383', '\x3', '\x2', '\x2', '\x2', '\x384', 
		'\x385', '\x3', '\x2', '\x2', '\x2', '\x385', '\x38C', '\x3', '\x2', '\x2', 
		'\x2', '\x386', '\x387', '\a', '\x90', '\x2', '\x2', '\x387', '\x38A', 
		'\x5', '\x90', 'I', '\x2', '\x388', '\x389', '\a', 'V', '\x2', '\x2', 
		'\x389', '\x38B', '\x5', '\x90', 'I', '\x2', '\x38A', '\x388', '\x3', 
		'\x2', '\x2', '\x2', '\x38A', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x38D', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x386', '\x3', '\x2', '\x2', 
		'\x2', '\x38C', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x38D', '\x425', 
		'\x3', '\x2', '\x2', '\x2', '\x38E', '\x38F', '\a', '\xED', '\x2', '\x2', 
		'\x38F', '\x390', '\a', '\xF0', '\x2', '\x2', '\x390', '\x391', '\a', 
		'\x63', '\x2', '\x2', '\x391', '\x425', '\x5', '\xCA', '\x66', '\x2', 
		'\x392', '\x393', '\a', '\xED', '\x2', '\x2', '\x393', '\x394', '\a', 
		'\xF0', '\x2', '\x2', '\x394', '\x395', '\a', '\x63', '\x2', '\x2', '\x395', 
		'\x396', '\a', '\x4', '\x2', '\x2', '\x396', '\x397', '\x5', '\xE', '\b', 
		'\x2', '\x397', '\x398', '\a', '\x5', '\x2', '\x2', '\x398', '\x425', 
		'\x3', '\x2', '\x2', '\x2', '\x399', '\x39B', '\a', '\xED', '\x2', '\x2', 
		'\x39A', '\x39C', '\a', '\x38', '\x2', '\x2', '\x39B', '\x39A', '\x3', 
		'\x2', '\x2', '\x2', '\x39B', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39C', 
		'\x39D', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x3A0', '\a', '\xDC', '\x2', 
		'\x2', '\x39E', '\x39F', '\t', '\x5', '\x2', '\x2', '\x39F', '\x3A1', 
		'\x5', '\xD6', 'l', '\x2', '\x3A0', '\x39E', '\x3', '\x2', '\x2', '\x2', 
		'\x3A0', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x3A2', '\x3A3', '\a', '\xED', '\x2', '\x2', '\x3A3', 
		'\x3A4', '\a', '\xDB', '\x2', '\x2', '\x3A4', '\x3A7', '\a', 'k', '\x2', 
		'\x2', '\x3A5', '\x3A6', '\t', '\x5', '\x2', '\x2', '\x3A6', '\x3A8', 
		'\x5', '\xD6', 'l', '\x2', '\x3A7', '\x3A5', '\x3', '\x2', '\x2', '\x2', 
		'\x3A7', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\a', 'K', '\x2', '\x2', '\x3AA', 
		'\x425', '\x5', '\xCA', '\x66', '\x2', '\x3AB', '\x3AC', '\a', 'J', '\x2', 
		'\x2', '\x3AC', '\x425', '\x5', '\xCA', '\x66', '\x2', '\x3AD', '\x3AE', 
		'\a', '\xED', '\x2', '\x2', '\x3AE', '\x3B5', '\a', 'g', '\x2', '\x2', 
		'\x3AF', '\x3B0', '\a', '\x90', '\x2', '\x2', '\x3B0', '\x3B3', '\x5', 
		'\x90', 'I', '\x2', '\x3B1', '\x3B2', '\a', 'V', '\x2', '\x2', '\x3B2', 
		'\x3B4', '\x5', '\x90', 'I', '\x2', '\x3B3', '\x3B1', '\x3', '\x2', '\x2', 
		'\x2', '\x3B3', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B6', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3AF', '\x3', '\x2', '\x2', '\x2', 
		'\x3B5', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x3B7', '\x3B8', '\a', '\xED', '\x2', '\x2', '\x3B8', 
		'\x3BF', '\a', '\xEA', '\x2', '\x2', '\x3B9', '\x3BA', '\a', '\x90', '\x2', 
		'\x2', '\x3BA', '\x3BD', '\x5', '\x90', 'I', '\x2', '\x3BB', '\x3BC', 
		'\a', 'V', '\x2', '\x2', '\x3BC', '\x3BE', '\x5', '\x90', 'I', '\x2', 
		'\x3BD', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BE', '\x3', 
		'\x2', '\x2', '\x2', '\x3BE', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3BF', 
		'\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C0', '\x3', '\x2', '\x2', 
		'\x2', '\x3C0', '\x425', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C2', 
		'\a', '\xEB', '\x2', '\x2', '\x3C2', '\x3C3', '\a', '\xEA', '\x2', '\x2', 
		'\x3C3', '\x3C4', '\x5', '\xCA', '\x66', '\x2', '\x3C4', '\x3C5', '\a', 
		'\x126', '\x2', '\x2', '\x3C5', '\x3C6', '\x5', 'p', '\x39', '\x2', '\x3C6', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x3C7', '\x3C8', '\a', '\xD5', '\x2', 
		'\x2', '\x3C8', '\x3C9', '\a', '\xEA', '\x2', '\x2', '\x3C9', '\x425', 
		'\x5', '\xCA', '\x66', '\x2', '\x3CA', '\x3CB', '\a', '\xEF', '\x2', '\x2', 
		'\x3CB', '\x3D4', '\a', '\xFF', '\x2', '\x2', '\x3CC', '\x3D1', '\x5', 
		'\xBE', '`', '\x2', '\x3CD', '\x3CE', '\a', '\x6', '\x2', '\x2', '\x3CE', 
		'\x3D0', '\x5', '\xBE', '`', '\x2', '\x3CF', '\x3CD', '\x3', '\x2', '\x2', 
		'\x2', '\x3D0', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3CF', 
		'\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', 
		'\x3D2', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D1', '\x3', 
		'\x2', '\x2', '\x2', '\x3D4', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3D4', 
		'\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x425', '\x3', '\x2', '\x2', 
		'\x2', '\x3D6', '\x3D8', '\a', '/', '\x2', '\x2', '\x3D7', '\x3D9', '\a', 
		'\x121', '\x2', '\x2', '\x3D8', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D8', 
		'\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3D9', '\x425', '\x3', '\x2', '\x2', 
		'\x2', '\x3DA', '\x3DC', '\a', '\xDD', '\x2', '\x2', '\x3DB', '\x3DD', 
		'\a', '\x121', '\x2', '\x2', '\x3DC', '\x3DB', '\x3', '\x2', '\x2', '\x2', 
		'\x3DC', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3DD', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x3DE', '\x3DF', '\a', '\xC9', '\x2', '\x2', '\x3DF', 
		'\x3E0', '\x5', '\xD6', 'l', '\x2', '\x3E0', '\x3E1', '\a', '\x65', '\x2', 
		'\x2', '\x3E1', '\x3E2', '\x5', '\f', '\a', '\x2', '\x3E2', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x3E3', '\x3E4', '\a', '\x44', '\x2', '\x2', '\x3E4', 
		'\x3E5', '\a', '\xC9', '\x2', '\x2', '\x3E5', '\x425', '\x5', '\xD6', 
		'l', '\x2', '\x3E6', '\x3E7', '\a', 'Y', '\x2', '\x2', '\x3E7', '\x3F1', 
		'\x5', '\xD6', 'l', '\x2', '\x3E8', '\x3E9', '\a', '\x111', '\x2', '\x2', 
		'\x3E9', '\x3EE', '\x5', 'p', '\x39', '\x2', '\x3EA', '\x3EB', '\a', '\x6', 
		'\x2', '\x2', '\x3EB', '\x3ED', '\x5', 'p', '\x39', '\x2', '\x3EC', '\x3EA', 
		'\x3', '\x2', '\x2', '\x2', '\x3ED', '\x3F0', '\x3', '\x2', '\x2', '\x2', 
		'\x3EE', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EF', '\x3', 
		'\x2', '\x2', '\x2', '\x3EF', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3F0', 
		'\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3E8', '\x3', '\x2', '\x2', 
		'\x2', '\x3F1', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x425', 
		'\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\a', 'K', '\x2', '\x2', 
		'\x3F4', '\x3F5', '\a', 'x', '\x2', '\x2', '\x3F5', '\x425', '\x5', '\xD6', 
		'l', '\x2', '\x3F6', '\x3F7', '\a', 'K', '\x2', '\x2', '\x3F7', '\x3F8', 
		'\a', '\xBA', '\x2', '\x2', '\x3F8', '\x425', '\x5', '\xD6', 'l', '\x2', 
		'\x3F9', '\x3FA', '\a', '\xEB', '\x2', '\x2', '\x3FA', '\x3FB', '\a', 
		'\xC1', '\x2', '\x2', '\x3FB', '\x425', '\x5', '\xC6', '\x64', '\x2', 
		'\x3FC', '\x3FD', '\a', '\xEB', '\x2', '\x2', '\x3FD', '\x3FE', '\a', 
		'\xFB', '\x2', '\x2', '\x3FE', '\x401', '\a', '\x125', '\x2', '\x2', '\x3FF', 
		'\x402', '\a', '\x93', '\x2', '\x2', '\x400', '\x402', '\x5', 'p', '\x39', 
		'\x2', '\x401', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x401', '\x400', 
		'\x3', '\x2', '\x2', '\x2', '\x402', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x403', '\x404', '\a', '\x10E', '\x2', '\x2', '\x404', '\x405', '\x5', 
		'\xCA', '\x66', '\x2', '\x405', '\x406', '\a', '\xEB', '\x2', '\x2', '\x406', 
		'\x40B', '\x5', '\xBA', '^', '\x2', '\x407', '\x408', '\a', '\x6', '\x2', 
		'\x2', '\x408', '\x40A', '\x5', '\xBA', '^', '\x2', '\x409', '\x407', 
		'\x3', '\x2', '\x2', '\x2', '\x40A', '\x40D', '\x3', '\x2', '\x2', '\x2', 
		'\x40B', '\x409', '\x3', '\x2', '\x2', '\x2', '\x40B', '\x40C', '\x3', 
		'\x2', '\x2', '\x2', '\x40C', '\x410', '\x3', '\x2', '\x2', '\x2', '\x40D', 
		'\x40B', '\x3', '\x2', '\x2', '\x2', '\x40E', '\x40F', '\a', '\x11C', 
		'\x2', '\x2', '\x40F', '\x411', '\x5', 'r', ':', '\x2', '\x410', '\x40E', 
		'\x3', '\x2', '\x2', '\x2', '\x410', '\x411', '\x3', '\x2', '\x2', '\x2', 
		'\x411', '\x425', '\x3', '\x2', '\x2', '\x2', '\x412', '\x413', '\a', 
		'\x9E', '\x2', '\x2', '\x413', '\x414', '\a', '|', '\x2', '\x2', '\x414', 
		'\x419', '\x5', '\xCA', '\x66', '\x2', '\x415', '\x417', '\a', '\x1E', 
		'\x2', '\x2', '\x416', '\x415', '\x3', '\x2', '\x2', '\x2', '\x416', '\x417', 
		'\x3', '\x2', '\x2', '\x2', '\x417', '\x418', '\x3', '\x2', '\x2', '\x2', 
		'\x418', '\x41A', '\x5', '\xD6', 'l', '\x2', '\x419', '\x416', '\x3', 
		'\x2', '\x2', '\x2', '\x419', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x41A', 
		'\x41B', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x41C', '\a', '\x111', 
		'\x2', '\x2', '\x41C', '\x41D', '\x5', '>', ' ', '\x2', '\x41D', '\x41E', 
		'\a', '\xB2', '\x2', '\x2', '\x41E', '\x420', '\x5', 'p', '\x39', '\x2', 
		'\x41F', '\x421', '\x5', '\xAA', 'V', '\x2', '\x420', '\x41F', '\x3', 
		'\x2', '\x2', '\x2', '\x421', '\x422', '\x3', '\x2', '\x2', '\x2', '\x422', 
		'\x420', '\x3', '\x2', '\x2', '\x2', '\x422', '\x423', '\x3', '\x2', '\x2', 
		'\x2', '\x423', '\x425', '\x3', '\x2', '\x2', '\x2', '\x424', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x424', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\x424', '\x109', '\x3', '\x2', '\x2', '\x2', '\x424', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x424', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\x424', '\x177', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x424', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x190', '\x3', '\x2', '\x2', '\x2', '\x424', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x424', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x424', '\x1D7', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x424', '\x1FC', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x203', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x21A', '\x3', '\x2', '\x2', '\x2', '\x424', '\x220', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x424', '\x24F', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x253', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x424', '\x267', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x276', '\x3', '\x2', '\x2', '\x2', '\x424', '\x27D', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x284', '\x3', '\x2', '\x2', '\x2', '\x424', '\x293', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x424', '\x2BF', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x2E3', '\x3', '\x2', '\x2', '\x2', '\x424', '\x2FC', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x311', '\x3', '\x2', '\x2', '\x2', '\x424', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x334', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x343', '\x3', '\x2', '\x2', '\x2', '\x424', '\x349', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x351', '\x3', '\x2', '\x2', '\x2', '\x424', '\x355', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x424', '\x368', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x376', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x380', '\x3', '\x2', '\x2', '\x2', '\x424', '\x38E', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x392', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x399', '\x3', '\x2', '\x2', '\x2', '\x424', '\x3A2', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x424', '\x3AB', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x3AD', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x424', '\x3C1', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x3CA', '\x3', '\x2', '\x2', '\x2', '\x424', '\x3D6', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x3DA', '\x3', '\x2', '\x2', '\x2', '\x424', '\x3DE', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x3E6', '\x3', '\x2', '\x2', '\x2', '\x424', '\x3F3', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x3F9', '\x3', '\x2', '\x2', '\x2', '\x424', '\x3FC', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x403', '\x3', '\x2', '\x2', '\x2', '\x424', '\x412', 
		'\x3', '\x2', '\x2', '\x2', '\x425', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x426', '\x428', '\x5', '\x10', '\t', '\x2', '\x427', '\x426', '\x3', 
		'\x2', '\x2', '\x2', '\x427', '\x428', '\x3', '\x2', '\x2', '\x2', '\x428', 
		'\x429', '\x3', '\x2', '\x2', '\x2', '\x429', '\x42A', '\x5', ' ', '\x11', 
		'\x2', '\x42A', '\xF', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x42D', '\a', 
		'\x11E', '\x2', '\x2', '\x42C', '\x42E', '\a', '\xD0', '\x2', '\x2', '\x42D', 
		'\x42C', '\x3', '\x2', '\x2', '\x2', '\x42D', '\x42E', '\x3', '\x2', '\x2', 
		'\x2', '\x42E', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x42F', '\x434', 
		'\x5', '\x38', '\x1D', '\x2', '\x430', '\x431', '\a', '\x6', '\x2', '\x2', 
		'\x431', '\x433', '\x5', '\x38', '\x1D', '\x2', '\x432', '\x430', '\x3', 
		'\x2', '\x2', '\x2', '\x433', '\x436', '\x3', '\x2', '\x2', '\x2', '\x434', 
		'\x432', '\x3', '\x2', '\x2', '\x2', '\x434', '\x435', '\x3', '\x2', '\x2', 
		'\x2', '\x435', '\x11', '\x3', '\x2', '\x2', '\x2', '\x436', '\x434', 
		'\x3', '\x2', '\x2', '\x2', '\x437', '\x43A', '\x5', '\x14', '\v', '\x2', 
		'\x438', '\x43A', '\x5', '\x16', '\f', '\x2', '\x439', '\x437', '\x3', 
		'\x2', '\x2', '\x2', '\x439', '\x438', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x43C', '\x5', '\xD6', 'l', 
		'\x2', '\x43C', '\x43F', '\x5', '\xA0', 'Q', '\x2', '\x43D', '\x43E', 
		'\a', '\xAA', '\x2', '\x2', '\x43E', '\x440', '\a', '\xAB', '\x2', '\x2', 
		'\x43F', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x43F', '\x440', '\x3', 
		'\x2', '\x2', '\x2', '\x440', '\x443', '\x3', '\x2', '\x2', '\x2', '\x441', 
		'\x442', '\a', '.', '\x2', '\x2', '\x442', '\x444', '\x5', '\x90', 'I', 
		'\x2', '\x443', '\x441', '\x3', '\x2', '\x2', '\x2', '\x443', '\x444', 
		'\x3', '\x2', '\x2', '\x2', '\x444', '\x447', '\x3', '\x2', '\x2', '\x2', 
		'\x445', '\x446', '\a', '\x11E', '\x2', '\x2', '\x446', '\x448', '\x5', 
		'\x18', '\r', '\x2', '\x447', '\x445', '\x3', '\x2', '\x2', '\x2', '\x447', 
		'\x448', '\x3', '\x2', '\x2', '\x2', '\x448', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x449', '\x44A', '\a', '\x90', '\x2', '\x2', '\x44A', '\x44D', 
		'\x5', '\xCA', '\x66', '\x2', '\x44B', '\x44C', '\t', '\x6', '\x2', '\x2', 
		'\x44C', '\x44E', '\a', '\xCB', '\x2', '\x2', '\x44D', '\x44B', '\x3', 
		'\x2', '\x2', '\x2', '\x44D', '\x44E', '\x3', '\x2', '\x2', '\x2', '\x44E', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x44F', '\x450', '\a', '\x4', '\x2', 
		'\x2', '\x450', '\x451', '\x5', '\x1A', '\xE', '\x2', '\x451', '\x452', 
		'\a', '\x5', '\x2', '\x2', '\x452', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x453', '\x458', '\x5', '\x1C', '\xF', '\x2', '\x454', '\x455', '\a', 
		'\x6', '\x2', '\x2', '\x455', '\x457', '\x5', '\x1C', '\xF', '\x2', '\x456', 
		'\x454', '\x3', '\x2', '\x2', '\x2', '\x457', '\x45A', '\x3', '\x2', '\x2', 
		'\x2', '\x458', '\x456', '\x3', '\x2', '\x2', '\x2', '\x458', '\x459', 
		'\x3', '\x2', '\x2', '\x2', '\x459', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x45A', '\x458', '\x3', '\x2', '\x2', '\x2', '\x45B', '\x45C', '\x5', 
		'\xD6', 'l', '\x2', '\x45C', '\x45D', '\a', '\x126', '\x2', '\x2', '\x45D', 
		'\x45E', '\x5', '\x1E', '\x10', '\x2', '\x45E', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x45F', '\x462', '\a', '\x45', '\x2', '\x2', '\x460', '\x462', 
		'\x5', 'p', '\x39', '\x2', '\x461', '\x45F', '\x3', '\x2', '\x2', '\x2', 
		'\x461', '\x460', '\x3', '\x2', '\x2', '\x2', '\x462', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x463', '\x46E', '\x5', '&', '\x14', '\x2', '\x464', 
		'\x465', '\a', '\xB7', '\x2', '\x2', '\x465', '\x466', '\a', '%', '\x2', 
		'\x2', '\x466', '\x46B', '\x5', '*', '\x16', '\x2', '\x467', '\x468', 
		'\a', '\x6', '\x2', '\x2', '\x468', '\x46A', '\x5', '*', '\x16', '\x2', 
		'\x469', '\x467', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x46D', '\x3', 
		'\x2', '\x2', '\x2', '\x46B', '\x469', '\x3', '\x2', '\x2', '\x2', '\x46B', 
		'\x46C', '\x3', '\x2', '\x2', '\x2', '\x46C', '\x46F', '\x3', '\x2', '\x2', 
		'\x2', '\x46D', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x464', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x46F', '\x3', '\x2', '\x2', '\x2', 
		'\x46F', '\x475', '\x3', '\x2', '\x2', '\x2', '\x470', '\x471', '\a', 
		'\xB0', '\x2', '\x2', '\x471', '\x473', '\x5', '$', '\x13', '\x2', '\x472', 
		'\x474', '\t', '\a', '\x2', '\x2', '\x473', '\x472', '\x3', '\x2', '\x2', 
		'\x2', '\x473', '\x474', '\x3', '\x2', '\x2', '\x2', '\x474', '\x476', 
		'\x3', '\x2', '\x2', '\x2', '\x475', '\x470', '\x3', '\x2', '\x2', '\x2', 
		'\x475', '\x476', '\x3', '\x2', '\x2', '\x2', '\x476', '\x484', '\x3', 
		'\x2', '\x2', '\x2', '\x477', '\x478', '\a', '\x91', '\x2', '\x2', '\x478', 
		'\x485', '\x5', '\"', '\x12', '\x2', '\x479', '\x47A', '\a', '^', '\x2', 
		'\x2', '\x47A', '\x47C', '\t', '\b', '\x2', '\x2', '\x47B', '\x47D', '\x5', 
		'$', '\x13', '\x2', '\x47C', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x47C', 
		'\x47D', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47E', '\x3', '\x2', '\x2', 
		'\x2', '\x47E', '\x482', '\t', '\a', '\x2', '\x2', '\x47F', '\x483', '\a', 
		'\xB4', '\x2', '\x2', '\x480', '\x481', '\a', '\x11E', '\x2', '\x2', '\x481', 
		'\x483', '\a', '\xFA', '\x2', '\x2', '\x482', '\x47F', '\x3', '\x2', '\x2', 
		'\x2', '\x482', '\x480', '\x3', '\x2', '\x2', '\x2', '\x483', '\x485', 
		'\x3', '\x2', '\x2', '\x2', '\x484', '\x477', '\x3', '\x2', '\x2', '\x2', 
		'\x484', '\x479', '\x3', '\x2', '\x2', '\x2', '\x484', '\x485', '\x3', 
		'\x2', '\x2', '\x2', '\x485', '!', '\x3', '\x2', '\x2', '\x2', '\x486', 
		'\x489', '\a', '\x18', '\x2', '\x2', '\x487', '\x489', '\x5', '$', '\x13', 
		'\x2', '\x488', '\x486', '\x3', '\x2', '\x2', '\x2', '\x488', '\x487', 
		'\x3', '\x2', '\x2', '\x2', '\x489', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x48A', '\x48B', '\t', '\t', '\x2', '\x2', '\x48B', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x48C', '\x48D', '\b', '\x14', '\x1', '\x2', '\x48D', '\x48E', 
		'\x5', '(', '\x15', '\x2', '\x48E', '\x49D', '\x3', '\x2', '\x2', '\x2', 
		'\x48F', '\x490', '\f', '\x4', '\x2', '\x2', '\x490', '\x492', '\a', 'z', 
		'\x2', '\x2', '\x491', '\x493', '\x5', ':', '\x1E', '\x2', '\x492', '\x491', 
		'\x3', '\x2', '\x2', '\x2', '\x492', '\x493', '\x3', '\x2', '\x2', '\x2', 
		'\x493', '\x494', '\x3', '\x2', '\x2', '\x2', '\x494', '\x49C', '\x5', 
		'&', '\x14', '\x5', '\x495', '\x496', '\f', '\x3', '\x2', '\x2', '\x496', 
		'\x498', '\t', '\n', '\x2', '\x2', '\x497', '\x499', '\x5', ':', '\x1E', 
		'\x2', '\x498', '\x497', '\x3', '\x2', '\x2', '\x2', '\x498', '\x499', 
		'\x3', '\x2', '\x2', '\x2', '\x499', '\x49A', '\x3', '\x2', '\x2', '\x2', 
		'\x49A', '\x49C', '\x5', '&', '\x14', '\x4', '\x49B', '\x48F', '\x3', 
		'\x2', '\x2', '\x2', '\x49B', '\x495', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x49F', '\x3', '\x2', '\x2', '\x2', '\x49D', '\x49B', '\x3', '\x2', '\x2', 
		'\x2', '\x49D', '\x49E', '\x3', '\x2', '\x2', '\x2', '\x49E', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x49F', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x4A0', 
		'\x4B1', '\x5', ',', '\x17', '\x2', '\x4A1', '\x4A2', '\a', '\xF4', '\x2', 
		'\x2', '\x4A2', '\x4B1', '\x5', '\xCA', '\x66', '\x2', '\x4A3', '\x4A4', 
		'\a', '\x117', '\x2', '\x2', '\x4A4', '\x4A9', '\x5', 'p', '\x39', '\x2', 
		'\x4A5', '\x4A6', '\a', '\x6', '\x2', '\x2', '\x4A6', '\x4A8', '\x5', 
		'p', '\x39', '\x2', '\x4A7', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A8', 
		'\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4A7', '\x3', '\x2', '\x2', 
		'\x2', '\x4A9', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4B1', 
		'\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4A9', '\x3', '\x2', '\x2', '\x2', 
		'\x4AC', '\x4AD', '\a', '\x4', '\x2', '\x2', '\x4AD', '\x4AE', '\x5', 
		' ', '\x11', '\x2', '\x4AE', '\x4AF', '\a', '\x5', '\x2', '\x2', '\x4AF', 
		'\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4A0', '\x3', '\x2', '\x2', 
		'\x2', '\x4B0', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4A3', 
		'\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4AC', '\x3', '\x2', '\x2', '\x2', 
		'\x4B1', ')', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B4', '\x5', 'p', 
		'\x39', '\x2', '\x4B3', '\x4B5', '\t', '\v', '\x2', '\x2', '\x4B4', '\x4B3', 
		'\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B5', '\x3', '\x2', '\x2', '\x2', 
		'\x4B5', '\x4B8', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4B7', '\a', 
		'\xAD', '\x2', '\x2', '\x4B7', '\x4B9', '\t', '\f', '\x2', '\x2', '\x4B8', 
		'\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B9', '\x3', '\x2', '\x2', 
		'\x2', '\x4B9', '+', '\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4BC', '\a', 
		'\xE8', '\x2', '\x2', '\x4BB', '\x4BD', '\x5', ':', '\x1E', '\x2', '\x4BC', 
		'\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BD', '\x3', '\x2', '\x2', 
		'\x2', '\x4BD', '\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4BE', '\x4C3', 
		'\x5', '<', '\x1F', '\x2', '\x4BF', '\x4C0', '\a', '\x6', '\x2', '\x2', 
		'\x4C0', '\x4C2', '\x5', '<', '\x1F', '\x2', '\x4C1', '\x4BF', '\x3', 
		'\x2', '\x2', '\x2', '\x4C2', '\x4C5', '\x3', '\x2', '\x2', '\x2', '\x4C3', 
		'\x4C1', '\x3', '\x2', '\x2', '\x2', '\x4C3', '\x4C4', '\x3', '\x2', '\x2', 
		'\x2', '\x4C4', '\x4CF', '\x3', '\x2', '\x2', '\x2', '\x4C5', '\x4C3', 
		'\x3', '\x2', '\x2', '\x2', '\x4C6', '\x4C7', '\a', '\x65', '\x2', '\x2', 
		'\x4C7', '\x4CC', '\x5', '>', ' ', '\x2', '\x4C8', '\x4C9', '\a', '\x6', 
		'\x2', '\x2', '\x4C9', '\x4CB', '\x5', '>', ' ', '\x2', '\x4CA', '\x4C8', 
		'\x3', '\x2', '\x2', '\x2', '\x4CB', '\x4CE', '\x3', '\x2', '\x2', '\x2', 
		'\x4CC', '\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4CD', '\x3', 
		'\x2', '\x2', '\x2', '\x4CD', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4CE', 
		'\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4C6', '\x3', '\x2', '\x2', 
		'\x2', '\x4CF', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4D3', 
		'\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D2', '\a', '\x11C', '\x2', '\x2', 
		'\x4D2', '\x4D4', '\x5', 'r', ':', '\x2', '\x4D3', '\x4D1', '\x3', '\x2', 
		'\x2', '\x2', '\x4D3', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D8', 
		'\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D6', '\a', 'm', '\x2', '\x2', 
		'\x4D6', '\x4D7', '\a', '%', '\x2', '\x2', '\x4D7', '\x4D9', '\x5', '.', 
		'\x18', '\x2', '\x4D8', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4D8', 
		'\x4D9', '\x3', '\x2', '\x2', '\x2', '\x4D9', '\x4DC', '\x3', '\x2', '\x2', 
		'\x2', '\x4DA', '\x4DB', '\a', 'p', '\x2', '\x2', '\x4DB', '\x4DD', '\x5', 
		'r', ':', '\x2', '\x4DC', '\x4DA', '\x3', '\x2', '\x2', '\x2', '\x4DC', 
		'\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4E7', '\x3', '\x2', '\x2', 
		'\x2', '\x4DE', '\x4DF', '\a', '\x11D', '\x2', '\x2', '\x4DF', '\x4E4', 
		'\x5', '\x34', '\x1B', '\x2', '\x4E0', '\x4E1', '\a', '\x6', '\x2', '\x2', 
		'\x4E1', '\x4E3', '\x5', '\x34', '\x1B', '\x2', '\x4E2', '\x4E0', '\x3', 
		'\x2', '\x2', '\x2', '\x4E3', '\x4E6', '\x3', '\x2', '\x2', '\x2', '\x4E4', 
		'\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E5', '\x3', '\x2', '\x2', 
		'\x2', '\x4E5', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4E4', 
		'\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4DE', '\x3', '\x2', '\x2', '\x2', 
		'\x4E7', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4E8', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x4E9', '\x4EB', '\x5', ':', '\x1E', '\x2', '\x4EA', '\x4E9', 
		'\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4EB', '\x3', '\x2', '\x2', '\x2', 
		'\x4EB', '\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4F1', '\x5', 
		'\x30', '\x19', '\x2', '\x4ED', '\x4EE', '\a', '\x6', '\x2', '\x2', '\x4EE', 
		'\x4F0', '\x5', '\x30', '\x19', '\x2', '\x4EF', '\x4ED', '\x3', '\x2', 
		'\x2', '\x2', '\x4F0', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4EF', 
		'\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4F2', '\x3', '\x2', '\x2', '\x2', 
		'\x4F2', '/', '\x3', '\x2', '\x2', '\x2', '\x4F3', '\x4F1', '\x3', '\x2', 
		'\x2', '\x2', '\x4F4', '\x51D', '\x5', '\x32', '\x1A', '\x2', '\x4F5', 
		'\x4F6', '\a', '\xDE', '\x2', '\x2', '\x4F6', '\x4FF', '\a', '\x4', '\x2', 
		'\x2', '\x4F7', '\x4FC', '\x5', 'p', '\x39', '\x2', '\x4F8', '\x4F9', 
		'\a', '\x6', '\x2', '\x2', '\x4F9', '\x4FB', '\x5', 'p', '\x39', '\x2', 
		'\x4FA', '\x4F8', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FE', '\x3', 
		'\x2', '\x2', '\x2', '\x4FC', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4FC', 
		'\x4FD', '\x3', '\x2', '\x2', '\x2', '\x4FD', '\x500', '\x3', '\x2', '\x2', 
		'\x2', '\x4FE', '\x4FC', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4F7', 
		'\x3', '\x2', '\x2', '\x2', '\x4FF', '\x500', '\x3', '\x2', '\x2', '\x2', 
		'\x500', '\x501', '\x3', '\x2', '\x2', '\x2', '\x501', '\x51D', '\a', 
		'\x5', '\x2', '\x2', '\x502', '\x503', '\a', '\x37', '\x2', '\x2', '\x503', 
		'\x50C', '\a', '\x4', '\x2', '\x2', '\x504', '\x509', '\x5', 'p', '\x39', 
		'\x2', '\x505', '\x506', '\a', '\x6', '\x2', '\x2', '\x506', '\x508', 
		'\x5', 'p', '\x39', '\x2', '\x507', '\x505', '\x3', '\x2', '\x2', '\x2', 
		'\x508', '\x50B', '\x3', '\x2', '\x2', '\x2', '\x509', '\x507', '\x3', 
		'\x2', '\x2', '\x2', '\x509', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x50A', 
		'\x50D', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x509', '\x3', '\x2', '\x2', 
		'\x2', '\x50C', '\x504', '\x3', '\x2', '\x2', '\x2', '\x50C', '\x50D', 
		'\x3', '\x2', '\x2', '\x2', '\x50D', '\x50E', '\x3', '\x2', '\x2', '\x2', 
		'\x50E', '\x51D', '\a', '\x5', '\x2', '\x2', '\x50F', '\x510', '\a', 'n', 
		'\x2', '\x2', '\x510', '\x511', '\a', '\xEC', '\x2', '\x2', '\x511', '\x512', 
		'\a', '\x4', '\x2', '\x2', '\x512', '\x517', '\x5', '\x32', '\x1A', '\x2', 
		'\x513', '\x514', '\a', '\x6', '\x2', '\x2', '\x514', '\x516', '\x5', 
		'\x32', '\x1A', '\x2', '\x515', '\x513', '\x3', '\x2', '\x2', '\x2', '\x516', 
		'\x519', '\x3', '\x2', '\x2', '\x2', '\x517', '\x515', '\x3', '\x2', '\x2', 
		'\x2', '\x517', '\x518', '\x3', '\x2', '\x2', '\x2', '\x518', '\x51A', 
		'\x3', '\x2', '\x2', '\x2', '\x519', '\x517', '\x3', '\x2', '\x2', '\x2', 
		'\x51A', '\x51B', '\a', '\x5', '\x2', '\x2', '\x51B', '\x51D', '\x3', 
		'\x2', '\x2', '\x2', '\x51C', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\x51C', 
		'\x4F5', '\x3', '\x2', '\x2', '\x2', '\x51C', '\x502', '\x3', '\x2', '\x2', 
		'\x2', '\x51C', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x51E', '\x527', '\a', '\x4', '\x2', '\x2', 
		'\x51F', '\x524', '\x5', 'p', '\x39', '\x2', '\x520', '\x521', '\a', '\x6', 
		'\x2', '\x2', '\x521', '\x523', '\x5', 'p', '\x39', '\x2', '\x522', '\x520', 
		'\x3', '\x2', '\x2', '\x2', '\x523', '\x526', '\x3', '\x2', '\x2', '\x2', 
		'\x524', '\x522', '\x3', '\x2', '\x2', '\x2', '\x524', '\x525', '\x3', 
		'\x2', '\x2', '\x2', '\x525', '\x528', '\x3', '\x2', '\x2', '\x2', '\x526', 
		'\x524', '\x3', '\x2', '\x2', '\x2', '\x527', '\x51F', '\x3', '\x2', '\x2', 
		'\x2', '\x527', '\x528', '\x3', '\x2', '\x2', '\x2', '\x528', '\x529', 
		'\x3', '\x2', '\x2', '\x2', '\x529', '\x52C', '\a', '\x5', '\x2', '\x2', 
		'\x52A', '\x52C', '\x5', 'p', '\x39', '\x2', '\x52B', '\x51E', '\x3', 
		'\x2', '\x2', '\x2', '\x52B', '\x52A', '\x3', '\x2', '\x2', '\x2', '\x52C', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x52D', '\x52E', '\x5', '\xD6', 'l', 
		'\x2', '\x52E', '\x52F', '\a', '\x1E', '\x2', '\x2', '\x52F', '\x530', 
		'\a', '\x4', '\x2', '\x2', '\x530', '\x531', '\x5', '\x36', '\x1C', '\x2', 
		'\x531', '\x532', '\a', '\x5', '\x2', '\x2', '\x532', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x533', '\x535', '\x5', '\xD6', 'l', '\x2', '\x534', '\x533', 
		'\x3', '\x2', '\x2', '\x2', '\x534', '\x535', '\x3', '\x2', '\x2', '\x2', 
		'\x535', '\x540', '\x3', '\x2', '\x2', '\x2', '\x536', '\x537', '\a', 
		'\xBD', '\x2', '\x2', '\x537', '\x538', '\a', '%', '\x2', '\x2', '\x538', 
		'\x53D', '\x5', 'p', '\x39', '\x2', '\x539', '\x53A', '\a', '\x6', '\x2', 
		'\x2', '\x53A', '\x53C', '\x5', 'p', '\x39', '\x2', '\x53B', '\x539', 
		'\x3', '\x2', '\x2', '\x2', '\x53C', '\x53F', '\x3', '\x2', '\x2', '\x2', 
		'\x53D', '\x53B', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53E', '\x3', 
		'\x2', '\x2', '\x2', '\x53E', '\x541', '\x3', '\x2', '\x2', '\x2', '\x53F', 
		'\x53D', '\x3', '\x2', '\x2', '\x2', '\x540', '\x536', '\x3', '\x2', '\x2', 
		'\x2', '\x540', '\x541', '\x3', '\x2', '\x2', '\x2', '\x541', '\x54C', 
		'\x3', '\x2', '\x2', '\x2', '\x542', '\x543', '\a', '\xB7', '\x2', '\x2', 
		'\x543', '\x544', '\a', '%', '\x2', '\x2', '\x544', '\x549', '\x5', '*', 
		'\x16', '\x2', '\x545', '\x546', '\a', '\x6', '\x2', '\x2', '\x546', '\x548', 
		'\x5', '*', '\x16', '\x2', '\x547', '\x545', '\x3', '\x2', '\x2', '\x2', 
		'\x548', '\x54B', '\x3', '\x2', '\x2', '\x2', '\x549', '\x547', '\x3', 
		'\x2', '\x2', '\x2', '\x549', '\x54A', '\x3', '\x2', '\x2', '\x2', '\x54A', 
		'\x54D', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x549', '\x3', '\x2', '\x2', 
		'\x2', '\x54C', '\x542', '\x3', '\x2', '\x2', '\x2', '\x54C', '\x54D', 
		'\x3', '\x2', '\x2', '\x2', '\x54D', '\x54F', '\x3', '\x2', '\x2', '\x2', 
		'\x54E', '\x550', '\x5', '\xAE', 'X', '\x2', '\x54F', '\x54E', '\x3', 
		'\x2', '\x2', '\x2', '\x54F', '\x550', '\x3', '\x2', '\x2', '\x2', '\x550', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x551', '\x553', '\x5', '\xD6', 'l', 
		'\x2', '\x552', '\x554', '\x5', '^', '\x30', '\x2', '\x553', '\x552', 
		'\x3', '\x2', '\x2', '\x2', '\x553', '\x554', '\x3', '\x2', '\x2', '\x2', 
		'\x554', '\x555', '\x3', '\x2', '\x2', '\x2', '\x555', '\x556', '\a', 
		'\x1E', '\x2', '\x2', '\x556', '\x557', '\a', '\x4', '\x2', '\x2', '\x557', 
		'\x558', '\x5', '\xE', '\b', '\x2', '\x558', '\x559', '\a', '\x5', '\x2', 
		'\x2', '\x559', '\x39', '\x3', '\x2', '\x2', '\x2', '\x55A', '\x55B', 
		'\t', '\r', '\x2', '\x2', '\x55B', ';', '\x3', '\x2', '\x2', '\x2', '\x55C', 
		'\x561', '\x5', 'p', '\x39', '\x2', '\x55D', '\x55F', '\a', '\x1E', '\x2', 
		'\x2', '\x55E', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x55E', '\x55F', 
		'\x3', '\x2', '\x2', '\x2', '\x55F', '\x560', '\x3', '\x2', '\x2', '\x2', 
		'\x560', '\x562', '\x5', '\xD6', 'l', '\x2', '\x561', '\x55E', '\x3', 
		'\x2', '\x2', '\x2', '\x561', '\x562', '\x3', '\x2', '\x2', '\x2', '\x562', 
		'\x56C', '\x3', '\x2', '\x2', '\x2', '\x563', '\x564', '\x5', 'x', '=', 
		'\x2', '\x564', '\x565', '\a', '\x3', '\x2', '\x2', '\x565', '\x568', 
		'\a', '\x12E', '\x2', '\x2', '\x566', '\x567', '\a', '\x1E', '\x2', '\x2', 
		'\x567', '\x569', '\x5', '^', '\x30', '\x2', '\x568', '\x566', '\x3', 
		'\x2', '\x2', '\x2', '\x568', '\x569', '\x3', '\x2', '\x2', '\x2', '\x569', 
		'\x56C', '\x3', '\x2', '\x2', '\x2', '\x56A', '\x56C', '\a', '\x12E', 
		'\x2', '\x2', '\x56B', '\x55C', '\x3', '\x2', '\x2', '\x2', '\x56B', '\x563', 
		'\x3', '\x2', '\x2', '\x2', '\x56B', '\x56A', '\x3', '\x2', '\x2', '\x2', 
		'\x56C', '=', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56E', '\b', ' ', 
		'\x1', '\x2', '\x56E', '\x56F', '\x5', '\x44', '#', '\x2', '\x56F', '\x582', 
		'\x3', '\x2', '\x2', '\x2', '\x570', '\x57E', '\f', '\x4', '\x2', '\x2', 
		'\x571', '\x572', '\a', '\x36', '\x2', '\x2', '\x572', '\x573', '\a', 
		'\x81', '\x2', '\x2', '\x573', '\x57F', '\x5', '\x44', '#', '\x2', '\x574', 
		'\x575', '\x5', '@', '!', '\x2', '\x575', '\x576', '\a', '\x81', '\x2', 
		'\x2', '\x576', '\x577', '\x5', '>', ' ', '\x2', '\x577', '\x578', '\x5', 
		'\x42', '\"', '\x2', '\x578', '\x57F', '\x3', '\x2', '\x2', '\x2', '\x579', 
		'\x57A', '\a', '\xA1', '\x2', '\x2', '\x57A', '\x57B', '\x5', '@', '!', 
		'\x2', '\x57B', '\x57C', '\a', '\x81', '\x2', '\x2', '\x57C', '\x57D', 
		'\x5', '\x44', '#', '\x2', '\x57D', '\x57F', '\x3', '\x2', '\x2', '\x2', 
		'\x57E', '\x571', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x574', '\x3', 
		'\x2', '\x2', '\x2', '\x57E', '\x579', '\x3', '\x2', '\x2', '\x2', '\x57F', 
		'\x581', '\x3', '\x2', '\x2', '\x2', '\x580', '\x570', '\x3', '\x2', '\x2', 
		'\x2', '\x581', '\x584', '\x3', '\x2', '\x2', '\x2', '\x582', '\x580', 
		'\x3', '\x2', '\x2', '\x2', '\x582', '\x583', '\x3', '\x2', '\x2', '\x2', 
		'\x583', '?', '\x3', '\x2', '\x2', '\x2', '\x584', '\x582', '\x3', '\x2', 
		'\x2', '\x2', '\x585', '\x587', '\a', 'w', '\x2', '\x2', '\x586', '\x585', 
		'\x3', '\x2', '\x2', '\x2', '\x586', '\x587', '\x3', '\x2', '\x2', '\x2', 
		'\x587', '\x595', '\x3', '\x2', '\x2', '\x2', '\x588', '\x58A', '\a', 
		'\x8E', '\x2', '\x2', '\x589', '\x58B', '\a', '\xB9', '\x2', '\x2', '\x58A', 
		'\x589', '\x3', '\x2', '\x2', '\x2', '\x58A', '\x58B', '\x3', '\x2', '\x2', 
		'\x2', '\x58B', '\x595', '\x3', '\x2', '\x2', '\x2', '\x58C', '\x58E', 
		'\a', '\xDA', '\x2', '\x2', '\x58D', '\x58F', '\a', '\xB9', '\x2', '\x2', 
		'\x58E', '\x58D', '\x3', '\x2', '\x2', '\x2', '\x58E', '\x58F', '\x3', 
		'\x2', '\x2', '\x2', '\x58F', '\x595', '\x3', '\x2', '\x2', '\x2', '\x590', 
		'\x592', '\a', '\x66', '\x2', '\x2', '\x591', '\x593', '\a', '\xB9', '\x2', 
		'\x2', '\x592', '\x591', '\x3', '\x2', '\x2', '\x2', '\x592', '\x593', 
		'\x3', '\x2', '\x2', '\x2', '\x593', '\x595', '\x3', '\x2', '\x2', '\x2', 
		'\x594', '\x586', '\x3', '\x2', '\x2', '\x2', '\x594', '\x588', '\x3', 
		'\x2', '\x2', '\x2', '\x594', '\x58C', '\x3', '\x2', '\x2', '\x2', '\x594', 
		'\x590', '\x3', '\x2', '\x2', '\x2', '\x595', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x596', '\x597', '\a', '\xB2', '\x2', '\x2', '\x597', '\x5A5', 
		'\x5', 'r', ':', '\x2', '\x598', '\x599', '\a', '\x111', '\x2', '\x2', 
		'\x599', '\x59A', '\a', '\x4', '\x2', '\x2', '\x59A', '\x59F', '\x5', 
		'\xD6', 'l', '\x2', '\x59B', '\x59C', '\a', '\x6', '\x2', '\x2', '\x59C', 
		'\x59E', '\x5', '\xD6', 'l', '\x2', '\x59D', '\x59B', '\x3', '\x2', '\x2', 
		'\x2', '\x59E', '\x5A1', '\x3', '\x2', '\x2', '\x2', '\x59F', '\x59D', 
		'\x3', '\x2', '\x2', '\x2', '\x59F', '\x5A0', '\x3', '\x2', '\x2', '\x2', 
		'\x5A0', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x59F', '\x3', 
		'\x2', '\x2', '\x2', '\x5A2', '\x5A3', '\a', '\x5', '\x2', '\x2', '\x5A3', 
		'\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x596', '\x3', '\x2', '\x2', 
		'\x2', '\x5A4', '\x598', '\x3', '\x2', '\x2', '\x2', '\x5A5', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5AD', '\x5', 'N', '(', '\x2', 
		'\x5A7', '\x5A8', '\a', '\xF6', '\x2', '\x2', '\x5A8', '\x5A9', '\x5', 
		'\x46', '$', '\x2', '\x5A9', '\x5AA', '\a', '\x4', '\x2', '\x2', '\x5AA', 
		'\x5AB', '\x5', 'p', '\x39', '\x2', '\x5AB', '\x5AC', '\a', '\x5', '\x2', 
		'\x2', '\x5AC', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5AD', '\x5A7', 
		'\x3', '\x2', '\x2', '\x2', '\x5AD', '\x5AE', '\x3', '\x2', '\x2', '\x2', 
		'\x5AE', '\x45', '\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5B0', '\t', '\xE', 
		'\x2', '\x2', '\x5B0', 'G', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5B2', 
		'\t', '\xF', '\x2', '\x2', '\x5B2', 'I', '\x3', '\x2', '\x2', '\x2', '\x5B3', 
		'\x5BA', '\a', 'U', '\x2', '\x2', '\x5B4', '\x5B6', '\a', '\x102', '\x2', 
		'\x2', '\x5B5', '\x5B7', '\x5', '\x90', 'I', '\x2', '\x5B6', '\x5B5', 
		'\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B7', '\x3', '\x2', '\x2', '\x2', 
		'\x5B7', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5BA', '\x5', 
		'L', '\'', '\x2', '\x5B9', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B9', 
		'\x5B4', '\x3', '\x2', '\x2', '\x2', '\x5BA', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x5BB', '\x5BC', '\a', '\x11E', '\x2', '\x2', '\x5BC', '\x5C0', 
		'\a', '\x33', '\x2', '\x2', '\x5BD', '\x5BE', '\a', '\x120', '\x2', '\x2', 
		'\x5BE', '\x5C0', '\a', '\x33', '\x2', '\x2', '\x5BF', '\x5BB', '\x3', 
		'\x2', '\x2', '\x2', '\x5BF', '\x5BD', '\x3', '\x2', '\x2', '\x2', '\x5C0', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x614', '\x5', '\\', '/', '\x2', 
		'\x5C2', '\x5C3', '\a', '\x9B', '\x2', '\x2', '\x5C3', '\x5CE', '\a', 
		'\x4', '\x2', '\x2', '\x5C4', '\x5C5', '\a', '\xBD', '\x2', '\x2', '\x5C5', 
		'\x5C6', '\a', '%', '\x2', '\x2', '\x5C6', '\x5CB', '\x5', 'p', '\x39', 
		'\x2', '\x5C7', '\x5C8', '\a', '\x6', '\x2', '\x2', '\x5C8', '\x5CA', 
		'\x5', 'p', '\x39', '\x2', '\x5C9', '\x5C7', '\x3', '\x2', '\x2', '\x2', 
		'\x5CA', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5C9', '\x3', 
		'\x2', '\x2', '\x2', '\x5CB', '\x5CC', '\x3', '\x2', '\x2', '\x2', '\x5CC', 
		'\x5CF', '\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CB', '\x3', '\x2', '\x2', 
		'\x2', '\x5CE', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5CF', 
		'\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5DA', '\x3', '\x2', '\x2', '\x2', 
		'\x5D0', '\x5D1', '\a', '\xB7', '\x2', '\x2', '\x5D1', '\x5D2', '\a', 
		'%', '\x2', '\x2', '\x5D2', '\x5D7', '\x5', '*', '\x16', '\x2', '\x5D3', 
		'\x5D4', '\a', '\x6', '\x2', '\x2', '\x5D4', '\x5D6', '\x5', '*', '\x16', 
		'\x2', '\x5D5', '\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D9', 
		'\x3', '\x2', '\x2', '\x2', '\x5D7', '\x5D5', '\x3', '\x2', '\x2', '\x2', 
		'\x5D7', '\x5D8', '\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5DB', '\x3', 
		'\x2', '\x2', '\x2', '\x5D9', '\x5D7', '\x3', '\x2', '\x2', '\x2', '\x5DA', 
		'\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\x5DB', '\x3', '\x2', '\x2', 
		'\x2', '\x5DB', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DD', 
		'\a', '\x9D', '\x2', '\x2', '\x5DD', '\x5E2', '\x5', 'P', ')', '\x2', 
		'\x5DE', '\x5DF', '\a', '\x6', '\x2', '\x2', '\x5DF', '\x5E1', '\x5', 
		'P', ')', '\x2', '\x5E0', '\x5DE', '\x3', '\x2', '\x2', '\x2', '\x5E1', 
		'\x5E4', '\x3', '\x2', '\x2', '\x2', '\x5E2', '\x5E0', '\x3', '\x2', '\x2', 
		'\x2', '\x5E2', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E6', 
		'\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E2', '\x3', '\x2', '\x2', '\x2', 
		'\x5E5', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5E5', '\x5E6', '\x3', 
		'\x2', '\x2', '\x2', '\x5E6', '\x5E8', '\x3', '\x2', '\x2', '\x2', '\x5E7', 
		'\x5E9', '\x5', 'R', '*', '\x2', '\x5E8', '\x5E7', '\x3', '\x2', '\x2', 
		'\x2', '\x5E8', '\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5ED', 
		'\x3', '\x2', '\x2', '\x2', '\x5EA', '\x5EB', '\a', '\x17', '\x2', '\x2', 
		'\x5EB', '\x5EC', '\a', '\x98', '\x2', '\x2', '\x5EC', '\x5EE', '\x5', 
		'V', ',', '\x2', '\x5ED', '\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5ED', 
		'\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5EE', '\x5F0', '\x3', '\x2', '\x2', 
		'\x2', '\x5EF', '\x5F1', '\t', '\x10', '\x2', '\x2', '\x5F0', '\x5EF', 
		'\x3', '\x2', '\x2', '\x2', '\x5F0', '\x5F1', '\x3', '\x2', '\x2', '\x2', 
		'\x5F1', '\x5F2', '\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F3', '\a', 
		'\xC2', '\x2', '\x2', '\x5F3', '\x5F4', '\a', '\x4', '\x2', '\x2', '\x5F4', 
		'\x5F5', '\x5', '\xB4', '[', '\x2', '\x5F5', '\x5FF', '\a', '\x5', '\x2', 
		'\x2', '\x5F6', '\x5F7', '\a', '\xF1', '\x2', '\x2', '\x5F7', '\x5FC', 
		'\x5', 'X', '-', '\x2', '\x5F8', '\x5F9', '\a', '\x6', '\x2', '\x2', '\x5F9', 
		'\x5FB', '\x5', 'X', '-', '\x2', '\x5FA', '\x5F8', '\x3', '\x2', '\x2', 
		'\x2', '\x5FB', '\x5FE', '\x3', '\x2', '\x2', '\x2', '\x5FC', '\x5FA', 
		'\x3', '\x2', '\x2', '\x2', '\x5FC', '\x5FD', '\x3', '\x2', '\x2', '\x2', 
		'\x5FD', '\x600', '\x3', '\x2', '\x2', '\x2', '\x5FE', '\x5FC', '\x3', 
		'\x2', '\x2', '\x2', '\x5FF', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5FF', 
		'\x600', '\x3', '\x2', '\x2', '\x2', '\x600', '\x601', '\x3', '\x2', '\x2', 
		'\x2', '\x601', '\x602', '\a', '\x46', '\x2', '\x2', '\x602', '\x607', 
		'\x5', 'Z', '.', '\x2', '\x603', '\x604', '\a', '\x6', '\x2', '\x2', '\x604', 
		'\x606', '\x5', 'Z', '.', '\x2', '\x605', '\x603', '\x3', '\x2', '\x2', 
		'\x2', '\x606', '\x609', '\x3', '\x2', '\x2', '\x2', '\x607', '\x605', 
		'\x3', '\x2', '\x2', '\x2', '\x607', '\x608', '\x3', '\x2', '\x2', '\x2', 
		'\x608', '\x60A', '\x3', '\x2', '\x2', '\x2', '\x609', '\x607', '\x3', 
		'\x2', '\x2', '\x2', '\x60A', '\x612', '\a', '\x5', '\x2', '\x2', '\x60B', 
		'\x60D', '\a', '\x1E', '\x2', '\x2', '\x60C', '\x60B', '\x3', '\x2', '\x2', 
		'\x2', '\x60C', '\x60D', '\x3', '\x2', '\x2', '\x2', '\x60D', '\x60E', 
		'\x3', '\x2', '\x2', '\x2', '\x60E', '\x610', '\x5', '\xD6', 'l', '\x2', 
		'\x60F', '\x611', '\x5', '^', '\x30', '\x2', '\x610', '\x60F', '\x3', 
		'\x2', '\x2', '\x2', '\x610', '\x611', '\x3', '\x2', '\x2', '\x2', '\x611', 
		'\x613', '\x3', '\x2', '\x2', '\x2', '\x612', '\x60C', '\x3', '\x2', '\x2', 
		'\x2', '\x612', '\x613', '\x3', '\x2', '\x2', '\x2', '\x613', '\x615', 
		'\x3', '\x2', '\x2', '\x2', '\x614', '\x5C2', '\x3', '\x2', '\x2', '\x2', 
		'\x614', '\x615', '\x3', '\x2', '\x2', '\x2', '\x615', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x616', '\x617', '\x5', 'p', '\x39', '\x2', '\x617', '\x618', 
		'\a', '\x1E', '\x2', '\x2', '\x618', '\x619', '\x5', '\xD6', 'l', '\x2', 
		'\x619', 'Q', '\x3', '\x2', '\x2', '\x2', '\x61A', '\x61B', '\a', '\xB3', 
		'\x2', '\x2', '\x61B', '\x61C', '\a', '\xDF', '\x2', '\x2', '\x61C', '\x61D', 
		'\a', '\xC3', '\x2', '\x2', '\x61D', '\x626', '\a', '\x98', '\x2', '\x2', 
		'\x61E', '\x61F', '\a', '\x18', '\x2', '\x2', '\x61F', '\x620', '\a', 
		'\xE0', '\x2', '\x2', '\x620', '\x621', '\a', '\xC3', '\x2', '\x2', '\x621', 
		'\x623', '\a', '\x98', '\x2', '\x2', '\x622', '\x624', '\x5', 'T', '+', 
		'\x2', '\x623', '\x622', '\x3', '\x2', '\x2', '\x2', '\x623', '\x624', 
		'\x3', '\x2', '\x2', '\x2', '\x624', '\x626', '\x3', '\x2', '\x2', '\x2', 
		'\x625', '\x61A', '\x3', '\x2', '\x2', '\x2', '\x625', '\x61E', '\x3', 
		'\x2', '\x2', '\x2', '\x626', 'S', '\x3', '\x2', '\x2', '\x2', '\x627', 
		'\x628', '\a', '\xED', '\x2', '\x2', '\x628', '\x629', '\a', 'R', '\x2', 
		'\x2', '\x629', '\x631', '\a', '\x9A', '\x2', '\x2', '\x62A', '\x62B', 
		'\a', '\xB1', '\x2', '\x2', '\x62B', '\x62C', '\a', 'R', '\x2', '\x2', 
		'\x62C', '\x631', '\a', '\x9A', '\x2', '\x2', '\x62D', '\x62E', '\a', 
		'\x11E', '\x2', '\x2', '\x62E', '\x62F', '\a', '\x10C', '\x2', '\x2', 
		'\x62F', '\x631', '\a', '\xE0', '\x2', '\x2', '\x630', '\x627', '\x3', 
		'\x2', '\x2', '\x2', '\x630', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x630', 
		'\x62D', '\x3', '\x2', '\x2', '\x2', '\x631', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x632', '\x633', '\a', '\a', '\x2', '\x2', '\x633', '\x634', '\a', 
		'\xFD', '\x2', '\x2', '\x634', '\x635', '\a', '\xA2', '\x2', '\x2', '\x635', 
		'\x646', '\a', '\xDF', '\x2', '\x2', '\x636', '\x637', '\a', '\a', '\x2', 
		'\x2', '\x637', '\x638', '\a', '\xC0', '\x2', '\x2', '\x638', '\x639', 
		'\a', '\x8B', '\x2', '\x2', '\x639', '\x646', '\a', '\xDF', '\x2', '\x2', 
		'\x63A', '\x63B', '\a', '\a', '\x2', '\x2', '\x63B', '\x63C', '\a', '\xFD', 
		'\x2', '\x2', '\x63C', '\x63D', '\a', '\x61', '\x2', '\x2', '\x63D', '\x646', 
		'\x5', '\xD6', 'l', '\x2', '\x63E', '\x63F', '\a', '\a', '\x2', '\x2', 
		'\x63F', '\x640', '\a', '\xFD', '\x2', '\x2', '\x640', '\x641', '\a', 
		'\x8B', '\x2', '\x2', '\x641', '\x646', '\x5', '\xD6', 'l', '\x2', '\x642', 
		'\x643', '\a', '\a', '\x2', '\x2', '\x643', '\x644', '\a', '\xFD', '\x2', 
		'\x2', '\x644', '\x646', '\x5', '\xD6', 'l', '\x2', '\x645', '\x632', 
		'\x3', '\x2', '\x2', '\x2', '\x645', '\x636', '\x3', '\x2', '\x2', '\x2', 
		'\x645', '\x63A', '\x3', '\x2', '\x2', '\x2', '\x645', '\x63E', '\x3', 
		'\x2', '\x2', '\x2', '\x645', '\x642', '\x3', '\x2', '\x2', '\x2', '\x646', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x647', '\x648', '\x5', '\xD6', 'l', 
		'\x2', '\x648', '\x649', '\a', '\x126', '\x2', '\x2', '\x649', '\x64A', 
		'\a', '\x4', '\x2', '\x2', '\x64A', '\x64F', '\x5', '\xD6', 'l', '\x2', 
		'\x64B', '\x64C', '\a', '\x6', '\x2', '\x2', '\x64C', '\x64E', '\x5', 
		'\xD6', 'l', '\x2', '\x64D', '\x64B', '\x3', '\x2', '\x2', '\x2', '\x64E', 
		'\x651', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x64D', '\x3', '\x2', '\x2', 
		'\x2', '\x64F', '\x650', '\x3', '\x2', '\x2', '\x2', '\x650', '\x652', 
		'\x3', '\x2', '\x2', '\x2', '\x651', '\x64F', '\x3', '\x2', '\x2', '\x2', 
		'\x652', '\x653', '\a', '\x5', '\x2', '\x2', '\x653', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x654', '\x655', '\x5', '\xD6', 'l', '\x2', '\x655', '\x656', 
		'\a', '\x1E', '\x2', '\x2', '\x656', '\x657', '\x5', 'p', '\x39', '\x2', 
		'\x657', '[', '\x3', '\x2', '\x2', '\x2', '\x658', '\x660', '\x5', '`', 
		'\x31', '\x2', '\x659', '\x65B', '\a', '\x1E', '\x2', '\x2', '\x65A', 
		'\x659', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x65B', '\x3', '\x2', '\x2', 
		'\x2', '\x65B', '\x65C', '\x3', '\x2', '\x2', '\x2', '\x65C', '\x65E', 
		'\x5', '\xD6', 'l', '\x2', '\x65D', '\x65F', '\x5', '^', '\x30', '\x2', 
		'\x65E', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x65E', '\x65F', '\x3', 
		'\x2', '\x2', '\x2', '\x65F', '\x661', '\x3', '\x2', '\x2', '\x2', '\x660', 
		'\x65A', '\x3', '\x2', '\x2', '\x2', '\x660', '\x661', '\x3', '\x2', '\x2', 
		'\x2', '\x661', ']', '\x3', '\x2', '\x2', '\x2', '\x662', '\x663', '\a', 
		'\x4', '\x2', '\x2', '\x663', '\x668', '\x5', '\xD6', 'l', '\x2', '\x664', 
		'\x665', '\a', '\x6', '\x2', '\x2', '\x665', '\x667', '\x5', '\xD6', 'l', 
		'\x2', '\x666', '\x664', '\x3', '\x2', '\x2', '\x2', '\x667', '\x66A', 
		'\x3', '\x2', '\x2', '\x2', '\x668', '\x666', '\x3', '\x2', '\x2', '\x2', 
		'\x668', '\x669', '\x3', '\x2', '\x2', '\x2', '\x669', '\x66B', '\x3', 
		'\x2', '\x2', '\x2', '\x66A', '\x668', '\x3', '\x2', '\x2', '\x2', '\x66B', 
		'\x66C', '\a', '\x5', '\x2', '\x2', '\x66C', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x66D', '\x66F', '\x5', '\xCA', '\x66', '\x2', '\x66E', '\x670', 
		'\x5', '\xCC', 'g', '\x2', '\x66F', '\x66E', '\x3', '\x2', '\x2', '\x2', 
		'\x66F', '\x670', '\x3', '\x2', '\x2', '\x2', '\x670', '\x693', '\x3', 
		'\x2', '\x2', '\x2', '\x671', '\x672', '\a', '\x4', '\x2', '\x2', '\x672', 
		'\x673', '\x5', '\xE', '\b', '\x2', '\x673', '\x674', '\a', '\x5', '\x2', 
		'\x2', '\x674', '\x693', '\x3', '\x2', '\x2', '\x2', '\x675', '\x676', 
		'\a', '\x10D', '\x2', '\x2', '\x676', '\x677', '\a', '\x4', '\x2', '\x2', 
		'\x677', '\x67C', '\x5', 'p', '\x39', '\x2', '\x678', '\x679', '\a', '\x6', 
		'\x2', '\x2', '\x679', '\x67B', '\x5', 'p', '\x39', '\x2', '\x67A', '\x678', 
		'\x3', '\x2', '\x2', '\x2', '\x67B', '\x67E', '\x3', '\x2', '\x2', '\x2', 
		'\x67C', '\x67A', '\x3', '\x2', '\x2', '\x2', '\x67C', '\x67D', '\x3', 
		'\x2', '\x2', '\x2', '\x67D', '\x67F', '\x3', '\x2', '\x2', '\x2', '\x67E', 
		'\x67C', '\x3', '\x2', '\x2', '\x2', '\x67F', '\x682', '\a', '\x5', '\x2', 
		'\x2', '\x680', '\x681', '\a', '\x11E', '\x2', '\x2', '\x681', '\x683', 
		'\a', '\xB8', '\x2', '\x2', '\x682', '\x680', '\x3', '\x2', '\x2', '\x2', 
		'\x682', '\x683', '\x3', '\x2', '\x2', '\x2', '\x683', '\x693', '\x3', 
		'\x2', '\x2', '\x2', '\x684', '\x685', '\a', '\x8C', '\x2', '\x2', '\x685', 
		'\x686', '\a', '\x4', '\x2', '\x2', '\x686', '\x687', '\x5', '\xE', '\b', 
		'\x2', '\x687', '\x688', '\a', '\x5', '\x2', '\x2', '\x688', '\x693', 
		'\x3', '\x2', '\x2', '\x2', '\x689', '\x68A', '\a', '\xF4', '\x2', '\x2', 
		'\x68A', '\x68B', '\a', '\x4', '\x2', '\x2', '\x68B', '\x68C', '\x5', 
		'\x62', '\x32', '\x2', '\x68C', '\x68D', '\a', '\x5', '\x2', '\x2', '\x68D', 
		'\x693', '\x3', '\x2', '\x2', '\x2', '\x68E', '\x68F', '\a', '\x4', '\x2', 
		'\x2', '\x68F', '\x690', '\x5', '>', ' ', '\x2', '\x690', '\x691', '\a', 
		'\x5', '\x2', '\x2', '\x691', '\x693', '\x3', '\x2', '\x2', '\x2', '\x692', 
		'\x66D', '\x3', '\x2', '\x2', '\x2', '\x692', '\x671', '\x3', '\x2', '\x2', 
		'\x2', '\x692', '\x675', '\x3', '\x2', '\x2', '\x2', '\x692', '\x684', 
		'\x3', '\x2', '\x2', '\x2', '\x692', '\x689', '\x3', '\x2', '\x2', '\x2', 
		'\x692', '\x68E', '\x3', '\x2', '\x2', '\x2', '\x693', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x694', '\x695', '\x5', '\xCA', '\x66', '\x2', '\x695', 
		'\x69E', '\a', '\x4', '\x2', '\x2', '\x696', '\x69B', '\x5', '\x64', '\x33', 
		'\x2', '\x697', '\x698', '\a', '\x6', '\x2', '\x2', '\x698', '\x69A', 
		'\x5', '\x64', '\x33', '\x2', '\x699', '\x697', '\x3', '\x2', '\x2', '\x2', 
		'\x69A', '\x69D', '\x3', '\x2', '\x2', '\x2', '\x69B', '\x699', '\x3', 
		'\x2', '\x2', '\x2', '\x69B', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x69C', 
		'\x69F', '\x3', '\x2', '\x2', '\x2', '\x69D', '\x69B', '\x3', '\x2', '\x2', 
		'\x2', '\x69E', '\x696', '\x3', '\x2', '\x2', '\x2', '\x69E', '\x69F', 
		'\x3', '\x2', '\x2', '\x2', '\x69F', '\x6A9', '\x3', '\x2', '\x2', '\x2', 
		'\x6A0', '\x6A1', '\a', '\x34', '\x2', '\x2', '\x6A1', '\x6A6', '\x5', 
		'n', '\x38', '\x2', '\x6A2', '\x6A3', '\a', '\x6', '\x2', '\x2', '\x6A3', 
		'\x6A5', '\x5', 'n', '\x38', '\x2', '\x6A4', '\x6A2', '\x3', '\x2', '\x2', 
		'\x2', '\x6A5', '\x6A8', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A4', 
		'\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A7', '\x3', '\x2', '\x2', '\x2', 
		'\x6A7', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6A8', '\x6A6', '\x3', 
		'\x2', '\x2', '\x2', '\x6A9', '\x6A0', '\x3', '\x2', '\x2', '\x2', '\x6A9', 
		'\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6AA', '\x6AB', '\x3', '\x2', '\x2', 
		'\x2', '\x6AB', '\x6AC', '\a', '\x5', '\x2', '\x2', '\x6AC', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x6AD', '\x6AE', '\x5', '\xD6', 'l', '\x2', '\x6AE', 
		'\x6AF', '\a', '\b', '\x2', '\x2', '\x6AF', '\x6B1', '\x3', '\x2', '\x2', 
		'\x2', '\x6B0', '\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6B0', '\x6B1', 
		'\x3', '\x2', '\x2', '\x2', '\x6B1', '\x6B5', '\x3', '\x2', '\x2', '\x2', 
		'\x6B2', '\x6B6', '\x5', '\x66', '\x34', '\x2', '\x6B3', '\x6B6', '\x5', 
		'j', '\x36', '\x2', '\x6B4', '\x6B6', '\x5', 'p', '\x39', '\x2', '\x6B5', 
		'\x6B2', '\x3', '\x2', '\x2', '\x2', '\x6B5', '\x6B3', '\x3', '\x2', '\x2', 
		'\x2', '\x6B5', '\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6B6', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x6B7', '\x6C9', '\x5', 'h', '\x35', '\x2', 
		'\x6B8', '\x6B9', '\a', '\xBD', '\x2', '\x2', '\x6B9', '\x6C7', '\a', 
		'%', '\x2', '\x2', '\x6BA', '\x6C3', '\a', '\x4', '\x2', '\x2', '\x6BB', 
		'\x6C0', '\x5', 'p', '\x39', '\x2', '\x6BC', '\x6BD', '\a', '\x6', '\x2', 
		'\x2', '\x6BD', '\x6BF', '\x5', 'p', '\x39', '\x2', '\x6BE', '\x6BC', 
		'\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6C2', '\x3', '\x2', '\x2', '\x2', 
		'\x6C0', '\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6C0', '\x6C1', '\x3', 
		'\x2', '\x2', '\x2', '\x6C1', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6C2', 
		'\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6C3', '\x6BB', '\x3', '\x2', '\x2', 
		'\x2', '\x6C3', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6C4', '\x6C5', 
		'\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C8', '\a', '\x5', '\x2', '\x2', 
		'\x6C6', '\x6C8', '\x5', 'p', '\x39', '\x2', '\x6C7', '\x6BA', '\x3', 
		'\x2', '\x2', '\x2', '\x6C7', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6C8', 
		'\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6B8', '\x3', '\x2', '\x2', 
		'\x2', '\x6C9', '\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6CA', '\x6D1', 
		'\x3', '\x2', '\x2', '\x2', '\x6CB', '\x6CC', '\a', '\xCC', '\x2', '\x2', 
		'\x6CC', '\x6CD', '\a', '\x11B', '\x2', '\x2', '\x6CD', '\x6D2', '\a', 
		'R', '\x2', '\x2', '\x6CE', '\x6CF', '\a', '\x88', '\x2', '\x2', '\x6CF', 
		'\x6D0', '\a', '\x11B', '\x2', '\x2', '\x6D0', '\x6D2', '\a', 'R', '\x2', 
		'\x2', '\x6D1', '\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6CE', 
		'\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D2', '\x3', '\x2', '\x2', '\x2', 
		'\x6D2', '\x6E3', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D4', '\a', 
		'\xB7', '\x2', '\x2', '\x6D4', '\x6E1', '\a', '%', '\x2', '\x2', '\x6D5', 
		'\x6D6', '\a', '\x4', '\x2', '\x2', '\x6D6', '\x6DB', '\x5', '*', '\x16', 
		'\x2', '\x6D7', '\x6D8', '\a', '\x6', '\x2', '\x2', '\x6D8', '\x6DA', 
		'\x5', '*', '\x16', '\x2', '\x6D9', '\x6D7', '\x3', '\x2', '\x2', '\x2', 
		'\x6DA', '\x6DD', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6D9', '\x3', 
		'\x2', '\x2', '\x2', '\x6DB', '\x6DC', '\x3', '\x2', '\x2', '\x2', '\x6DC', 
		'\x6DE', '\x3', '\x2', '\x2', '\x2', '\x6DD', '\x6DB', '\x3', '\x2', '\x2', 
		'\x2', '\x6DE', '\x6DF', '\a', '\x5', '\x2', '\x2', '\x6DF', '\x6E2', 
		'\x3', '\x2', '\x2', '\x2', '\x6E0', '\x6E2', '\x5', '*', '\x16', '\x2', 
		'\x6E1', '\x6D5', '\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6E0', '\x3', 
		'\x2', '\x2', '\x2', '\x6E2', '\x6E4', '\x3', '\x2', '\x2', '\x2', '\x6E3', 
		'\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E4', '\x3', '\x2', '\x2', 
		'\x2', '\x6E4', 'g', '\x3', '\x2', '\x2', '\x2', '\x6E5', '\x6E6', '\a', 
		'\xF4', '\x2', '\x2', '\x6E6', '\x6E7', '\a', '\x4', '\x2', '\x2', '\x6E7', 
		'\x6E8', '\x5', '\xCA', '\x66', '\x2', '\x6E8', '\x6F0', '\a', '\x5', 
		'\x2', '\x2', '\x6E9', '\x6EB', '\a', '\x1E', '\x2', '\x2', '\x6EA', '\x6E9', 
		'\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EB', '\x3', '\x2', '\x2', '\x2', 
		'\x6EB', '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6EC', '\x6EE', '\x5', 
		'\xD6', 'l', '\x2', '\x6ED', '\x6EF', '\x5', '^', '\x30', '\x2', '\x6EE', 
		'\x6ED', '\x3', '\x2', '\x2', '\x2', '\x6EE', '\x6EF', '\x3', '\x2', '\x2', 
		'\x2', '\x6EF', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6EA', 
		'\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6F1', '\x3', '\x2', '\x2', '\x2', 
		'\x6F1', '\x700', '\x3', '\x2', '\x2', '\x2', '\x6F2', '\x6F3', '\a', 
		'\xF4', '\x2', '\x2', '\x6F3', '\x6F4', '\a', '\x4', '\x2', '\x2', '\x6F4', 
		'\x6F5', '\x5', '\xE', '\b', '\x2', '\x6F5', '\x6FD', '\a', '\x5', '\x2', 
		'\x2', '\x6F6', '\x6F8', '\a', '\x1E', '\x2', '\x2', '\x6F7', '\x6F6', 
		'\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6F8', '\x3', '\x2', '\x2', '\x2', 
		'\x6F8', '\x6F9', '\x3', '\x2', '\x2', '\x2', '\x6F9', '\x6FB', '\x5', 
		'\xD6', 'l', '\x2', '\x6FA', '\x6FC', '\x5', '^', '\x30', '\x2', '\x6FB', 
		'\x6FA', '\x3', '\x2', '\x2', '\x2', '\x6FB', '\x6FC', '\x3', '\x2', '\x2', 
		'\x2', '\x6FC', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6F7', 
		'\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6FE', '\x3', '\x2', '\x2', '\x2', 
		'\x6FE', '\x700', '\x3', '\x2', '\x2', '\x2', '\x6FF', '\x6E5', '\x3', 
		'\x2', '\x2', '\x2', '\x6FF', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x700', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x701', '\x702', '\a', 'L', '\x2', '\x2', 
		'\x702', '\x703', '\a', '\x4', '\x2', '\x2', '\x703', '\x708', '\x5', 
		'l', '\x37', '\x2', '\x704', '\x705', '\a', '\x6', '\x2', '\x2', '\x705', 
		'\x707', '\x5', 'l', '\x37', '\x2', '\x706', '\x704', '\x3', '\x2', '\x2', 
		'\x2', '\x707', '\x70A', '\x3', '\x2', '\x2', '\x2', '\x708', '\x706', 
		'\x3', '\x2', '\x2', '\x2', '\x708', '\x709', '\x3', '\x2', '\x2', '\x2', 
		'\x709', '\x70B', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x708', '\x3', 
		'\x2', '\x2', '\x2', '\x70B', '\x70C', '\a', '\x5', '\x2', '\x2', '\x70C', 
		'\x714', '\x3', '\x2', '\x2', '\x2', '\x70D', '\x70E', '\a', ')', '\x2', 
		'\x2', '\x70E', '\x70F', '\a', '\x4', '\x2', '\x2', '\x70F', '\x710', 
		'\a', '\xAB', '\x2', '\x2', '\x710', '\x711', '\a', '\x1E', '\x2', '\x2', 
		'\x711', '\x712', '\a', 'L', '\x2', '\x2', '\x712', '\x714', '\a', '\x5', 
		'\x2', '\x2', '\x713', '\x701', '\x3', '\x2', '\x2', '\x2', '\x713', '\x70D', 
		'\x3', '\x2', '\x2', '\x2', '\x714', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x715', '\x717', '\x5', '\xD6', 'l', '\x2', '\x716', '\x718', '\x5', 
		'\xA0', 'Q', '\x2', '\x717', '\x716', '\x3', '\x2', '\x2', '\x2', '\x717', 
		'\x718', '\x3', '\x2', '\x2', '\x2', '\x718', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\x719', '\x71A', '\a', '\x4', '\x2', '\x2', '\x71A', '\x71B', 
		'\x5', '\xCA', '\x66', '\x2', '\x71B', '\x71C', '\a', '\x6', '\x2', '\x2', 
		'\x71C', '\x721', '\x5', '\xCA', '\x66', '\x2', '\x71D', '\x71E', '\a', 
		'\x6', '\x2', '\x2', '\x71E', '\x720', '\x5', '\xCA', '\x66', '\x2', '\x71F', 
		'\x71D', '\x3', '\x2', '\x2', '\x2', '\x720', '\x723', '\x3', '\x2', '\x2', 
		'\x2', '\x721', '\x71F', '\x3', '\x2', '\x2', '\x2', '\x721', '\x722', 
		'\x3', '\x2', '\x2', '\x2', '\x722', '\x724', '\x3', '\x2', '\x2', '\x2', 
		'\x723', '\x721', '\x3', '\x2', '\x2', '\x2', '\x724', '\x725', '\a', 
		'\x5', '\x2', '\x2', '\x725', 'o', '\x3', '\x2', '\x2', '\x2', '\x726', 
		'\x727', '\x5', 'r', ':', '\x2', '\x727', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x728', '\x729', '\b', ':', '\x1', '\x2', '\x729', '\x72B', '\x5', 'v', 
		'<', '\x2', '\x72A', '\x72C', '\x5', 't', ';', '\x2', '\x72B', '\x72A', 
		'\x3', '\x2', '\x2', '\x2', '\x72B', '\x72C', '\x3', '\x2', '\x2', '\x2', 
		'\x72C', '\x730', '\x3', '\x2', '\x2', '\x2', '\x72D', '\x72E', '\a', 
		'\xAA', '\x2', '\x2', '\x72E', '\x730', '\x5', 'r', ':', '\x5', '\x72F', 
		'\x728', '\x3', '\x2', '\x2', '\x2', '\x72F', '\x72D', '\x3', '\x2', '\x2', 
		'\x2', '\x730', '\x739', '\x3', '\x2', '\x2', '\x2', '\x731', '\x732', 
		'\f', '\x4', '\x2', '\x2', '\x732', '\x733', '\a', '\x1B', '\x2', '\x2', 
		'\x733', '\x738', '\x5', 'r', ':', '\x5', '\x734', '\x735', '\f', '\x3', 
		'\x2', '\x2', '\x735', '\x736', '\a', '\xB6', '\x2', '\x2', '\x736', '\x738', 
		'\x5', 'r', ':', '\x4', '\x737', '\x731', '\x3', '\x2', '\x2', '\x2', 
		'\x737', '\x734', '\x3', '\x2', '\x2', '\x2', '\x738', '\x73B', '\x3', 
		'\x2', '\x2', '\x2', '\x739', '\x737', '\x3', '\x2', '\x2', '\x2', '\x739', 
		'\x73A', '\x3', '\x2', '\x2', '\x2', '\x73A', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x73B', '\x739', '\x3', '\x2', '\x2', '\x2', '\x73C', '\x73D', 
		'\x5', '\x94', 'K', '\x2', '\x73D', '\x73E', '\x5', 'v', '<', '\x2', '\x73E', 
		'\x77A', '\x3', '\x2', '\x2', '\x2', '\x73F', '\x740', '\x5', '\x94', 
		'K', '\x2', '\x740', '\x741', '\x5', '\x96', 'L', '\x2', '\x741', '\x742', 
		'\a', '\x4', '\x2', '\x2', '\x742', '\x743', '\x5', '\xE', '\b', '\x2', 
		'\x743', '\x744', '\a', '\x5', '\x2', '\x2', '\x744', '\x77A', '\x3', 
		'\x2', '\x2', '\x2', '\x745', '\x747', '\a', '\xAA', '\x2', '\x2', '\x746', 
		'\x745', '\x3', '\x2', '\x2', '\x2', '\x746', '\x747', '\x3', '\x2', '\x2', 
		'\x2', '\x747', '\x748', '\x3', '\x2', '\x2', '\x2', '\x748', '\x749', 
		'\a', '#', '\x2', '\x2', '\x749', '\x74A', '\x5', 'v', '<', '\x2', '\x74A', 
		'\x74B', '\a', '\x1B', '\x2', '\x2', '\x74B', '\x74C', '\x5', 'v', '<', 
		'\x2', '\x74C', '\x77A', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x74F', 
		'\a', '\xAA', '\x2', '\x2', '\x74E', '\x74D', '\x3', '\x2', '\x2', '\x2', 
		'\x74E', '\x74F', '\x3', '\x2', '\x2', '\x2', '\x74F', '\x750', '\x3', 
		'\x2', '\x2', '\x2', '\x750', '\x751', '\a', 't', '\x2', '\x2', '\x751', 
		'\x752', '\a', '\x4', '\x2', '\x2', '\x752', '\x757', '\x5', 'p', '\x39', 
		'\x2', '\x753', '\x754', '\a', '\x6', '\x2', '\x2', '\x754', '\x756', 
		'\x5', 'p', '\x39', '\x2', '\x755', '\x753', '\x3', '\x2', '\x2', '\x2', 
		'\x756', '\x759', '\x3', '\x2', '\x2', '\x2', '\x757', '\x755', '\x3', 
		'\x2', '\x2', '\x2', '\x757', '\x758', '\x3', '\x2', '\x2', '\x2', '\x758', 
		'\x75A', '\x3', '\x2', '\x2', '\x2', '\x759', '\x757', '\x3', '\x2', '\x2', 
		'\x2', '\x75A', '\x75B', '\a', '\x5', '\x2', '\x2', '\x75B', '\x77A', 
		'\x3', '\x2', '\x2', '\x2', '\x75C', '\x75E', '\a', '\xAA', '\x2', '\x2', 
		'\x75D', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x75D', '\x75E', '\x3', 
		'\x2', '\x2', '\x2', '\x75E', '\x75F', '\x3', '\x2', '\x2', '\x2', '\x75F', 
		'\x760', '\a', 't', '\x2', '\x2', '\x760', '\x761', '\a', '\x4', '\x2', 
		'\x2', '\x761', '\x762', '\x5', '\xE', '\b', '\x2', '\x762', '\x763', 
		'\a', '\x5', '\x2', '\x2', '\x763', '\x77A', '\x3', '\x2', '\x2', '\x2', 
		'\x764', '\x766', '\a', '\xAA', '\x2', '\x2', '\x765', '\x764', '\x3', 
		'\x2', '\x2', '\x2', '\x765', '\x766', '\x3', '\x2', '\x2', '\x2', '\x766', 
		'\x767', '\x3', '\x2', '\x2', '\x2', '\x767', '\x768', '\a', '\x90', '\x2', 
		'\x2', '\x768', '\x76B', '\x5', 'v', '<', '\x2', '\x769', '\x76A', '\a', 
		'V', '\x2', '\x2', '\x76A', '\x76C', '\x5', 'v', '<', '\x2', '\x76B', 
		'\x769', '\x3', '\x2', '\x2', '\x2', '\x76B', '\x76C', '\x3', '\x2', '\x2', 
		'\x2', '\x76C', '\x77A', '\x3', '\x2', '\x2', '\x2', '\x76D', '\x76F', 
		'\a', '\x7F', '\x2', '\x2', '\x76E', '\x770', '\a', '\xAA', '\x2', '\x2', 
		'\x76F', '\x76E', '\x3', '\x2', '\x2', '\x2', '\x76F', '\x770', '\x3', 
		'\x2', '\x2', '\x2', '\x770', '\x771', '\x3', '\x2', '\x2', '\x2', '\x771', 
		'\x77A', '\a', '\xAB', '\x2', '\x2', '\x772', '\x774', '\a', '\x7F', '\x2', 
		'\x2', '\x773', '\x775', '\a', '\xAA', '\x2', '\x2', '\x774', '\x773', 
		'\x3', '\x2', '\x2', '\x2', '\x774', '\x775', '\x3', '\x2', '\x2', '\x2', 
		'\x775', '\x776', '\x3', '\x2', '\x2', '\x2', '\x776', '\x777', '\a', 
		'M', '\x2', '\x2', '\x777', '\x778', '\a', '\x65', '\x2', '\x2', '\x778', 
		'\x77A', '\x5', 'v', '<', '\x2', '\x779', '\x73C', '\x3', '\x2', '\x2', 
		'\x2', '\x779', '\x73F', '\x3', '\x2', '\x2', '\x2', '\x779', '\x746', 
		'\x3', '\x2', '\x2', '\x2', '\x779', '\x74E', '\x3', '\x2', '\x2', '\x2', 
		'\x779', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x779', '\x765', '\x3', 
		'\x2', '\x2', '\x2', '\x779', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x779', 
		'\x772', '\x3', '\x2', '\x2', '\x2', '\x77A', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x77B', '\x77C', '\b', '<', '\x1', '\x2', '\x77C', '\x780', '\x5', 
		'x', '=', '\x2', '\x77D', '\x77E', '\t', '\x11', '\x2', '\x2', '\x77E', 
		'\x780', '\x5', 'v', '<', '\x6', '\x77F', '\x77B', '\x3', '\x2', '\x2', 
		'\x2', '\x77F', '\x77D', '\x3', '\x2', '\x2', '\x2', '\x780', '\x78F', 
		'\x3', '\x2', '\x2', '\x2', '\x781', '\x782', '\f', '\x5', '\x2', '\x2', 
		'\x782', '\x783', '\t', '\x12', '\x2', '\x2', '\x783', '\x78E', '\x5', 
		'v', '<', '\x6', '\x784', '\x785', '\f', '\x4', '\x2', '\x2', '\x785', 
		'\x786', '\t', '\x11', '\x2', '\x2', '\x786', '\x78E', '\x5', 'v', '<', 
		'\x5', '\x787', '\x788', '\f', '\x3', '\x2', '\x2', '\x788', '\x789', 
		'\a', '\x131', '\x2', '\x2', '\x789', '\x78E', '\x5', 'v', '<', '\x4', 
		'\x78A', '\x78B', '\f', '\a', '\x2', '\x2', '\x78B', '\x78C', '\a', ' ', 
		'\x2', '\x2', '\x78C', '\x78E', '\x5', '\x92', 'J', '\x2', '\x78D', '\x781', 
		'\x3', '\x2', '\x2', '\x2', '\x78D', '\x784', '\x3', '\x2', '\x2', '\x2', 
		'\x78D', '\x787', '\x3', '\x2', '\x2', '\x2', '\x78D', '\x78A', '\x3', 
		'\x2', '\x2', '\x2', '\x78E', '\x791', '\x3', '\x2', '\x2', '\x2', '\x78F', 
		'\x78D', '\x3', '\x2', '\x2', '\x2', '\x78F', '\x790', '\x3', '\x2', '\x2', 
		'\x2', '\x790', 'w', '\x3', '\x2', '\x2', '\x2', '\x791', '\x78F', '\x3', 
		'\x2', '\x2', '\x2', '\x792', '\x793', '\b', '=', '\x1', '\x2', '\x793', 
		'\x955', '\a', '\xAB', '\x2', '\x2', '\x794', '\x955', '\x5', '\x9A', 
		'N', '\x2', '\x795', '\x796', '\x5', '\xD6', 'l', '\x2', '\x796', '\x797', 
		'\x5', '\x90', 'I', '\x2', '\x797', '\x955', '\x3', '\x2', '\x2', '\x2', 
		'\x798', '\x799', '\a', 'O', '\x2', '\x2', '\x799', '\x79A', '\a', '\xC8', 
		'\x2', '\x2', '\x79A', '\x955', '\x5', '\x90', 'I', '\x2', '\x79B', '\x955', 
		'\x5', '\xD8', 'm', '\x2', '\x79C', '\x955', '\x5', '\x98', 'M', '\x2', 
		'\x79D', '\x955', '\x5', '\x90', 'I', '\x2', '\x79E', '\x955', '\a', '\x135', 
		'\x2', '\x2', '\x79F', '\x955', '\a', '\x132', '\x2', '\x2', '\x7A0', 
		'\x7A1', '\a', '\xC6', '\x2', '\x2', '\x7A1', '\x7A2', '\a', '\x4', '\x2', 
		'\x2', '\x7A2', '\x7A3', '\x5', 'v', '<', '\x2', '\x7A3', '\x7A4', '\a', 
		't', '\x2', '\x2', '\x7A4', '\x7A5', '\x5', 'v', '<', '\x2', '\x7A5', 
		'\x7A6', '\a', '\x5', '\x2', '\x2', '\x7A6', '\x955', '\x3', '\x2', '\x2', 
		'\x2', '\x7A7', '\x7A8', '\a', '\x4', '\x2', '\x2', '\x7A8', '\x7AB', 
		'\x5', 'p', '\x39', '\x2', '\x7A9', '\x7AA', '\a', '\x6', '\x2', '\x2', 
		'\x7AA', '\x7AC', '\x5', 'p', '\x39', '\x2', '\x7AB', '\x7A9', '\x3', 
		'\x2', '\x2', '\x2', '\x7AC', '\x7AD', '\x3', '\x2', '\x2', '\x2', '\x7AD', 
		'\x7AB', '\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7AE', '\x3', '\x2', '\x2', 
		'\x2', '\x7AE', '\x7AF', '\x3', '\x2', '\x2', '\x2', '\x7AF', '\x7B0', 
		'\a', '\x5', '\x2', '\x2', '\x7B0', '\x955', '\x3', '\x2', '\x2', '\x2', 
		'\x7B1', '\x7B2', '\a', '\xDF', '\x2', '\x2', '\x7B2', '\x7B3', '\a', 
		'\x4', '\x2', '\x2', '\x7B3', '\x7B8', '\x5', 'p', '\x39', '\x2', '\x7B4', 
		'\x7B5', '\a', '\x6', '\x2', '\x2', '\x7B5', '\x7B7', '\x5', 'p', '\x39', 
		'\x2', '\x7B6', '\x7B4', '\x3', '\x2', '\x2', '\x2', '\x7B7', '\x7BA', 
		'\x3', '\x2', '\x2', '\x2', '\x7B8', '\x7B6', '\x3', '\x2', '\x2', '\x2', 
		'\x7B8', '\x7B9', '\x3', '\x2', '\x2', '\x2', '\x7B9', '\x7BB', '\x3', 
		'\x2', '\x2', '\x2', '\x7BA', '\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7BB', 
		'\x7BC', '\a', '\x5', '\x2', '\x2', '\x7BC', '\x955', '\x3', '\x2', '\x2', 
		'\x2', '\x7BD', '\x7BE', '\a', '\x92', '\x2', '\x2', '\x7BE', '\x7C0', 
		'\a', '\x4', '\x2', '\x2', '\x7BF', '\x7C1', '\x5', ':', '\x1E', '\x2', 
		'\x7C0', '\x7BF', '\x3', '\x2', '\x2', '\x2', '\x7C0', '\x7C1', '\x3', 
		'\x2', '\x2', '\x2', '\x7C1', '\x7C2', '\x3', '\x2', '\x2', '\x2', '\x7C2', 
		'\x7C5', '\x5', 'p', '\x39', '\x2', '\x7C3', '\x7C4', '\a', '\x6', '\x2', 
		'\x2', '\x7C4', '\x7C6', '\x5', '\x90', 'I', '\x2', '\x7C5', '\x7C3', 
		'\x3', '\x2', '\x2', '\x2', '\x7C5', '\x7C6', '\x3', '\x2', '\x2', '\x2', 
		'\x7C6', '\x7CA', '\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7C8', '\a', 
		'\xB2', '\x2', '\x2', '\x7C8', '\x7C9', '\a', '\xBC', '\x2', '\x2', '\x7C9', 
		'\x7CB', '\x5', 'J', '&', '\x2', '\x7CA', '\x7C7', '\x3', '\x2', '\x2', 
		'\x2', '\x7CA', '\x7CB', '\x3', '\x2', '\x2', '\x2', '\x7CB', '\x7CC', 
		'\x3', '\x2', '\x2', '\x2', '\x7CC', '\x7CD', '\a', '\x5', '\x2', '\x2', 
		'\x7CD', '\x7CE', '\a', '\x11F', '\x2', '\x2', '\x7CE', '\x7CF', '\a', 
		'm', '\x2', '\x2', '\x7CF', '\x7D0', '\a', '\x4', '\x2', '\x2', '\x7D0', 
		'\x7D1', '\a', '\xB7', '\x2', '\x2', '\x7D1', '\x7D2', '\a', '%', '\x2', 
		'\x2', '\x7D2', '\x7D7', '\x5', '*', '\x16', '\x2', '\x7D3', '\x7D4', 
		'\a', '\x6', '\x2', '\x2', '\x7D4', '\x7D6', '\x5', '*', '\x16', '\x2', 
		'\x7D5', '\x7D3', '\x3', '\x2', '\x2', '\x2', '\x7D6', '\x7D9', '\x3', 
		'\x2', '\x2', '\x2', '\x7D7', '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x7D7', 
		'\x7D8', '\x3', '\x2', '\x2', '\x2', '\x7D8', '\x7DA', '\x3', '\x2', '\x2', 
		'\x2', '\x7D9', '\x7D7', '\x3', '\x2', '\x2', '\x2', '\x7DA', '\x7DB', 
		'\a', '\x5', '\x2', '\x2', '\x7DB', '\x955', '\x3', '\x2', '\x2', '\x2', 
		'\x7DC', '\x7DE', '\x5', '\x8C', 'G', '\x2', '\x7DD', '\x7DC', '\x3', 
		'\x2', '\x2', '\x2', '\x7DD', '\x7DE', '\x3', '\x2', '\x2', '\x2', '\x7DE', 
		'\x7DF', '\x3', '\x2', '\x2', '\x2', '\x7DF', '\x7E0', '\x5', '\xCA', 
		'\x66', '\x2', '\x7E0', '\x7E4', '\a', '\x4', '\x2', '\x2', '\x7E1', '\x7E2', 
		'\x5', '\xD6', 'l', '\x2', '\x7E2', '\x7E3', '\a', '\x3', '\x2', '\x2', 
		'\x7E3', '\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E4', '\x7E1', '\x3', 
		'\x2', '\x2', '\x2', '\x7E4', '\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E5', 
		'\x7E6', '\x3', '\x2', '\x2', '\x2', '\x7E6', '\x7E7', '\a', '\x12E', 
		'\x2', '\x2', '\x7E7', '\x7E9', '\a', '\x5', '\x2', '\x2', '\x7E8', '\x7EA', 
		'\x5', '\xA8', 'U', '\x2', '\x7E9', '\x7E8', '\x3', '\x2', '\x2', '\x2', 
		'\x7E9', '\x7EA', '\x3', '\x2', '\x2', '\x2', '\x7EA', '\x7EC', '\x3', 
		'\x2', '\x2', '\x2', '\x7EB', '\x7ED', '\x5', '\xAC', 'W', '\x2', '\x7EC', 
		'\x7EB', '\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7ED', '\x3', '\x2', '\x2', 
		'\x2', '\x7ED', '\x955', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7F0', 
		'\x5', '\x8C', 'G', '\x2', '\x7EF', '\x7EE', '\x3', '\x2', '\x2', '\x2', 
		'\x7EF', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F1', '\x3', 
		'\x2', '\x2', '\x2', '\x7F1', '\x7F2', '\x5', '\xCA', '\x66', '\x2', '\x7F2', 
		'\x7FE', '\a', '\x4', '\x2', '\x2', '\x7F3', '\x7F5', '\x5', ':', '\x1E', 
		'\x2', '\x7F4', '\x7F3', '\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F5', 
		'\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F6', '\x3', '\x2', '\x2', '\x2', 
		'\x7F6', '\x7FB', '\x5', 'p', '\x39', '\x2', '\x7F7', '\x7F8', '\a', '\x6', 
		'\x2', '\x2', '\x7F8', '\x7FA', '\x5', 'p', '\x39', '\x2', '\x7F9', '\x7F7', 
		'\x3', '\x2', '\x2', '\x2', '\x7FA', '\x7FD', '\x3', '\x2', '\x2', '\x2', 
		'\x7FB', '\x7F9', '\x3', '\x2', '\x2', '\x2', '\x7FB', '\x7FC', '\x3', 
		'\x2', '\x2', '\x2', '\x7FC', '\x7FF', '\x3', '\x2', '\x2', '\x2', '\x7FD', 
		'\x7FB', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x7F4', '\x3', '\x2', '\x2', 
		'\x2', '\x7FE', '\x7FF', '\x3', '\x2', '\x2', '\x2', '\x7FF', '\x80A', 
		'\x3', '\x2', '\x2', '\x2', '\x800', '\x801', '\a', '\xB7', '\x2', '\x2', 
		'\x801', '\x802', '\a', '%', '\x2', '\x2', '\x802', '\x807', '\x5', '*', 
		'\x16', '\x2', '\x803', '\x804', '\a', '\x6', '\x2', '\x2', '\x804', '\x806', 
		'\x5', '*', '\x16', '\x2', '\x805', '\x803', '\x3', '\x2', '\x2', '\x2', 
		'\x806', '\x809', '\x3', '\x2', '\x2', '\x2', '\x807', '\x805', '\x3', 
		'\x2', '\x2', '\x2', '\x807', '\x808', '\x3', '\x2', '\x2', '\x2', '\x808', 
		'\x80B', '\x3', '\x2', '\x2', '\x2', '\x809', '\x807', '\x3', '\x2', '\x2', 
		'\x2', '\x80A', '\x800', '\x3', '\x2', '\x2', '\x2', '\x80A', '\x80B', 
		'\x3', '\x2', '\x2', '\x2', '\x80B', '\x80C', '\x3', '\x2', '\x2', '\x2', 
		'\x80C', '\x80E', '\a', '\x5', '\x2', '\x2', '\x80D', '\x80F', '\x5', 
		'\xA8', 'U', '\x2', '\x80E', '\x80D', '\x3', '\x2', '\x2', '\x2', '\x80E', 
		'\x80F', '\x3', '\x2', '\x2', '\x2', '\x80F', '\x814', '\x3', '\x2', '\x2', 
		'\x2', '\x810', '\x812', '\x5', '\x8E', 'H', '\x2', '\x811', '\x810', 
		'\x3', '\x2', '\x2', '\x2', '\x811', '\x812', '\x3', '\x2', '\x2', '\x2', 
		'\x812', '\x813', '\x3', '\x2', '\x2', '\x2', '\x813', '\x815', '\x5', 
		'\xAC', 'W', '\x2', '\x814', '\x811', '\x3', '\x2', '\x2', '\x2', '\x814', 
		'\x815', '\x3', '\x2', '\x2', '\x2', '\x815', '\x955', '\x3', '\x2', '\x2', 
		'\x2', '\x816', '\x817', '\x5', '\xD6', 'l', '\x2', '\x817', '\x818', 
		'\x5', '\xAC', 'W', '\x2', '\x818', '\x955', '\x3', '\x2', '\x2', '\x2', 
		'\x819', '\x81A', '\x5', '\xD6', 'l', '\x2', '\x81A', '\x81B', '\a', '\t', 
		'\x2', '\x2', '\x81B', '\x81C', '\x5', 'p', '\x39', '\x2', '\x81C', '\x955', 
		'\x3', '\x2', '\x2', '\x2', '\x81D', '\x826', '\a', '\x4', '\x2', '\x2', 
		'\x81E', '\x823', '\x5', '\xD6', 'l', '\x2', '\x81F', '\x820', '\a', '\x6', 
		'\x2', '\x2', '\x820', '\x822', '\x5', '\xD6', 'l', '\x2', '\x821', '\x81F', 
		'\x3', '\x2', '\x2', '\x2', '\x822', '\x825', '\x3', '\x2', '\x2', '\x2', 
		'\x823', '\x821', '\x3', '\x2', '\x2', '\x2', '\x823', '\x824', '\x3', 
		'\x2', '\x2', '\x2', '\x824', '\x827', '\x3', '\x2', '\x2', '\x2', '\x825', 
		'\x823', '\x3', '\x2', '\x2', '\x2', '\x826', '\x81E', '\x3', '\x2', '\x2', 
		'\x2', '\x826', '\x827', '\x3', '\x2', '\x2', '\x2', '\x827', '\x828', 
		'\x3', '\x2', '\x2', '\x2', '\x828', '\x829', '\a', '\x5', '\x2', '\x2', 
		'\x829', '\x82A', '\a', '\t', '\x2', '\x2', '\x82A', '\x955', '\x5', 'p', 
		'\x39', '\x2', '\x82B', '\x82C', '\a', '\x4', '\x2', '\x2', '\x82C', '\x82D', 
		'\x5', '\xE', '\b', '\x2', '\x82D', '\x82E', '\a', '\x5', '\x2', '\x2', 
		'\x82E', '\x955', '\x3', '\x2', '\x2', '\x2', '\x82F', '\x830', '\a', 
		'Z', '\x2', '\x2', '\x830', '\x831', '\a', '\x4', '\x2', '\x2', '\x831', 
		'\x832', '\x5', '\xE', '\b', '\x2', '\x832', '\x833', '\a', '\x5', '\x2', 
		'\x2', '\x833', '\x955', '\x3', '\x2', '\x2', '\x2', '\x834', '\x835', 
		'\a', '(', '\x2', '\x2', '\x835', '\x837', '\x5', 'p', '\x39', '\x2', 
		'\x836', '\x838', '\x5', '\xA6', 'T', '\x2', '\x837', '\x836', '\x3', 
		'\x2', '\x2', '\x2', '\x838', '\x839', '\x3', '\x2', '\x2', '\x2', '\x839', 
		'\x837', '\x3', '\x2', '\x2', '\x2', '\x839', '\x83A', '\x3', '\x2', '\x2', 
		'\x2', '\x83A', '\x83D', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x83C', 
		'\a', 'Q', '\x2', '\x2', '\x83C', '\x83E', '\x5', 'p', '\x39', '\x2', 
		'\x83D', '\x83B', '\x3', '\x2', '\x2', '\x2', '\x83D', '\x83E', '\x3', 
		'\x2', '\x2', '\x2', '\x83E', '\x83F', '\x3', '\x2', '\x2', '\x2', '\x83F', 
		'\x840', '\a', 'T', '\x2', '\x2', '\x840', '\x955', '\x3', '\x2', '\x2', 
		'\x2', '\x841', '\x843', '\a', '(', '\x2', '\x2', '\x842', '\x844', '\x5', 
		'\xA6', 'T', '\x2', '\x843', '\x842', '\x3', '\x2', '\x2', '\x2', '\x844', 
		'\x845', '\x3', '\x2', '\x2', '\x2', '\x845', '\x843', '\x3', '\x2', '\x2', 
		'\x2', '\x845', '\x846', '\x3', '\x2', '\x2', '\x2', '\x846', '\x849', 
		'\x3', '\x2', '\x2', '\x2', '\x847', '\x848', '\a', 'Q', '\x2', '\x2', 
		'\x848', '\x84A', '\x5', 'p', '\x39', '\x2', '\x849', '\x847', '\x3', 
		'\x2', '\x2', '\x2', '\x849', '\x84A', '\x3', '\x2', '\x2', '\x2', '\x84A', 
		'\x84B', '\x3', '\x2', '\x2', '\x2', '\x84B', '\x84C', '\a', 'T', '\x2', 
		'\x2', '\x84C', '\x955', '\x3', '\x2', '\x2', '\x2', '\x84D', '\x84E', 
		'\a', ')', '\x2', '\x2', '\x84E', '\x84F', '\a', '\x4', '\x2', '\x2', 
		'\x84F', '\x850', '\x5', 'p', '\x39', '\x2', '\x850', '\x851', '\a', '\x1E', 
		'\x2', '\x2', '\x851', '\x852', '\x5', '\xA0', 'Q', '\x2', '\x852', '\x853', 
		'\a', '\x5', '\x2', '\x2', '\x853', '\x955', '\x3', '\x2', '\x2', '\x2', 
		'\x854', '\x855', '\a', '\x103', '\x2', '\x2', '\x855', '\x856', '\a', 
		'\x4', '\x2', '\x2', '\x856', '\x857', '\x5', 'p', '\x39', '\x2', '\x857', 
		'\x858', '\a', '\x1E', '\x2', '\x2', '\x858', '\x859', '\x5', '\xA0', 
		'Q', '\x2', '\x859', '\x85A', '\a', '\x5', '\x2', '\x2', '\x85A', '\x955', 
		'\x3', '\x2', '\x2', '\x2', '\x85B', '\x85C', '\a', '\x1D', '\x2', '\x2', 
		'\x85C', '\x865', '\a', '\n', '\x2', '\x2', '\x85D', '\x862', '\x5', 'p', 
		'\x39', '\x2', '\x85E', '\x85F', '\a', '\x6', '\x2', '\x2', '\x85F', '\x861', 
		'\x5', 'p', '\x39', '\x2', '\x860', '\x85E', '\x3', '\x2', '\x2', '\x2', 
		'\x861', '\x864', '\x3', '\x2', '\x2', '\x2', '\x862', '\x860', '\x3', 
		'\x2', '\x2', '\x2', '\x862', '\x863', '\x3', '\x2', '\x2', '\x2', '\x863', 
		'\x866', '\x3', '\x2', '\x2', '\x2', '\x864', '\x862', '\x3', '\x2', '\x2', 
		'\x2', '\x865', '\x85D', '\x3', '\x2', '\x2', '\x2', '\x865', '\x866', 
		'\x3', '\x2', '\x2', '\x2', '\x866', '\x867', '\x3', '\x2', '\x2', '\x2', 
		'\x867', '\x955', '\a', '\v', '\x2', '\x2', '\x868', '\x955', '\x5', '\xD6', 
		'l', '\x2', '\x869', '\x955', '\a', ':', '\x2', '\x2', '\x86A', '\x86E', 
		'\a', '>', '\x2', '\x2', '\x86B', '\x86C', '\a', '\x4', '\x2', '\x2', 
		'\x86C', '\x86D', '\a', '\x136', '\x2', '\x2', '\x86D', '\x86F', '\a', 
		'\x5', '\x2', '\x2', '\x86E', '\x86B', '\x3', '\x2', '\x2', '\x2', '\x86E', 
		'\x86F', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x955', '\x3', '\x2', '\x2', 
		'\x2', '\x870', '\x874', '\a', '?', '\x2', '\x2', '\x871', '\x872', '\a', 
		'\x4', '\x2', '\x2', '\x872', '\x873', '\a', '\x136', '\x2', '\x2', '\x873', 
		'\x875', '\a', '\x5', '\x2', '\x2', '\x874', '\x871', '\x3', '\x2', '\x2', 
		'\x2', '\x874', '\x875', '\x3', '\x2', '\x2', '\x2', '\x875', '\x955', 
		'\x3', '\x2', '\x2', '\x2', '\x876', '\x87A', '\a', '\x94', '\x2', '\x2', 
		'\x877', '\x878', '\a', '\x4', '\x2', '\x2', '\x878', '\x879', '\a', '\x136', 
		'\x2', '\x2', '\x879', '\x87B', '\a', '\x5', '\x2', '\x2', '\x87A', '\x877', 
		'\x3', '\x2', '\x2', '\x2', '\x87A', '\x87B', '\x3', '\x2', '\x2', '\x2', 
		'\x87B', '\x955', '\x3', '\x2', '\x2', '\x2', '\x87C', '\x880', '\a', 
		'\x95', '\x2', '\x2', '\x87D', '\x87E', '\a', '\x4', '\x2', '\x2', '\x87E', 
		'\x87F', '\a', '\x136', '\x2', '\x2', '\x87F', '\x881', '\a', '\x5', '\x2', 
		'\x2', '\x880', '\x87D', '\x3', '\x2', '\x2', '\x2', '\x880', '\x881', 
		'\x3', '\x2', '\x2', '\x2', '\x881', '\x955', '\x3', '\x2', '\x2', '\x2', 
		'\x882', '\x955', '\a', '@', '\x2', '\x2', '\x883', '\x955', '\a', '\x39', 
		'\x2', '\x2', '\x884', '\x955', '\a', '=', '\x2', '\x2', '\x885', '\x955', 
		'\a', ';', '\x2', '\x2', '\x886', '\x887', '\a', '\x100', '\x2', '\x2', 
		'\x887', '\x88F', '\a', '\x4', '\x2', '\x2', '\x888', '\x88A', '\x5', 
		'H', '%', '\x2', '\x889', '\x888', '\x3', '\x2', '\x2', '\x2', '\x889', 
		'\x88A', '\x3', '\x2', '\x2', '\x2', '\x88A', '\x88C', '\x3', '\x2', '\x2', 
		'\x2', '\x88B', '\x88D', '\x5', 'v', '<', '\x2', '\x88C', '\x88B', '\x3', 
		'\x2', '\x2', '\x2', '\x88C', '\x88D', '\x3', '\x2', '\x2', '\x2', '\x88D', 
		'\x88E', '\x3', '\x2', '\x2', '\x2', '\x88E', '\x890', '\a', '\x65', '\x2', 
		'\x2', '\x88F', '\x889', '\x3', '\x2', '\x2', '\x2', '\x88F', '\x890', 
		'\x3', '\x2', '\x2', '\x2', '\x890', '\x891', '\x3', '\x2', '\x2', '\x2', 
		'\x891', '\x892', '\x5', 'v', '<', '\x2', '\x892', '\x893', '\a', '\x5', 
		'\x2', '\x2', '\x893', '\x955', '\x3', '\x2', '\x2', '\x2', '\x894', '\x895', 
		'\a', '\x100', '\x2', '\x2', '\x895', '\x896', '\a', '\x4', '\x2', '\x2', 
		'\x896', '\x897', '\x5', 'v', '<', '\x2', '\x897', '\x898', '\a', '\x6', 
		'\x2', '\x2', '\x898', '\x899', '\x5', 'v', '<', '\x2', '\x899', '\x89A', 
		'\a', '\x5', '\x2', '\x2', '\x89A', '\x955', '\x3', '\x2', '\x2', '\x2', 
		'\x89B', '\x89C', '\a', '\xF2', '\x2', '\x2', '\x89C', '\x89D', '\a', 
		'\x4', '\x2', '\x2', '\x89D', '\x89E', '\x5', 'v', '<', '\x2', '\x89E', 
		'\x89F', '\a', '\x65', '\x2', '\x2', '\x89F', '\x8A2', '\x5', 'v', '<', 
		'\x2', '\x8A0', '\x8A1', '\a', '\x63', '\x2', '\x2', '\x8A1', '\x8A3', 
		'\x5', 'v', '<', '\x2', '\x8A2', '\x8A0', '\x3', '\x2', '\x2', '\x2', 
		'\x8A2', '\x8A3', '\x3', '\x2', '\x2', '\x2', '\x8A3', '\x8A4', '\x3', 
		'\x2', '\x2', '\x2', '\x8A4', '\x8A5', '\a', '\x5', '\x2', '\x2', '\x8A5', 
		'\x955', '\x3', '\x2', '\x2', '\x2', '\x8A6', '\x8A7', '\a', '\xA9', '\x2', 
		'\x2', '\x8A7', '\x8A8', '\a', '\x4', '\x2', '\x2', '\x8A8', '\x8AB', 
		'\x5', 'v', '<', '\x2', '\x8A9', '\x8AA', '\a', '\x6', '\x2', '\x2', '\x8AA', 
		'\x8AC', '\x5', '\x9E', 'P', '\x2', '\x8AB', '\x8A9', '\x3', '\x2', '\x2', 
		'\x2', '\x8AB', '\x8AC', '\x3', '\x2', '\x2', '\x2', '\x8AC', '\x8AD', 
		'\x3', '\x2', '\x2', '\x2', '\x8AD', '\x8AE', '\a', '\x5', '\x2', '\x2', 
		'\x8AE', '\x955', '\x3', '\x2', '\x2', '\x2', '\x8AF', '\x8B0', '\a', 
		'\\', '\x2', '\x2', '\x8B0', '\x8B1', '\a', '\x4', '\x2', '\x2', '\x8B1', 
		'\x8B2', '\x5', '\xD6', 'l', '\x2', '\x8B2', '\x8B3', '\a', '\x65', '\x2', 
		'\x2', '\x8B3', '\x8B4', '\x5', 'v', '<', '\x2', '\x8B4', '\x8B5', '\a', 
		'\x5', '\x2', '\x2', '\x8B5', '\x955', '\x3', '\x2', '\x2', '\x2', '\x8B6', 
		'\x8B7', '\a', '\x4', '\x2', '\x2', '\x8B7', '\x8B8', '\x5', 'p', '\x39', 
		'\x2', '\x8B8', '\x8B9', '\a', '\x5', '\x2', '\x2', '\x8B9', '\x955', 
		'\x3', '\x2', '\x2', '\x2', '\x8BA', '\x8BB', '\a', 'n', '\x2', '\x2', 
		'\x8BB', '\x8C4', '\a', '\x4', '\x2', '\x2', '\x8BC', '\x8C1', '\x5', 
		'\xCA', '\x66', '\x2', '\x8BD', '\x8BE', '\a', '\x6', '\x2', '\x2', '\x8BE', 
		'\x8C0', '\x5', '\xCA', '\x66', '\x2', '\x8BF', '\x8BD', '\x3', '\x2', 
		'\x2', '\x2', '\x8C0', '\x8C3', '\x3', '\x2', '\x2', '\x2', '\x8C1', '\x8BF', 
		'\x3', '\x2', '\x2', '\x2', '\x8C1', '\x8C2', '\x3', '\x2', '\x2', '\x2', 
		'\x8C2', '\x8C5', '\x3', '\x2', '\x2', '\x2', '\x8C3', '\x8C1', '\x3', 
		'\x2', '\x2', '\x2', '\x8C4', '\x8BC', '\x3', '\x2', '\x2', '\x2', '\x8C4', 
		'\x8C5', '\x3', '\x2', '\x2', '\x2', '\x8C5', '\x8C6', '\x3', '\x2', '\x2', 
		'\x2', '\x8C6', '\x955', '\a', '\x5', '\x2', '\x2', '\x8C7', '\x8C8', 
		'\a', '\x84', '\x2', '\x2', '\x8C8', '\x8C9', '\a', '\x4', '\x2', '\x2', 
		'\x8C9', '\x8CE', '\x5', 'z', '>', '\x2', '\x8CA', '\x8CB', '\x5', '\x82', 
		'\x42', '\x2', '\x8CB', '\x8CC', '\a', '\xB2', '\x2', '\x2', '\x8CC', 
		'\x8CD', '\a', 'U', '\x2', '\x2', '\x8CD', '\x8CF', '\x3', '\x2', '\x2', 
		'\x2', '\x8CE', '\x8CA', '\x3', '\x2', '\x2', '\x2', '\x8CE', '\x8CF', 
		'\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8D0', '\x3', '\x2', '\x2', '\x2', 
		'\x8D0', '\x8D1', '\a', '\x5', '\x2', '\x2', '\x8D1', '\x955', '\x3', 
		'\x2', '\x2', '\x2', '\x8D2', '\x8D3', '\a', '\x87', '\x2', '\x2', '\x8D3', 
		'\x8D4', '\a', '\x4', '\x2', '\x2', '\x8D4', '\x8D7', '\x5', 'z', '>', 
		'\x2', '\x8D5', '\x8D6', '\a', '\xD8', '\x2', '\x2', '\x8D6', '\x8D8', 
		'\x5', '\xA0', 'Q', '\x2', '\x8D7', '\x8D5', '\x3', '\x2', '\x2', '\x2', 
		'\x8D7', '\x8D8', '\x3', '\x2', '\x2', '\x2', '\x8D8', '\x8DD', '\x3', 
		'\x2', '\x2', '\x2', '\x8D9', '\x8DA', '\x5', '\x84', '\x43', '\x2', '\x8DA', 
		'\x8DB', '\a', '\xB2', '\x2', '\x2', '\x8DB', '\x8DC', '\a', 'R', '\x2', 
		'\x2', '\x8DC', '\x8DE', '\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8D9', 
		'\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8DE', '\x3', '\x2', '\x2', '\x2', 
		'\x8DE', '\x8E3', '\x3', '\x2', '\x2', '\x2', '\x8DF', '\x8E0', '\x5', 
		'\x84', '\x43', '\x2', '\x8E0', '\x8E1', '\a', '\xB2', '\x2', '\x2', '\x8E1', 
		'\x8E2', '\a', 'U', '\x2', '\x2', '\x8E2', '\x8E4', '\x3', '\x2', '\x2', 
		'\x2', '\x8E3', '\x8DF', '\x3', '\x2', '\x2', '\x2', '\x8E3', '\x8E4', 
		'\x3', '\x2', '\x2', '\x2', '\x8E4', '\x8E5', '\x3', '\x2', '\x2', '\x2', 
		'\x8E5', '\x8E6', '\a', '\x5', '\x2', '\x2', '\x8E6', '\x955', '\x3', 
		'\x2', '\x2', '\x2', '\x8E7', '\x8E8', '\a', '\x86', '\x2', '\x2', '\x8E8', 
		'\x8E9', '\a', '\x4', '\x2', '\x2', '\x8E9', '\x8F0', '\x5', 'z', '>', 
		'\x2', '\x8EA', '\x8EB', '\a', '\xD8', '\x2', '\x2', '\x8EB', '\x8EE', 
		'\x5', '\xA0', 'Q', '\x2', '\x8EC', '\x8ED', '\a', '\x64', '\x2', '\x2', 
		'\x8ED', '\x8EF', '\x5', '~', '@', '\x2', '\x8EE', '\x8EC', '\x3', '\x2', 
		'\x2', '\x2', '\x8EE', '\x8EF', '\x3', '\x2', '\x2', '\x2', '\x8EF', '\x8F1', 
		'\x3', '\x2', '\x2', '\x2', '\x8F0', '\x8EA', '\x3', '\x2', '\x2', '\x2', 
		'\x8F0', '\x8F1', '\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8F5', '\x3', 
		'\x2', '\x2', '\x2', '\x8F2', '\x8F3', '\x5', '\x86', '\x44', '\x2', '\x8F3', 
		'\x8F4', '\a', '\x122', '\x2', '\x2', '\x8F4', '\x8F6', '\x3', '\x2', 
		'\x2', '\x2', '\x8F5', '\x8F2', '\x3', '\x2', '\x2', '\x2', '\x8F5', '\x8F6', 
		'\x3', '\x2', '\x2', '\x2', '\x8F6', '\x8FE', '\x3', '\x2', '\x2', '\x2', 
		'\x8F7', '\x8F8', '\t', '\x13', '\x2', '\x2', '\x8F8', '\x8FC', '\a', 
		'\xCD', '\x2', '\x2', '\x8F9', '\x8FA', '\a', '\xB2', '\x2', '\x2', '\x8FA', 
		'\x8FB', '\a', '\xE2', '\x2', '\x2', '\x8FB', '\x8FD', '\a', '\xF8', '\x2', 
		'\x2', '\x8FC', '\x8F9', '\x3', '\x2', '\x2', '\x2', '\x8FC', '\x8FD', 
		'\x3', '\x2', '\x2', '\x2', '\x8FD', '\x8FF', '\x3', '\x2', '\x2', '\x2', 
		'\x8FE', '\x8F7', '\x3', '\x2', '\x2', '\x2', '\x8FE', '\x8FF', '\x3', 
		'\x2', '\x2', '\x2', '\x8FF', '\x904', '\x3', '\x2', '\x2', '\x2', '\x900', 
		'\x901', '\x5', '\x88', '\x45', '\x2', '\x901', '\x902', '\a', '\xB2', 
		'\x2', '\x2', '\x902', '\x903', '\a', 'R', '\x2', '\x2', '\x903', '\x905', 
		'\x3', '\x2', '\x2', '\x2', '\x904', '\x900', '\x3', '\x2', '\x2', '\x2', 
		'\x904', '\x905', '\x3', '\x2', '\x2', '\x2', '\x905', '\x90A', '\x3', 
		'\x2', '\x2', '\x2', '\x906', '\x907', '\x5', '\x88', '\x45', '\x2', '\x907', 
		'\x908', '\a', '\xB2', '\x2', '\x2', '\x908', '\x909', '\a', 'U', '\x2', 
		'\x2', '\x909', '\x90B', '\x3', '\x2', '\x2', '\x2', '\x90A', '\x906', 
		'\x3', '\x2', '\x2', '\x2', '\x90A', '\x90B', '\x3', '\x2', '\x2', '\x2', 
		'\x90B', '\x90C', '\x3', '\x2', '\x2', '\x2', '\x90C', '\x90D', '\a', 
		'\x5', '\x2', '\x2', '\x90D', '\x955', '\x3', '\x2', '\x2', '\x2', '\x90E', 
		'\x90F', '\a', '\x85', '\x2', '\x2', '\x90F', '\x92C', '\a', '\x4', '\x2', 
		'\x2', '\x910', '\x915', '\x5', '\x8A', '\x46', '\x2', '\x911', '\x912', 
		'\a', '\x6', '\x2', '\x2', '\x912', '\x914', '\x5', '\x8A', '\x46', '\x2', 
		'\x913', '\x911', '\x3', '\x2', '\x2', '\x2', '\x914', '\x917', '\x3', 
		'\x2', '\x2', '\x2', '\x915', '\x913', '\x3', '\x2', '\x2', '\x2', '\x915', 
		'\x916', '\x3', '\x2', '\x2', '\x2', '\x916', '\x91E', '\x3', '\x2', '\x2', 
		'\x2', '\x917', '\x915', '\x3', '\x2', '\x2', '\x2', '\x918', '\x919', 
		'\a', '\xAB', '\x2', '\x2', '\x919', '\x91A', '\a', '\xB2', '\x2', '\x2', 
		'\x91A', '\x91F', '\a', '\xAB', '\x2', '\x2', '\x91B', '\x91C', '\a', 
		'\x14', '\x2', '\x2', '\x91C', '\x91D', '\a', '\xB2', '\x2', '\x2', '\x91D', 
		'\x91F', '\a', '\xAB', '\x2', '\x2', '\x91E', '\x918', '\x3', '\x2', '\x2', 
		'\x2', '\x91E', '\x91B', '\x3', '\x2', '\x2', '\x2', '\x91E', '\x91F', 
		'\x3', '\x2', '\x2', '\x2', '\x91F', '\x92A', '\x3', '\x2', '\x2', '\x2', 
		'\x920', '\x921', '\a', '\x11E', '\x2', '\x2', '\x921', '\x923', '\a', 
		'\x10A', '\x2', '\x2', '\x922', '\x924', '\a', '\x8A', '\x2', '\x2', '\x923', 
		'\x922', '\x3', '\x2', '\x2', '\x2', '\x923', '\x924', '\x3', '\x2', '\x2', 
		'\x2', '\x924', '\x92B', '\x3', '\x2', '\x2', '\x2', '\x925', '\x926', 
		'\a', '\x120', '\x2', '\x2', '\x926', '\x928', '\a', '\x10A', '\x2', '\x2', 
		'\x927', '\x929', '\a', '\x8A', '\x2', '\x2', '\x928', '\x927', '\x3', 
		'\x2', '\x2', '\x2', '\x928', '\x929', '\x3', '\x2', '\x2', '\x2', '\x929', 
		'\x92B', '\x3', '\x2', '\x2', '\x2', '\x92A', '\x920', '\x3', '\x2', '\x2', 
		'\x2', '\x92A', '\x925', '\x3', '\x2', '\x2', '\x2', '\x92A', '\x92B', 
		'\x3', '\x2', '\x2', '\x2', '\x92B', '\x92D', '\x3', '\x2', '\x2', '\x2', 
		'\x92C', '\x910', '\x3', '\x2', '\x2', '\x2', '\x92C', '\x92D', '\x3', 
		'\x2', '\x2', '\x2', '\x92D', '\x934', '\x3', '\x2', '\x2', '\x2', '\x92E', 
		'\x92F', '\a', '\xD8', '\x2', '\x2', '\x92F', '\x932', '\x5', '\xA0', 
		'Q', '\x2', '\x930', '\x931', '\a', '\x64', '\x2', '\x2', '\x931', '\x933', 
		'\x5', '~', '@', '\x2', '\x932', '\x930', '\x3', '\x2', '\x2', '\x2', 
		'\x932', '\x933', '\x3', '\x2', '\x2', '\x2', '\x933', '\x935', '\x3', 
		'\x2', '\x2', '\x2', '\x934', '\x92E', '\x3', '\x2', '\x2', '\x2', '\x934', 
		'\x935', '\x3', '\x2', '\x2', '\x2', '\x935', '\x936', '\x3', '\x2', '\x2', 
		'\x2', '\x936', '\x955', '\a', '\x5', '\x2', '\x2', '\x937', '\x938', 
		'\a', '\x83', '\x2', '\x2', '\x938', '\x949', '\a', '\x4', '\x2', '\x2', 
		'\x939', '\x93E', '\x5', '|', '?', '\x2', '\x93A', '\x93B', '\a', '\x6', 
		'\x2', '\x2', '\x93B', '\x93D', '\x5', '|', '?', '\x2', '\x93C', '\x93A', 
		'\x3', '\x2', '\x2', '\x2', '\x93D', '\x940', '\x3', '\x2', '\x2', '\x2', 
		'\x93E', '\x93C', '\x3', '\x2', '\x2', '\x2', '\x93E', '\x93F', '\x3', 
		'\x2', '\x2', '\x2', '\x93F', '\x947', '\x3', '\x2', '\x2', '\x2', '\x940', 
		'\x93E', '\x3', '\x2', '\x2', '\x2', '\x941', '\x942', '\a', '\xAB', '\x2', 
		'\x2', '\x942', '\x943', '\a', '\xB2', '\x2', '\x2', '\x943', '\x948', 
		'\a', '\xAB', '\x2', '\x2', '\x944', '\x945', '\a', '\x14', '\x2', '\x2', 
		'\x945', '\x946', '\a', '\xB2', '\x2', '\x2', '\x946', '\x948', '\a', 
		'\xAB', '\x2', '\x2', '\x947', '\x941', '\x3', '\x2', '\x2', '\x2', '\x947', 
		'\x944', '\x3', '\x2', '\x2', '\x2', '\x947', '\x948', '\x3', '\x2', '\x2', 
		'\x2', '\x948', '\x94A', '\x3', '\x2', '\x2', '\x2', '\x949', '\x939', 
		'\x3', '\x2', '\x2', '\x2', '\x949', '\x94A', '\x3', '\x2', '\x2', '\x2', 
		'\x94A', '\x951', '\x3', '\x2', '\x2', '\x2', '\x94B', '\x94C', '\a', 
		'\xD8', '\x2', '\x2', '\x94C', '\x94F', '\x5', '\xA0', 'Q', '\x2', '\x94D', 
		'\x94E', '\a', '\x64', '\x2', '\x2', '\x94E', '\x950', '\x5', '~', '@', 
		'\x2', '\x94F', '\x94D', '\x3', '\x2', '\x2', '\x2', '\x94F', '\x950', 
		'\x3', '\x2', '\x2', '\x2', '\x950', '\x952', '\x3', '\x2', '\x2', '\x2', 
		'\x951', '\x94B', '\x3', '\x2', '\x2', '\x2', '\x951', '\x952', '\x3', 
		'\x2', '\x2', '\x2', '\x952', '\x953', '\x3', '\x2', '\x2', '\x2', '\x953', 
		'\x955', '\a', '\x5', '\x2', '\x2', '\x954', '\x792', '\x3', '\x2', '\x2', 
		'\x2', '\x954', '\x794', '\x3', '\x2', '\x2', '\x2', '\x954', '\x795', 
		'\x3', '\x2', '\x2', '\x2', '\x954', '\x798', '\x3', '\x2', '\x2', '\x2', 
		'\x954', '\x79B', '\x3', '\x2', '\x2', '\x2', '\x954', '\x79C', '\x3', 
		'\x2', '\x2', '\x2', '\x954', '\x79D', '\x3', '\x2', '\x2', '\x2', '\x954', 
		'\x79E', '\x3', '\x2', '\x2', '\x2', '\x954', '\x79F', '\x3', '\x2', '\x2', 
		'\x2', '\x954', '\x7A0', '\x3', '\x2', '\x2', '\x2', '\x954', '\x7A7', 
		'\x3', '\x2', '\x2', '\x2', '\x954', '\x7B1', '\x3', '\x2', '\x2', '\x2', 
		'\x954', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x954', '\x7DD', '\x3', 
		'\x2', '\x2', '\x2', '\x954', '\x7EF', '\x3', '\x2', '\x2', '\x2', '\x954', 
		'\x816', '\x3', '\x2', '\x2', '\x2', '\x954', '\x819', '\x3', '\x2', '\x2', 
		'\x2', '\x954', '\x81D', '\x3', '\x2', '\x2', '\x2', '\x954', '\x82B', 
		'\x3', '\x2', '\x2', '\x2', '\x954', '\x82F', '\x3', '\x2', '\x2', '\x2', 
		'\x954', '\x834', '\x3', '\x2', '\x2', '\x2', '\x954', '\x841', '\x3', 
		'\x2', '\x2', '\x2', '\x954', '\x84D', '\x3', '\x2', '\x2', '\x2', '\x954', 
		'\x854', '\x3', '\x2', '\x2', '\x2', '\x954', '\x85B', '\x3', '\x2', '\x2', 
		'\x2', '\x954', '\x868', '\x3', '\x2', '\x2', '\x2', '\x954', '\x869', 
		'\x3', '\x2', '\x2', '\x2', '\x954', '\x86A', '\x3', '\x2', '\x2', '\x2', 
		'\x954', '\x870', '\x3', '\x2', '\x2', '\x2', '\x954', '\x876', '\x3', 
		'\x2', '\x2', '\x2', '\x954', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x954', 
		'\x882', '\x3', '\x2', '\x2', '\x2', '\x954', '\x883', '\x3', '\x2', '\x2', 
		'\x2', '\x954', '\x884', '\x3', '\x2', '\x2', '\x2', '\x954', '\x885', 
		'\x3', '\x2', '\x2', '\x2', '\x954', '\x886', '\x3', '\x2', '\x2', '\x2', 
		'\x954', '\x894', '\x3', '\x2', '\x2', '\x2', '\x954', '\x89B', '\x3', 
		'\x2', '\x2', '\x2', '\x954', '\x8A6', '\x3', '\x2', '\x2', '\x2', '\x954', 
		'\x8AF', '\x3', '\x2', '\x2', '\x2', '\x954', '\x8B6', '\x3', '\x2', '\x2', 
		'\x2', '\x954', '\x8BA', '\x3', '\x2', '\x2', '\x2', '\x954', '\x8C7', 
		'\x3', '\x2', '\x2', '\x2', '\x954', '\x8D2', '\x3', '\x2', '\x2', '\x2', 
		'\x954', '\x8E7', '\x3', '\x2', '\x2', '\x2', '\x954', '\x90E', '\x3', 
		'\x2', '\x2', '\x2', '\x954', '\x937', '\x3', '\x2', '\x2', '\x2', '\x955', 
		'\x960', '\x3', '\x2', '\x2', '\x2', '\x956', '\x957', '\f', '\x1A', '\x2', 
		'\x2', '\x957', '\x958', '\a', '\n', '\x2', '\x2', '\x958', '\x959', '\x5', 
		'v', '<', '\x2', '\x959', '\x95A', '\a', '\v', '\x2', '\x2', '\x95A', 
		'\x95F', '\x3', '\x2', '\x2', '\x2', '\x95B', '\x95C', '\f', '\x18', '\x2', 
		'\x2', '\x95C', '\x95D', '\a', '\x3', '\x2', '\x2', '\x95D', '\x95F', 
		'\x5', '\xD6', 'l', '\x2', '\x95E', '\x956', '\x3', '\x2', '\x2', '\x2', 
		'\x95E', '\x95B', '\x3', '\x2', '\x2', '\x2', '\x95F', '\x962', '\x3', 
		'\x2', '\x2', '\x2', '\x960', '\x95E', '\x3', '\x2', '\x2', '\x2', '\x960', 
		'\x961', '\x3', '\x2', '\x2', '\x2', '\x961', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x962', '\x960', '\x3', '\x2', '\x2', '\x2', '\x963', '\x964', 
		'\x5', '|', '?', '\x2', '\x964', '\x965', '\a', '\x6', '\x2', '\x2', '\x965', 
		'\x96F', '\x5', '\x90', 'I', '\x2', '\x966', '\x967', '\a', '\xBF', '\x2', 
		'\x2', '\x967', '\x96C', '\x5', '\x80', '\x41', '\x2', '\x968', '\x969', 
		'\a', '\x6', '\x2', '\x2', '\x969', '\x96B', '\x5', '\x80', '\x41', '\x2', 
		'\x96A', '\x968', '\x3', '\x2', '\x2', '\x2', '\x96B', '\x96E', '\x3', 
		'\x2', '\x2', '\x2', '\x96C', '\x96A', '\x3', '\x2', '\x2', '\x2', '\x96C', 
		'\x96D', '\x3', '\x2', '\x2', '\x2', '\x96D', '\x970', '\x3', '\x2', '\x2', 
		'\x2', '\x96E', '\x96C', '\x3', '\x2', '\x2', '\x2', '\x96F', '\x966', 
		'\x3', '\x2', '\x2', '\x2', '\x96F', '\x970', '\x3', '\x2', '\x2', '\x2', 
		'\x970', '{', '\x3', '\x2', '\x2', '\x2', '\x971', '\x974', '\x5', 'p', 
		'\x39', '\x2', '\x972', '\x973', '\a', '\x64', '\x2', '\x2', '\x973', 
		'\x975', '\x5', '~', '@', '\x2', '\x974', '\x972', '\x3', '\x2', '\x2', 
		'\x2', '\x974', '\x975', '\x3', '\x2', '\x2', '\x2', '\x975', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x976', '\x979', '\a', '\x82', '\x2', '\x2', '\x977', 
		'\x978', '\a', 'S', '\x2', '\x2', '\x978', '\x97A', '\t', '\x14', '\x2', 
		'\x2', '\x979', '\x977', '\x3', '\x2', '\x2', '\x2', '\x979', '\x97A', 
		'\x3', '\x2', '\x2', '\x2', '\x97A', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x97B', '\x97C', '\x5', '|', '?', '\x2', '\x97C', '\x97D', '\a', '\x1E', 
		'\x2', '\x2', '\x97D', '\x97E', '\x5', '\xD6', 'l', '\x2', '\x97E', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x97F', '\x980', '\t', '\x15', '\x2', '\x2', 
		'\x980', '\x83', '\x3', '\x2', '\x2', '\x2', '\x981', '\x986', '\a', 'U', 
		'\x2', '\x2', '\x982', '\x986', '\a', '\xAB', '\x2', '\x2', '\x983', '\x984', 
		'\a', '\x45', '\x2', '\x2', '\x984', '\x986', '\x5', 'p', '\x39', '\x2', 
		'\x985', '\x981', '\x3', '\x2', '\x2', '\x2', '\x985', '\x982', '\x3', 
		'\x2', '\x2', '\x2', '\x985', '\x983', '\x3', '\x2', '\x2', '\x2', '\x986', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x987', '\x989', '\a', '\x120', '\x2', 
		'\x2', '\x988', '\x98A', '\a', '\x1D', '\x2', '\x2', '\x989', '\x988', 
		'\x3', '\x2', '\x2', '\x2', '\x989', '\x98A', '\x3', '\x2', '\x2', '\x2', 
		'\x98A', '\x993', '\x3', '\x2', '\x2', '\x2', '\x98B', '\x98D', '\a', 
		'\x11E', '\x2', '\x2', '\x98C', '\x98E', '\t', '\x16', '\x2', '\x2', '\x98D', 
		'\x98C', '\x3', '\x2', '\x2', '\x2', '\x98D', '\x98E', '\x3', '\x2', '\x2', 
		'\x2', '\x98E', '\x990', '\x3', '\x2', '\x2', '\x2', '\x98F', '\x991', 
		'\a', '\x1D', '\x2', '\x2', '\x990', '\x98F', '\x3', '\x2', '\x2', '\x2', 
		'\x990', '\x991', '\x3', '\x2', '\x2', '\x2', '\x991', '\x993', '\x3', 
		'\x2', '\x2', '\x2', '\x992', '\x987', '\x3', '\x2', '\x2', '\x2', '\x992', 
		'\x98B', '\x3', '\x2', '\x2', '\x2', '\x993', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x994', '\x99B', '\a', 'U', '\x2', '\x2', '\x995', '\x99B', '\a', 
		'\xAB', '\x2', '\x2', '\x996', '\x997', '\a', 'R', '\x2', '\x2', '\x997', 
		'\x99B', '\a', '\x1D', '\x2', '\x2', '\x998', '\x999', '\a', 'R', '\x2', 
		'\x2', '\x999', '\x99B', '\a', '\xAE', '\x2', '\x2', '\x99A', '\x994', 
		'\x3', '\x2', '\x2', '\x2', '\x99A', '\x995', '\x3', '\x2', '\x2', '\x2', 
		'\x99A', '\x996', '\x3', '\x2', '\x2', '\x2', '\x99A', '\x998', '\x3', 
		'\x2', '\x2', '\x2', '\x99B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x99C', 
		'\x99E', '\a', '\x89', '\x2', '\x2', '\x99D', '\x99C', '\x3', '\x2', '\x2', 
		'\x2', '\x99D', '\x99E', '\x3', '\x2', '\x2', '\x2', '\x99E', '\x99F', 
		'\x3', '\x2', '\x2', '\x2', '\x99F', '\x9A0', '\x5', 'p', '\x39', '\x2', 
		'\x9A0', '\x9A1', '\a', '\x116', '\x2', '\x2', '\x9A1', '\x9A2', '\x5', 
		'|', '?', '\x2', '\x9A2', '\x9A8', '\x3', '\x2', '\x2', '\x2', '\x9A3', 
		'\x9A4', '\x5', 'p', '\x39', '\x2', '\x9A4', '\x9A5', '\a', '\f', '\x2', 
		'\x2', '\x9A5', '\x9A6', '\x5', '|', '?', '\x2', '\x9A6', '\x9A8', '\x3', 
		'\x2', '\x2', '\x2', '\x9A7', '\x99D', '\x3', '\x2', '\x2', '\x2', '\x9A7', 
		'\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9A8', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x9A9', '\x9AA', '\t', '\x17', '\x2', '\x2', '\x9AA', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x9AB', '\x9AC', '\a', 's', '\x2', '\x2', 
		'\x9AC', '\x9B0', '\a', '\xAD', '\x2', '\x2', '\x9AD', '\x9AE', '\a', 
		'\xD6', '\x2', '\x2', '\x9AE', '\x9B0', '\a', '\xAD', '\x2', '\x2', '\x9AF', 
		'\x9AB', '\x3', '\x2', '\x2', '\x2', '\x9AF', '\x9AD', '\x3', '\x2', '\x2', 
		'\x2', '\x9B0', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x9B1', '\x9B8', 
		'\a', '\x133', '\x2', '\x2', '\x9B2', '\x9B5', '\a', '\x134', '\x2', '\x2', 
		'\x9B3', '\x9B4', '\a', '\x105', '\x2', '\x2', '\x9B4', '\x9B6', '\a', 
		'\x133', '\x2', '\x2', '\x9B5', '\x9B3', '\x3', '\x2', '\x2', '\x2', '\x9B5', 
		'\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B6', '\x9B8', '\x3', '\x2', '\x2', 
		'\x2', '\x9B7', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x9B7', '\x9B2', 
		'\x3', '\x2', '\x2', '\x2', '\x9B8', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x9B9', '\x9BA', '\a', '\xFB', '\x2', '\x2', '\x9BA', '\x9BB', '\a', 
		'\x125', '\x2', '\x2', '\x9BB', '\x9C0', '\x5', '\x9A', 'N', '\x2', '\x9BC', 
		'\x9BD', '\a', '\xFB', '\x2', '\x2', '\x9BD', '\x9BE', '\a', '\x125', 
		'\x2', '\x2', '\x9BE', '\x9C0', '\x5', '\x90', 'I', '\x2', '\x9BF', '\x9B9', 
		'\x3', '\x2', '\x2', '\x2', '\x9BF', '\x9BC', '\x3', '\x2', '\x2', '\x2', 
		'\x9C0', '\x93', '\x3', '\x2', '\x2', '\x2', '\x9C1', '\x9C2', '\t', '\x18', 
		'\x2', '\x2', '\x9C2', '\x95', '\x3', '\x2', '\x2', '\x2', '\x9C3', '\x9C4', 
		'\t', '\x19', '\x2', '\x2', '\x9C4', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x9C5', '\x9C6', '\t', '\x1A', '\x2', '\x2', '\x9C6', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x9C7', '\x9C9', '\a', '{', '\x2', '\x2', '\x9C8', 
		'\x9CA', '\t', '\x11', '\x2', '\x2', '\x9C9', '\x9C8', '\x3', '\x2', '\x2', 
		'\x2', '\x9C9', '\x9CA', '\x3', '\x2', '\x2', '\x2', '\x9CA', '\x9CB', 
		'\x3', '\x2', '\x2', '\x2', '\x9CB', '\x9CC', '\x5', '\x90', 'I', '\x2', 
		'\x9CC', '\x9CF', '\x5', '\x9C', 'O', '\x2', '\x9CD', '\x9CE', '\a', '\xFD', 
		'\x2', '\x2', '\x9CE', '\x9D0', '\x5', '\x9C', 'O', '\x2', '\x9CF', '\x9CD', 
		'\x3', '\x2', '\x2', '\x2', '\x9CF', '\x9D0', '\x3', '\x2', '\x2', '\x2', 
		'\x9D0', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D1', '\x9D2', '\t', '\x1B', 
		'\x2', '\x2', '\x9D2', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D3', '\x9D4', 
		'\t', '\x1C', '\x2', '\x2', '\x9D4', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x9D5', '\x9D6', '\b', 'Q', '\x1', '\x2', '\x9D6', '\x9D7', '\a', '\xDF', 
		'\x2', '\x2', '\x9D7', '\x9D8', '\a', '\x4', '\x2', '\x2', '\x9D8', '\x9DD', 
		'\x5', '\xA2', 'R', '\x2', '\x9D9', '\x9DA', '\a', '\x6', '\x2', '\x2', 
		'\x9DA', '\x9DC', '\x5', '\xA2', 'R', '\x2', '\x9DB', '\x9D9', '\x3', 
		'\x2', '\x2', '\x2', '\x9DC', '\x9DF', '\x3', '\x2', '\x2', '\x2', '\x9DD', 
		'\x9DB', '\x3', '\x2', '\x2', '\x2', '\x9DD', '\x9DE', '\x3', '\x2', '\x2', 
		'\x2', '\x9DE', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9DD', 
		'\x3', '\x2', '\x2', '\x2', '\x9E0', '\x9E1', '\a', '\x5', '\x2', '\x2', 
		'\x9E1', '\xA31', '\x3', '\x2', '\x2', '\x2', '\x9E2', '\x9E3', '\a', 
		'{', '\x2', '\x2', '\x9E3', '\x9E6', '\x5', '\x9C', 'O', '\x2', '\x9E4', 
		'\x9E5', '\a', '\xFD', '\x2', '\x2', '\x9E5', '\x9E7', '\x5', '\x9C', 
		'O', '\x2', '\x9E6', '\x9E4', '\x3', '\x2', '\x2', '\x2', '\x9E6', '\x9E7', 
		'\x3', '\x2', '\x2', '\x2', '\x9E7', '\xA31', '\x3', '\x2', '\x2', '\x2', 
		'\x9E8', '\x9ED', '\a', '\xFC', '\x2', '\x2', '\x9E9', '\x9EA', '\a', 
		'\x4', '\x2', '\x2', '\x9EA', '\x9EB', '\x5', '\xA4', 'S', '\x2', '\x9EB', 
		'\x9EC', '\a', '\x5', '\x2', '\x2', '\x9EC', '\x9EE', '\x3', '\x2', '\x2', 
		'\x2', '\x9ED', '\x9E9', '\x3', '\x2', '\x2', '\x2', '\x9ED', '\x9EE', 
		'\x3', '\x2', '\x2', '\x2', '\x9EE', '\x9F2', '\x3', '\x2', '\x2', '\x2', 
		'\x9EF', '\x9F0', '\a', '\x120', '\x2', '\x2', '\x9F0', '\x9F1', '\a', 
		'\xFB', '\x2', '\x2', '\x9F1', '\x9F3', '\a', '\x125', '\x2', '\x2', '\x9F2', 
		'\x9EF', '\x3', '\x2', '\x2', '\x2', '\x9F2', '\x9F3', '\x3', '\x2', '\x2', 
		'\x2', '\x9F3', '\xA31', '\x3', '\x2', '\x2', '\x2', '\x9F4', '\x9F9', 
		'\a', '\xFC', '\x2', '\x2', '\x9F5', '\x9F6', '\a', '\x4', '\x2', '\x2', 
		'\x9F6', '\x9F7', '\x5', '\xA4', 'S', '\x2', '\x9F7', '\x9F8', '\a', '\x5', 
		'\x2', '\x2', '\x9F8', '\x9FA', '\x3', '\x2', '\x2', '\x2', '\x9F9', '\x9F5', 
		'\x3', '\x2', '\x2', '\x2', '\x9F9', '\x9FA', '\x3', '\x2', '\x2', '\x2', 
		'\x9FA', '\x9FB', '\x3', '\x2', '\x2', '\x2', '\x9FB', '\x9FC', '\a', 
		'\x11E', '\x2', '\x2', '\x9FC', '\x9FD', '\a', '\xFB', '\x2', '\x2', '\x9FD', 
		'\xA31', '\a', '\x125', '\x2', '\x2', '\x9FE', '\xA03', '\a', '\xFB', 
		'\x2', '\x2', '\x9FF', '\xA00', '\a', '\x4', '\x2', '\x2', '\xA00', '\xA01', 
		'\x5', '\xA4', 'S', '\x2', '\xA01', '\xA02', '\a', '\x5', '\x2', '\x2', 
		'\xA02', '\xA04', '\x3', '\x2', '\x2', '\x2', '\xA03', '\x9FF', '\x3', 
		'\x2', '\x2', '\x2', '\xA03', '\xA04', '\x3', '\x2', '\x2', '\x2', '\xA04', 
		'\xA08', '\x3', '\x2', '\x2', '\x2', '\xA05', '\xA06', '\a', '\x120', 
		'\x2', '\x2', '\xA06', '\xA07', '\a', '\xFB', '\x2', '\x2', '\xA07', '\xA09', 
		'\a', '\x125', '\x2', '\x2', '\xA08', '\xA05', '\x3', '\x2', '\x2', '\x2', 
		'\xA08', '\xA09', '\x3', '\x2', '\x2', '\x2', '\xA09', '\xA31', '\x3', 
		'\x2', '\x2', '\x2', '\xA0A', '\xA0F', '\a', '\xFB', '\x2', '\x2', '\xA0B', 
		'\xA0C', '\a', '\x4', '\x2', '\x2', '\xA0C', '\xA0D', '\x5', '\xA4', 'S', 
		'\x2', '\xA0D', '\xA0E', '\a', '\x5', '\x2', '\x2', '\xA0E', '\xA10', 
		'\x3', '\x2', '\x2', '\x2', '\xA0F', '\xA0B', '\x3', '\x2', '\x2', '\x2', 
		'\xA0F', '\xA10', '\x3', '\x2', '\x2', '\x2', '\xA10', '\xA11', '\x3', 
		'\x2', '\x2', '\x2', '\xA11', '\xA12', '\a', '\x11E', '\x2', '\x2', '\xA12', 
		'\xA13', '\a', '\xFB', '\x2', '\x2', '\xA13', '\xA31', '\a', '\x125', 
		'\x2', '\x2', '\xA14', '\xA15', '\a', 'O', '\x2', '\x2', '\xA15', '\xA31', 
		'\a', '\xC8', '\x2', '\x2', '\xA16', '\xA17', '\a', '\x1D', '\x2', '\x2', 
		'\xA17', '\xA18', '\a', '\x128', '\x2', '\x2', '\xA18', '\xA19', '\x5', 
		'\xA0', 'Q', '\x2', '\xA19', '\xA1A', '\a', '\x12A', '\x2', '\x2', '\xA1A', 
		'\xA31', '\x3', '\x2', '\x2', '\x2', '\xA1B', '\xA1C', '\a', '\x97', '\x2', 
		'\x2', '\xA1C', '\xA1D', '\a', '\x128', '\x2', '\x2', '\xA1D', '\xA1E', 
		'\x5', '\xA0', 'Q', '\x2', '\xA1E', '\xA1F', '\a', '\x6', '\x2', '\x2', 
		'\xA1F', '\xA20', '\x5', '\xA0', 'Q', '\x2', '\xA20', '\xA21', '\a', '\x12A', 
		'\x2', '\x2', '\xA21', '\xA31', '\x3', '\x2', '\x2', '\x2', '\xA22', '\xA2E', 
		'\x5', '\xD6', 'l', '\x2', '\xA23', '\xA24', '\a', '\x4', '\x2', '\x2', 
		'\xA24', '\xA29', '\x5', '\xA4', 'S', '\x2', '\xA25', '\xA26', '\a', '\x6', 
		'\x2', '\x2', '\xA26', '\xA28', '\x5', '\xA4', 'S', '\x2', '\xA27', '\xA25', 
		'\x3', '\x2', '\x2', '\x2', '\xA28', '\xA2B', '\x3', '\x2', '\x2', '\x2', 
		'\xA29', '\xA27', '\x3', '\x2', '\x2', '\x2', '\xA29', '\xA2A', '\x3', 
		'\x2', '\x2', '\x2', '\xA2A', '\xA2C', '\x3', '\x2', '\x2', '\x2', '\xA2B', 
		'\xA29', '\x3', '\x2', '\x2', '\x2', '\xA2C', '\xA2D', '\a', '\x5', '\x2', 
		'\x2', '\xA2D', '\xA2F', '\x3', '\x2', '\x2', '\x2', '\xA2E', '\xA23', 
		'\x3', '\x2', '\x2', '\x2', '\xA2E', '\xA2F', '\x3', '\x2', '\x2', '\x2', 
		'\xA2F', '\xA31', '\x3', '\x2', '\x2', '\x2', '\xA30', '\x9D5', '\x3', 
		'\x2', '\x2', '\x2', '\xA30', '\x9E2', '\x3', '\x2', '\x2', '\x2', '\xA30', 
		'\x9E8', '\x3', '\x2', '\x2', '\x2', '\xA30', '\x9F4', '\x3', '\x2', '\x2', 
		'\x2', '\xA30', '\x9FE', '\x3', '\x2', '\x2', '\x2', '\xA30', '\xA0A', 
		'\x3', '\x2', '\x2', '\x2', '\xA30', '\xA14', '\x3', '\x2', '\x2', '\x2', 
		'\xA30', '\xA16', '\x3', '\x2', '\x2', '\x2', '\xA30', '\xA1B', '\x3', 
		'\x2', '\x2', '\x2', '\xA30', '\xA22', '\x3', '\x2', '\x2', '\x2', '\xA31', 
		'\xA3B', '\x3', '\x2', '\x2', '\x2', '\xA32', '\xA33', '\f', '\x4', '\x2', 
		'\x2', '\xA33', '\xA37', '\a', '\x1D', '\x2', '\x2', '\xA34', '\xA35', 
		'\a', '\n', '\x2', '\x2', '\xA35', '\xA36', '\a', '\x136', '\x2', '\x2', 
		'\xA36', '\xA38', '\a', '\v', '\x2', '\x2', '\xA37', '\xA34', '\x3', '\x2', 
		'\x2', '\x2', '\xA37', '\xA38', '\x3', '\x2', '\x2', '\x2', '\xA38', '\xA3A', 
		'\x3', '\x2', '\x2', '\x2', '\xA39', '\xA32', '\x3', '\x2', '\x2', '\x2', 
		'\xA3A', '\xA3D', '\x3', '\x2', '\x2', '\x2', '\xA3B', '\xA39', '\x3', 
		'\x2', '\x2', '\x2', '\xA3B', '\xA3C', '\x3', '\x2', '\x2', '\x2', '\xA3C', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3D', '\xA3B', '\x3', '\x2', '\x2', 
		'\x2', '\xA3E', '\xA43', '\x5', '\xA0', 'Q', '\x2', '\xA3F', '\xA40', 
		'\x5', '\xD6', 'l', '\x2', '\xA40', '\xA41', '\x5', '\xA0', 'Q', '\x2', 
		'\xA41', '\xA43', '\x3', '\x2', '\x2', '\x2', '\xA42', '\xA3E', '\x3', 
		'\x2', '\x2', '\x2', '\xA42', '\xA3F', '\x3', '\x2', '\x2', '\x2', '\xA43', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA44', '\xA47', '\a', '\x136', '\x2', 
		'\x2', '\xA45', '\xA47', '\x5', '\xA0', 'Q', '\x2', '\xA46', '\xA44', 
		'\x3', '\x2', '\x2', '\x2', '\xA46', '\xA45', '\x3', '\x2', '\x2', '\x2', 
		'\xA47', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA48', '\xA49', '\a', '\x11B', 
		'\x2', '\x2', '\xA49', '\xA4A', '\x5', 'p', '\x39', '\x2', '\xA4A', '\xA4B', 
		'\a', '\xF9', '\x2', '\x2', '\xA4B', '\xA4C', '\x5', 'p', '\x39', '\x2', 
		'\xA4C', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA4D', '\xA4E', '\a', '_', 
		'\x2', '\x2', '\xA4E', '\xA4F', '\a', '\x4', '\x2', '\x2', '\xA4F', '\xA50', 
		'\a', '\x11C', '\x2', '\x2', '\xA50', '\xA51', '\x5', 'r', ':', '\x2', 
		'\xA51', '\xA52', '\a', '\x5', '\x2', '\x2', '\xA52', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xA53', '\xA54', '\a', '\x11B', '\x2', '\x2', '\xA54', 
		'\xA57', '\a', '\x99', '\x2', '\x2', '\xA55', '\xA56', '\a', '\x1B', '\x2', 
		'\x2', '\xA56', '\xA58', '\x5', 'p', '\x39', '\x2', '\xA57', '\xA55', 
		'\x3', '\x2', '\x2', '\x2', '\xA57', '\xA58', '\x3', '\x2', '\x2', '\x2', 
		'\xA58', '\xA59', '\x3', '\x2', '\x2', '\x2', '\xA59', '\xA5A', '\a', 
		'\xF9', '\x2', '\x2', '\xA5A', '\xA5B', '\a', '\x10E', '\x2', '\x2', '\xA5B', 
		'\xA5C', '\a', '\xEB', '\x2', '\x2', '\xA5C', '\xA5D', '\x5', '\xD6', 
		'l', '\x2', '\xA5D', '\xA5E', '\a', '\x126', '\x2', '\x2', '\xA5E', '\xA66', 
		'\x5', 'p', '\x39', '\x2', '\xA5F', '\xA60', '\a', '\x6', '\x2', '\x2', 
		'\xA60', '\xA61', '\x5', '\xD6', 'l', '\x2', '\xA61', '\xA62', '\a', '\x126', 
		'\x2', '\x2', '\xA62', '\xA63', '\x5', 'p', '\x39', '\x2', '\xA63', '\xA65', 
		'\x3', '\x2', '\x2', '\x2', '\xA64', '\xA5F', '\x3', '\x2', '\x2', '\x2', 
		'\xA65', '\xA68', '\x3', '\x2', '\x2', '\x2', '\xA66', '\xA64', '\x3', 
		'\x2', '\x2', '\x2', '\xA66', '\xA67', '\x3', '\x2', '\x2', '\x2', '\xA67', 
		'\xA94', '\x3', '\x2', '\x2', '\x2', '\xA68', '\xA66', '\x3', '\x2', '\x2', 
		'\x2', '\xA69', '\xA6A', '\a', '\x11B', '\x2', '\x2', '\xA6A', '\xA6D', 
		'\a', '\x99', '\x2', '\x2', '\xA6B', '\xA6C', '\a', '\x1B', '\x2', '\x2', 
		'\xA6C', '\xA6E', '\x5', 'p', '\x39', '\x2', '\xA6D', '\xA6B', '\x3', 
		'\x2', '\x2', '\x2', '\xA6D', '\xA6E', '\x3', '\x2', '\x2', '\x2', '\xA6E', 
		'\xA6F', '\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA70', '\a', '\xF9', '\x2', 
		'\x2', '\xA70', '\xA94', '\a', 'H', '\x2', '\x2', '\xA71', '\xA72', '\a', 
		'\x11B', '\x2', '\x2', '\xA72', '\xA73', '\a', '\xAA', '\x2', '\x2', '\xA73', 
		'\xA76', '\a', '\x99', '\x2', '\x2', '\xA74', '\xA75', '\a', '\x1B', '\x2', 
		'\x2', '\xA75', '\xA77', '\x5', 'p', '\x39', '\x2', '\xA76', '\xA74', 
		'\x3', '\x2', '\x2', '\x2', '\xA76', '\xA77', '\x3', '\x2', '\x2', '\x2', 
		'\xA77', '\xA78', '\x3', '\x2', '\x2', '\x2', '\xA78', '\xA79', '\a', 
		'\xF9', '\x2', '\x2', '\xA79', '\xA85', '\a', 'y', '\x2', '\x2', '\xA7A', 
		'\xA7B', '\a', '\x4', '\x2', '\x2', '\xA7B', '\xA80', '\x5', '\xD6', 'l', 
		'\x2', '\xA7C', '\xA7D', '\a', '\x6', '\x2', '\x2', '\xA7D', '\xA7F', 
		'\x5', '\xD6', 'l', '\x2', '\xA7E', '\xA7C', '\x3', '\x2', '\x2', '\x2', 
		'\xA7F', '\xA82', '\x3', '\x2', '\x2', '\x2', '\xA80', '\xA7E', '\x3', 
		'\x2', '\x2', '\x2', '\xA80', '\xA81', '\x3', '\x2', '\x2', '\x2', '\xA81', 
		'\xA83', '\x3', '\x2', '\x2', '\x2', '\xA82', '\xA80', '\x3', '\x2', '\x2', 
		'\x2', '\xA83', '\xA84', '\a', '\x5', '\x2', '\x2', '\xA84', '\xA86', 
		'\x3', '\x2', '\x2', '\x2', '\xA85', '\xA7A', '\x3', '\x2', '\x2', '\x2', 
		'\xA85', '\xA86', '\x3', '\x2', '\x2', '\x2', '\xA86', '\xA87', '\x3', 
		'\x2', '\x2', '\x2', '\xA87', '\xA88', '\a', '\x117', '\x2', '\x2', '\xA88', 
		'\xA89', '\a', '\x4', '\x2', '\x2', '\xA89', '\xA8E', '\x5', 'p', '\x39', 
		'\x2', '\xA8A', '\xA8B', '\a', '\x6', '\x2', '\x2', '\xA8B', '\xA8D', 
		'\x5', 'p', '\x39', '\x2', '\xA8C', '\xA8A', '\x3', '\x2', '\x2', '\x2', 
		'\xA8D', '\xA90', '\x3', '\x2', '\x2', '\x2', '\xA8E', '\xA8C', '\x3', 
		'\x2', '\x2', '\x2', '\xA8E', '\xA8F', '\x3', '\x2', '\x2', '\x2', '\xA8F', 
		'\xA91', '\x3', '\x2', '\x2', '\x2', '\xA90', '\xA8E', '\x3', '\x2', '\x2', 
		'\x2', '\xA91', '\xA92', '\a', '\x5', '\x2', '\x2', '\xA92', '\xA94', 
		'\x3', '\x2', '\x2', '\x2', '\xA93', '\xA53', '\x3', '\x2', '\x2', '\x2', 
		'\xA93', '\xA69', '\x3', '\x2', '\x2', '\x2', '\xA93', '\xA71', '\x3', 
		'\x2', '\x2', '\x2', '\xA94', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xA95', 
		'\xA9B', '\a', '\xBB', '\x2', '\x2', '\xA96', '\xA9C', '\x5', '\xD6', 
		'l', '\x2', '\xA97', '\xA98', '\a', '\x4', '\x2', '\x2', '\xA98', '\xA99', 
		'\x5', '\x36', '\x1C', '\x2', '\xA99', '\xA9A', '\a', '\x5', '\x2', '\x2', 
		'\xA9A', '\xA9C', '\x3', '\x2', '\x2', '\x2', '\xA9B', '\xA96', '\x3', 
		'\x2', '\x2', '\x2', '\xA9B', '\xA97', '\x3', '\x2', '\x2', '\x2', '\xA9C', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xA9D', '\xA9E', '\a', '\x9D', '\x2', 
		'\x2', '\xA9E', '\xAA3', '\x5', 'P', ')', '\x2', '\xA9F', '\xAA0', '\a', 
		'\x6', '\x2', '\x2', '\xAA0', '\xAA2', '\x5', 'P', ')', '\x2', '\xAA1', 
		'\xA9F', '\x3', '\x2', '\x2', '\x2', '\xAA2', '\xAA5', '\x3', '\x2', '\x2', 
		'\x2', '\xAA3', '\xAA1', '\x3', '\x2', '\x2', '\x2', '\xAA3', '\xAA4', 
		'\x3', '\x2', '\x2', '\x2', '\xAA4', '\xAA7', '\x3', '\x2', '\x2', '\x2', 
		'\xAA5', '\xAA3', '\x3', '\x2', '\x2', '\x2', '\xAA6', '\xA9D', '\x3', 
		'\x2', '\x2', '\x2', '\xAA6', '\xAA7', '\x3', '\x2', '\x2', '\x2', '\xAA7', 
		'\xAA8', '\x3', '\x2', '\x2', '\x2', '\xAA8', '\xAAC', '\x5', '\xB0', 
		'Y', '\x2', '\xAA9', '\xAAA', '\a', '\x17', '\x2', '\x2', '\xAAA', '\xAAB', 
		'\a', '\x98', '\x2', '\x2', '\xAAB', '\xAAD', '\x5', 'V', ',', '\x2', 
		'\xAAC', '\xAA9', '\x3', '\x2', '\x2', '\x2', '\xAAC', '\xAAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAAD', '\xAAF', '\x3', '\x2', '\x2', '\x2', '\xAAE', 
		'\xAB0', '\t', '\x10', '\x2', '\x2', '\xAAF', '\xAAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAAF', '\xAB0', '\x3', '\x2', '\x2', '\x2', '\xAB0', '\xAB6', 
		'\x3', '\x2', '\x2', '\x2', '\xAB1', '\xAB2', '\a', '\xC2', '\x2', '\x2', 
		'\xAB2', '\xAB3', '\a', '\x4', '\x2', '\x2', '\xAB3', '\xAB4', '\x5', 
		'\xB4', '[', '\x2', '\xAB4', '\xAB5', '\a', '\x5', '\x2', '\x2', '\xAB5', 
		'\xAB7', '\x3', '\x2', '\x2', '\x2', '\xAB6', '\xAB1', '\x3', '\x2', '\x2', 
		'\x2', '\xAB6', '\xAB7', '\x3', '\x2', '\x2', '\x2', '\xAB7', '\xAC1', 
		'\x3', '\x2', '\x2', '\x2', '\xAB8', '\xAB9', '\a', '\xF1', '\x2', '\x2', 
		'\xAB9', '\xABE', '\x5', 'X', '-', '\x2', '\xABA', '\xABB', '\a', '\x6', 
		'\x2', '\x2', '\xABB', '\xABD', '\x5', 'X', '-', '\x2', '\xABC', '\xABA', 
		'\x3', '\x2', '\x2', '\x2', '\xABD', '\xAC0', '\x3', '\x2', '\x2', '\x2', 
		'\xABE', '\xABC', '\x3', '\x2', '\x2', '\x2', '\xABE', '\xABF', '\x3', 
		'\x2', '\x2', '\x2', '\xABF', '\xAC2', '\x3', '\x2', '\x2', '\x2', '\xAC0', 
		'\xABE', '\x3', '\x2', '\x2', '\x2', '\xAC1', '\xAB8', '\x3', '\x2', '\x2', 
		'\x2', '\xAC1', '\xAC2', '\x3', '\x2', '\x2', '\x2', '\xAC2', '\xACC', 
		'\x3', '\x2', '\x2', '\x2', '\xAC3', '\xAC4', '\a', '\x46', '\x2', '\x2', 
		'\xAC4', '\xAC9', '\x5', 'Z', '.', '\x2', '\xAC5', '\xAC6', '\a', '\x6', 
		'\x2', '\x2', '\xAC6', '\xAC8', '\x5', 'Z', '.', '\x2', '\xAC7', '\xAC5', 
		'\x3', '\x2', '\x2', '\x2', '\xAC8', '\xACB', '\x3', '\x2', '\x2', '\x2', 
		'\xAC9', '\xAC7', '\x3', '\x2', '\x2', '\x2', '\xAC9', '\xACA', '\x3', 
		'\x2', '\x2', '\x2', '\xACA', '\xACD', '\x3', '\x2', '\x2', '\x2', '\xACB', 
		'\xAC9', '\x3', '\x2', '\x2', '\x2', '\xACC', '\xAC3', '\x3', '\x2', '\x2', 
		'\x2', '\xACC', '\xACD', '\x3', '\x2', '\x2', '\x2', '\xACD', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xACE', '\xACF', '\a', '\xCE', '\x2', '\x2', 
		'\xACF', '\xAE7', '\x5', '\xB2', 'Z', '\x2', '\xAD0', '\xAD1', '\a', '\xE0', 
		'\x2', '\x2', '\xAD1', '\xAE7', '\x5', '\xB2', 'Z', '\x2', '\xAD2', '\xAD3', 
		'\a', 'o', '\x2', '\x2', '\xAD3', '\xAE7', '\x5', '\xB2', 'Z', '\x2', 
		'\xAD4', '\xAD5', '\a', '\xCE', '\x2', '\x2', '\xAD5', '\xAD6', '\a', 
		'#', '\x2', '\x2', '\xAD6', '\xAD7', '\x5', '\xB2', 'Z', '\x2', '\xAD7', 
		'\xAD8', '\a', '\x1B', '\x2', '\x2', '\xAD8', '\xAD9', '\x5', '\xB2', 
		'Z', '\x2', '\xAD9', '\xAE7', '\x3', '\x2', '\x2', '\x2', '\xADA', '\xADB', 
		'\a', '\xE0', '\x2', '\x2', '\xADB', '\xADC', '\a', '#', '\x2', '\x2', 
		'\xADC', '\xADD', '\x5', '\xB2', 'Z', '\x2', '\xADD', '\xADE', '\a', '\x1B', 
		'\x2', '\x2', '\xADE', '\xADF', '\x5', '\xB2', 'Z', '\x2', '\xADF', '\xAE7', 
		'\x3', '\x2', '\x2', '\x2', '\xAE0', '\xAE1', '\a', 'o', '\x2', '\x2', 
		'\xAE1', '\xAE2', '\a', '#', '\x2', '\x2', '\xAE2', '\xAE3', '\x5', '\xB2', 
		'Z', '\x2', '\xAE3', '\xAE4', '\a', '\x1B', '\x2', '\x2', '\xAE4', '\xAE5', 
		'\x5', '\xB2', 'Z', '\x2', '\xAE5', '\xAE7', '\x3', '\x2', '\x2', '\x2', 
		'\xAE6', '\xACE', '\x3', '\x2', '\x2', '\x2', '\xAE6', '\xAD0', '\x3', 
		'\x2', '\x2', '\x2', '\xAE6', '\xAD2', '\x3', '\x2', '\x2', '\x2', '\xAE6', 
		'\xAD4', '\x3', '\x2', '\x2', '\x2', '\xAE6', '\xADA', '\x3', '\x2', '\x2', 
		'\x2', '\xAE6', '\xAE0', '\x3', '\x2', '\x2', '\x2', '\xAE7', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xAE8', '\xAE9', '\a', '\x106', '\x2', '\x2', 
		'\xAE9', '\xAF2', '\a', '\xC7', '\x2', '\x2', '\xAEA', '\xAEB', '\a', 
		'\x106', '\x2', '\x2', '\xAEB', '\xAF2', '\a', '\x62', '\x2', '\x2', '\xAEC', 
		'\xAED', '\a', '\x38', '\x2', '\x2', '\xAED', '\xAF2', '\a', '\xDF', '\x2', 
		'\x2', '\xAEE', '\xAEF', '\x5', 'p', '\x39', '\x2', '\xAEF', '\xAF0', 
		'\t', '\x1D', '\x2', '\x2', '\xAF0', '\xAF2', '\x3', '\x2', '\x2', '\x2', 
		'\xAF1', '\xAE8', '\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAEA', '\x3', 
		'\x2', '\x2', '\x2', '\xAF1', '\xAEC', '\x3', '\x2', '\x2', '\x2', '\xAF1', 
		'\xAEE', '\x3', '\x2', '\x2', '\x2', '\xAF2', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xAF3', '\xAF4', '\b', '[', '\x1', '\x2', '\xAF4', '\xAF6', '\x5', 
		'\xB6', '\\', '\x2', '\xAF5', '\xAF7', '\x5', '\xB8', ']', '\x2', '\xAF6', 
		'\xAF5', '\x3', '\x2', '\x2', '\x2', '\xAF6', '\xAF7', '\x3', '\x2', '\x2', 
		'\x2', '\xAF7', '\xAFF', '\x3', '\x2', '\x2', '\x2', '\xAF8', '\xAF9', 
		'\f', '\x4', '\x2', '\x2', '\xAF9', '\xAFE', '\x5', '\xB4', '[', '\x5', 
		'\xAFA', '\xAFB', '\f', '\x3', '\x2', '\x2', '\xAFB', '\xAFC', '\a', '\r', 
		'\x2', '\x2', '\xAFC', '\xAFE', '\x5', '\xB4', '[', '\x4', '\xAFD', '\xAF8', 
		'\x3', '\x2', '\x2', '\x2', '\xAFD', '\xAFA', '\x3', '\x2', '\x2', '\x2', 
		'\xAFE', '\xB01', '\x3', '\x2', '\x2', '\x2', '\xAFF', '\xAFD', '\x3', 
		'\x2', '\x2', '\x2', '\xAFF', '\xB00', '\x3', '\x2', '\x2', '\x2', '\xB00', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB01', '\xAFF', '\x3', '\x2', '\x2', 
		'\x2', '\xB02', '\xB1C', '\x5', '\xD6', 'l', '\x2', '\xB03', '\xB04', 
		'\a', '\x4', '\x2', '\x2', '\xB04', '\xB1C', '\a', '\x5', '\x2', '\x2', 
		'\xB05', '\xB06', '\a', '\xC5', '\x2', '\x2', '\xB06', '\xB07', '\a', 
		'\x4', '\x2', '\x2', '\xB07', '\xB0C', '\x5', '\xB4', '[', '\x2', '\xB08', 
		'\xB09', '\a', '\x6', '\x2', '\x2', '\xB09', '\xB0B', '\x5', '\xB4', '[', 
		'\x2', '\xB0A', '\xB08', '\x3', '\x2', '\x2', '\x2', '\xB0B', '\xB0E', 
		'\x3', '\x2', '\x2', '\x2', '\xB0C', '\xB0A', '\x3', '\x2', '\x2', '\x2', 
		'\xB0C', '\xB0D', '\x3', '\x2', '\x2', '\x2', '\xB0D', '\xB0F', '\x3', 
		'\x2', '\x2', '\x2', '\xB0E', '\xB0C', '\x3', '\x2', '\x2', '\x2', '\xB0F', 
		'\xB10', '\a', '\x5', '\x2', '\x2', '\xB10', '\xB1C', '\x3', '\x2', '\x2', 
		'\x2', '\xB11', '\xB12', '\a', '\x4', '\x2', '\x2', '\xB12', '\xB13', 
		'\x5', '\xB4', '[', '\x2', '\xB13', '\xB14', '\a', '\x5', '\x2', '\x2', 
		'\xB14', '\xB1C', '\x3', '\x2', '\x2', '\x2', '\xB15', '\xB1C', '\a', 
		'\xE', '\x2', '\x2', '\xB16', '\xB1C', '\a', '\xF', '\x2', '\x2', '\xB17', 
		'\xB18', '\a', '\x10', '\x2', '\x2', '\xB18', '\xB19', '\x5', '\xB4', 
		'[', '\x2', '\xB19', '\xB1A', '\a', '\x11', '\x2', '\x2', '\xB1A', '\xB1C', 
		'\x3', '\x2', '\x2', '\x2', '\xB1B', '\xB02', '\x3', '\x2', '\x2', '\x2', 
		'\xB1B', '\xB03', '\x3', '\x2', '\x2', '\x2', '\xB1B', '\xB05', '\x3', 
		'\x2', '\x2', '\x2', '\xB1B', '\xB11', '\x3', '\x2', '\x2', '\x2', '\xB1B', 
		'\xB15', '\x3', '\x2', '\x2', '\x2', '\xB1B', '\xB16', '\x3', '\x2', '\x2', 
		'\x2', '\xB1B', '\xB17', '\x3', '\x2', '\x2', '\x2', '\xB1C', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB1D', '\xB1F', '\a', '\x12E', '\x2', '\x2', 
		'\xB1E', '\xB20', '\a', '\x132', '\x2', '\x2', '\xB1F', '\xB1E', '\x3', 
		'\x2', '\x2', '\x2', '\xB1F', '\xB20', '\x3', '\x2', '\x2', '\x2', '\xB20', 
		'\xB3C', '\x3', '\x2', '\x2', '\x2', '\xB21', '\xB23', '\a', '\x12C', 
		'\x2', '\x2', '\xB22', '\xB24', '\a', '\x132', '\x2', '\x2', '\xB23', 
		'\xB22', '\x3', '\x2', '\x2', '\x2', '\xB23', '\xB24', '\x3', '\x2', '\x2', 
		'\x2', '\xB24', '\xB3C', '\x3', '\x2', '\x2', '\x2', '\xB25', '\xB27', 
		'\a', '\x132', '\x2', '\x2', '\xB26', '\xB28', '\a', '\x132', '\x2', '\x2', 
		'\xB27', '\xB26', '\x3', '\x2', '\x2', '\x2', '\xB27', '\xB28', '\x3', 
		'\x2', '\x2', '\x2', '\xB28', '\xB3C', '\x3', '\x2', '\x2', '\x2', '\xB29', 
		'\xB2A', '\a', '\x12', '\x2', '\x2', '\xB2A', '\xB2B', '\a', '\x136', 
		'\x2', '\x2', '\xB2B', '\xB2D', '\a', '\x13', '\x2', '\x2', '\xB2C', '\xB2E', 
		'\a', '\x132', '\x2', '\x2', '\xB2D', '\xB2C', '\x3', '\x2', '\x2', '\x2', 
		'\xB2D', '\xB2E', '\x3', '\x2', '\x2', '\x2', '\xB2E', '\xB3C', '\x3', 
		'\x2', '\x2', '\x2', '\xB2F', '\xB31', '\a', '\x12', '\x2', '\x2', '\xB30', 
		'\xB32', '\a', '\x136', '\x2', '\x2', '\xB31', '\xB30', '\x3', '\x2', 
		'\x2', '\x2', '\xB31', '\xB32', '\x3', '\x2', '\x2', '\x2', '\xB32', '\xB33', 
		'\x3', '\x2', '\x2', '\x2', '\xB33', '\xB35', '\a', '\x6', '\x2', '\x2', 
		'\xB34', '\xB36', '\a', '\x136', '\x2', '\x2', '\xB35', '\xB34', '\x3', 
		'\x2', '\x2', '\x2', '\xB35', '\xB36', '\x3', '\x2', '\x2', '\x2', '\xB36', 
		'\xB37', '\x3', '\x2', '\x2', '\x2', '\xB37', '\xB39', '\a', '\x13', '\x2', 
		'\x2', '\xB38', '\xB3A', '\a', '\x132', '\x2', '\x2', '\xB39', '\xB38', 
		'\x3', '\x2', '\x2', '\x2', '\xB39', '\xB3A', '\x3', '\x2', '\x2', '\x2', 
		'\xB3A', '\xB3C', '\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB1D', '\x3', 
		'\x2', '\x2', '\x2', '\xB3B', '\xB21', '\x3', '\x2', '\x2', '\x2', '\xB3B', 
		'\xB25', '\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB29', '\x3', '\x2', '\x2', 
		'\x2', '\xB3B', '\xB2F', '\x3', '\x2', '\x2', '\x2', '\xB3C', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xB3D', '\xB3E', '\x5', '\xD6', 'l', '\x2', 
		'\xB3E', '\xB3F', '\a', '\x126', '\x2', '\x2', '\xB3F', '\xB40', '\x5', 
		'p', '\x39', '\x2', '\xB40', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB41', 
		'\xB42', '\a', '\x64', '\x2', '\x2', '\xB42', '\xB46', '\t', '\x1E', '\x2', 
		'\x2', '\xB43', '\xB44', '\a', '\x104', '\x2', '\x2', '\xB44', '\xB46', 
		'\t', '\x1F', '\x2', '\x2', '\xB45', '\xB41', '\x3', '\x2', '\x2', '\x2', 
		'\xB45', '\xB43', '\x3', '\x2', '\x2', '\x2', '\xB46', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xB47', '\xB48', '\a', '\x80', '\x2', '\x2', '\xB48', 
		'\xB49', '\a', '\x8F', '\x2', '\x2', '\xB49', '\xB4D', '\x5', '\xC0', 
		'\x61', '\x2', '\xB4A', '\xB4B', '\a', '\xCF', '\x2', '\x2', '\xB4B', 
		'\xB4D', '\t', ' ', '\x2', '\x2', '\xB4C', '\xB47', '\x3', '\x2', '\x2', 
		'\x2', '\xB4C', '\xB4A', '\x3', '\x2', '\x2', '\x2', '\xB4D', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xB4E', '\xB4F', '\a', '\xCF', '\x2', '\x2', 
		'\xB4F', '\xB56', '\a', '\x107', '\x2', '\x2', '\xB50', '\xB51', '\a', 
		'\xCF', '\x2', '\x2', '\xB51', '\xB56', '\a', '\x30', '\x2', '\x2', '\xB52', 
		'\xB53', '\a', '\xD3', '\x2', '\x2', '\xB53', '\xB56', '\a', '\xCF', '\x2', 
		'\x2', '\xB54', '\xB56', '\a', '\xE9', '\x2', '\x2', '\xB55', '\xB4E', 
		'\x3', '\x2', '\x2', '\x2', '\xB55', '\xB50', '\x3', '\x2', '\x2', '\x2', 
		'\xB55', '\xB52', '\x3', '\x2', '\x2', '\x2', '\xB55', '\xB54', '\x3', 
		'\x2', '\x2', '\x2', '\xB56', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xB57', 
		'\xB5D', '\x5', 'p', '\x39', '\x2', '\xB58', '\xB59', '\x5', '\xD6', 'l', 
		'\x2', '\xB59', '\xB5A', '\a', '\b', '\x2', '\x2', '\xB5A', '\xB5B', '\x5', 
		'p', '\x39', '\x2', '\xB5B', '\xB5D', '\x3', '\x2', '\x2', '\x2', '\xB5C', 
		'\xB57', '\x3', '\x2', '\x2', '\x2', '\xB5C', '\xB58', '\x3', '\x2', '\x2', 
		'\x2', '\xB5D', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xB5E', '\xB5F', 
		'\x5', '\xD6', 'l', '\x2', '\xB5F', '\xB60', '\a', '\x3', '\x2', '\x2', 
		'\xB60', '\xB61', '\x5', '\xD6', 'l', '\x2', '\xB61', '\xB64', '\x3', 
		'\x2', '\x2', '\x2', '\xB62', '\xB64', '\x5', '\xD6', 'l', '\x2', '\xB63', 
		'\xB5E', '\x3', '\x2', '\x2', '\x2', '\xB63', '\xB62', '\x3', '\x2', '\x2', 
		'\x2', '\xB64', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xB65', '\xB6A', 
		'\x5', '\xC4', '\x63', '\x2', '\xB66', '\xB67', '\a', '\x6', '\x2', '\x2', 
		'\xB67', '\xB69', '\x5', '\xC4', '\x63', '\x2', '\xB68', '\xB66', '\x3', 
		'\x2', '\x2', '\x2', '\xB69', '\xB6C', '\x3', '\x2', '\x2', '\x2', '\xB6A', 
		'\xB68', '\x3', '\x2', '\x2', '\x2', '\xB6A', '\xB6B', '\x3', '\x2', '\x2', 
		'\x2', '\xB6B', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xB6C', '\xB6A', 
		'\x3', '\x2', '\x2', '\x2', '\xB6D', '\xB6E', '\t', '!', '\x2', '\x2', 
		'\xB6E', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xB6F', '\xB74', '\x5', 
		'\xD6', 'l', '\x2', '\xB70', '\xB71', '\a', '\x3', '\x2', '\x2', '\xB71', 
		'\xB73', '\x5', '\xD6', 'l', '\x2', '\xB72', '\xB70', '\x3', '\x2', '\x2', 
		'\x2', '\xB73', '\xB76', '\x3', '\x2', '\x2', '\x2', '\xB74', '\xB72', 
		'\x3', '\x2', '\x2', '\x2', '\xB74', '\xB75', '\x3', '\x2', '\x2', '\x2', 
		'\xB75', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xB76', '\xB74', '\x3', 
		'\x2', '\x2', '\x2', '\xB77', '\xB78', '\a', '\x63', '\x2', '\x2', '\xB78', 
		'\xB79', '\x5', '\xCE', 'h', '\x2', '\xB79', '\xB7A', '\a', '\x1E', '\x2', 
		'\x2', '\xB7A', '\xB7B', '\a', '\xAF', '\x2', '\x2', '\xB7B', '\xB7C', 
		'\x5', 'v', '<', '\x2', '\xB7C', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xB7D', 
		'\xB7E', '\t', '\"', '\x2', '\x2', '\xB7E', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xB7F', '\xB83', '\x5', '\xD2', 'j', '\x2', '\xB80', '\xB83', 
		'\a', '@', '\x2', '\x2', '\xB81', '\xB83', '\a', '<', '\x2', '\x2', '\xB82', 
		'\xB7F', '\x3', '\x2', '\x2', '\x2', '\xB82', '\xB80', '\x3', '\x2', '\x2', 
		'\x2', '\xB82', '\xB81', '\x3', '\x2', '\x2', '\x2', '\xB83', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xB84', '\xB8A', '\x5', '\xD6', 'l', '\x2', 
		'\xB85', '\xB86', '\a', '\x110', '\x2', '\x2', '\xB86', '\xB8A', '\x5', 
		'\xD6', 'l', '\x2', '\xB87', '\xB88', '\a', '\xDB', '\x2', '\x2', '\xB88', 
		'\xB8A', '\x5', '\xD6', 'l', '\x2', '\xB89', '\xB84', '\x3', '\x2', '\x2', 
		'\x2', '\xB89', '\xB85', '\x3', '\x2', '\x2', '\x2', '\xB89', '\xB87', 
		'\x3', '\x2', '\x2', '\x2', '\xB8A', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xB8B', '\xB90', '\x5', '\xD6', 'l', '\x2', '\xB8C', '\xB8D', '\a', '\x6', 
		'\x2', '\x2', '\xB8D', '\xB8F', '\x5', '\xD6', 'l', '\x2', '\xB8E', '\xB8C', 
		'\x3', '\x2', '\x2', '\x2', '\xB8F', '\xB92', '\x3', '\x2', '\x2', '\x2', 
		'\xB90', '\xB8E', '\x3', '\x2', '\x2', '\x2', '\xB90', '\xB91', '\x3', 
		'\x2', '\x2', '\x2', '\xB91', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xB92', 
		'\xB90', '\x3', '\x2', '\x2', '\x2', '\xB93', '\xB99', '\a', '\x139', 
		'\x2', '\x2', '\xB94', '\xB99', '\a', '\x13B', '\x2', '\x2', '\xB95', 
		'\xB99', '\x5', '\xDA', 'n', '\x2', '\xB96', '\xB99', '\a', '\x13C', '\x2', 
		'\x2', '\xB97', '\xB99', '\a', '\x13A', '\x2', '\x2', '\xB98', '\xB93', 
		'\x3', '\x2', '\x2', '\x2', '\xB98', '\xB94', '\x3', '\x2', '\x2', '\x2', 
		'\xB98', '\xB95', '\x3', '\x2', '\x2', '\x2', '\xB98', '\xB96', '\x3', 
		'\x2', '\x2', '\x2', '\xB98', '\xB97', '\x3', '\x2', '\x2', '\x2', '\xB99', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xB9A', '\xB9C', '\a', '\x12D', '\x2', 
		'\x2', '\xB9B', '\xB9A', '\x3', '\x2', '\x2', '\x2', '\xB9B', '\xB9C', 
		'\x3', '\x2', '\x2', '\x2', '\xB9C', '\xB9D', '\x3', '\x2', '\x2', '\x2', 
		'\xB9D', '\xBA7', '\a', '\x137', '\x2', '\x2', '\xB9E', '\xBA0', '\a', 
		'\x12D', '\x2', '\x2', '\xB9F', '\xB9E', '\x3', '\x2', '\x2', '\x2', '\xB9F', 
		'\xBA0', '\x3', '\x2', '\x2', '\x2', '\xBA0', '\xBA1', '\x3', '\x2', '\x2', 
		'\x2', '\xBA1', '\xBA7', '\a', '\x138', '\x2', '\x2', '\xBA2', '\xBA4', 
		'\a', '\x12D', '\x2', '\x2', '\xBA3', '\xBA2', '\x3', '\x2', '\x2', '\x2', 
		'\xBA3', '\xBA4', '\x3', '\x2', '\x2', '\x2', '\xBA4', '\xBA5', '\x3', 
		'\x2', '\x2', '\x2', '\xBA5', '\xBA7', '\a', '\x136', '\x2', '\x2', '\xBA6', 
		'\xB9B', '\x3', '\x2', '\x2', '\x2', '\xBA6', '\xB9F', '\x3', '\x2', '\x2', 
		'\x2', '\xBA6', '\xBA3', '\x3', '\x2', '\x2', '\x2', '\xBA7', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xBA8', '\xBA9', '\t', '#', '\x2', '\x2', 
		'\xBA9', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x192', '\xF8', '\xFF', 
		'\x103', '\x107', '\x10D', '\x111', '\x118', '\x11D', '\x121', '\x127', 
		'\x12B', '\x140', '\x144', '\x148', '\x14C', '\x154', '\x158', '\x15B', 
		'\x162', '\x16B', '\x171', '\x175', '\x17B', '\x182', '\x18B', '\x197', 
		'\x1A0', '\x1A9', '\x1AF', '\x1BA', '\x1C2', '\x1CA', '\x1D1', '\x1DB', 
		'\x1E2', '\x1EA', '\x20E', '\x211', '\x214', '\x218', '\x21E', '\x223', 
		'\x22A', '\x230', '\x234', '\x238', '\x240', '\x246', '\x24A', '\x258', 
		'\x260', '\x273', '\x28C', '\x28F', '\x299', '\x29D', '\x2A4', '\x2AE', 
		'\x2B4', '\x2B9', '\x2BD', '\x2C3', '\x2CC', '\x2D2', '\x2D6', '\x2DD', 
		'\x2E1', '\x2E9', '\x2EE', '\x2F2', '\x2FA', '\x302', '\x307', '\x30B', 
		'\x315', '\x31C', '\x321', '\x325', '\x32F', '\x332', '\x33B', '\x340', 
		'\x346', '\x35E', '\x364', '\x366', '\x36C', '\x372', '\x374', '\x37C', 
		'\x37E', '\x384', '\x38A', '\x38C', '\x39B', '\x3A0', '\x3A7', '\x3B3', 
		'\x3B5', '\x3BD', '\x3BF', '\x3D1', '\x3D4', '\x3D8', '\x3DC', '\x3EE', 
		'\x3F1', '\x401', '\x40B', '\x410', '\x416', '\x419', '\x422', '\x424', 
		'\x427', '\x42D', '\x434', '\x439', '\x43F', '\x443', '\x447', '\x44D', 
		'\x458', '\x461', '\x46B', '\x46E', '\x473', '\x475', '\x47C', '\x482', 
		'\x484', '\x488', '\x492', '\x498', '\x49B', '\x49D', '\x4A9', '\x4B0', 
		'\x4B4', '\x4B8', '\x4BC', '\x4C3', '\x4CC', '\x4CF', '\x4D3', '\x4D8', 
		'\x4DC', '\x4E4', '\x4E7', '\x4EA', '\x4F1', '\x4FC', '\x4FF', '\x509', 
		'\x50C', '\x517', '\x51C', '\x524', '\x527', '\x52B', '\x534', '\x53D', 
		'\x540', '\x549', '\x54C', '\x54F', '\x553', '\x55E', '\x561', '\x568', 
		'\x56B', '\x57E', '\x582', '\x586', '\x58A', '\x58E', '\x592', '\x594', 
		'\x59F', '\x5A4', '\x5AD', '\x5B6', '\x5B9', '\x5BF', '\x5CB', '\x5CE', 
		'\x5D7', '\x5DA', '\x5E2', '\x5E5', '\x5E8', '\x5ED', '\x5F0', '\x5FC', 
		'\x5FF', '\x607', '\x60C', '\x610', '\x612', '\x614', '\x623', '\x625', 
		'\x630', '\x645', '\x64F', '\x65A', '\x65E', '\x660', '\x668', '\x66F', 
		'\x67C', '\x682', '\x692', '\x69B', '\x69E', '\x6A6', '\x6A9', '\x6B0', 
		'\x6B5', '\x6C0', '\x6C3', '\x6C7', '\x6C9', '\x6D1', '\x6DB', '\x6E1', 
		'\x6E3', '\x6EA', '\x6EE', '\x6F0', '\x6F7', '\x6FB', '\x6FD', '\x6FF', 
		'\x708', '\x713', '\x717', '\x721', '\x72B', '\x72F', '\x737', '\x739', 
		'\x746', '\x74E', '\x757', '\x75D', '\x765', '\x76B', '\x76F', '\x774', 
		'\x779', '\x77F', '\x78D', '\x78F', '\x7AD', '\x7B8', '\x7C0', '\x7C5', 
		'\x7CA', '\x7D7', '\x7DD', '\x7E4', '\x7E9', '\x7EC', '\x7EF', '\x7F4', 
		'\x7FB', '\x7FE', '\x807', '\x80A', '\x80E', '\x811', '\x814', '\x823', 
		'\x826', '\x839', '\x83D', '\x845', '\x849', '\x862', '\x865', '\x86E', 
		'\x874', '\x87A', '\x880', '\x889', '\x88C', '\x88F', '\x8A2', '\x8AB', 
		'\x8C1', '\x8C4', '\x8CE', '\x8D7', '\x8DD', '\x8E3', '\x8EE', '\x8F0', 
		'\x8F5', '\x8FC', '\x8FE', '\x904', '\x90A', '\x915', '\x91E', '\x923', 
		'\x928', '\x92A', '\x92C', '\x932', '\x934', '\x93E', '\x947', '\x949', 
		'\x94F', '\x951', '\x954', '\x95E', '\x960', '\x96C', '\x96F', '\x974', 
		'\x979', '\x985', '\x989', '\x98D', '\x990', '\x992', '\x99A', '\x99D', 
		'\x9A7', '\x9AF', '\x9B5', '\x9B7', '\x9BF', '\x9C9', '\x9CF', '\x9DD', 
		'\x9E6', '\x9ED', '\x9F2', '\x9F9', '\xA03', '\xA08', '\xA0F', '\xA29', 
		'\xA2E', '\xA30', '\xA37', '\xA3B', '\xA42', '\xA46', '\xA57', '\xA66', 
		'\xA6D', '\xA76', '\xA80', '\xA85', '\xA8E', '\xA93', '\xA9B', '\xAA3', 
		'\xAA6', '\xAAC', '\xAAF', '\xAB6', '\xABE', '\xAC1', '\xAC9', '\xACC', 
		'\xAE6', '\xAF1', '\xAF6', '\xAFD', '\xAFF', '\xB0C', '\xB1B', '\xB1F', 
		'\xB23', '\xB27', '\xB2D', '\xB31', '\xB35', '\xB39', '\xB3B', '\xB45', 
		'\xB4C', '\xB55', '\xB5C', '\xB63', '\xB6A', '\xB74', '\xB82', '\xB89', 
		'\xB90', '\xB98', '\xB9B', '\xB9F', '\xBA3', '\xBA6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
